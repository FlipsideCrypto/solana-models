{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-09-08T14:49:50.840190Z", "invocation_id": "f8cad522-f346-44da-8f53-b2a15946f203", "env": {}, "project_id": "aa409298ed4cba8bed8a1a82eb42bc54", "user_id": "813f8ae0-c962-4d36-8a58-1fe8c8fb6a0b", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.solana_models.bronze__blocks": {"raw_sql": "{{ config (\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    record_id, \r\n    offset_id AS block_id, \r\n    block_id AS offset_id, \r\n    block_timestamp, \r\n    network, \r\n    chain_id, \r\n    tx_count, \r\n    header, \r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM \r\n    {{ source(\r\n      'prod',\r\n      'solana_blocks'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.prod.solana_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "bronze", "fqn": ["solana_models", "bronze", "bronze__blocks"], "unique_id": "model.solana_models.bronze__blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "bronze\\bronze__blocks.sql", "original_file_path": "models\\bronze\\bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "5fec349eab70f2678f59a7d79fc7954f7c00f188cda0d3bbc58c66b98b24b042"}, "tags": [], "refs": [], "sources": [["prod", "solana_blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\bronze\\bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.1397264, "compiled_sql": "\n\nSELECT \n    record_id, \n    offset_id AS block_id, \n    block_id AS offset_id, \n    block_timestamp, \n    network, \n    chain_id, \n    tx_count, \n    header, \n    ingested_at,\n    _inserted_timestamp\nFROM \n    chainwalkers.prod.solana_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.bronze.blocks"}, "model.solana_models.bronze__transactions": {"raw_sql": "{{ config (\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n   record_id, \r\n   tx_id, \r\n   tx_block_index, \r\n   offset_id AS block_id, \r\n   block_id AS offset_id, \r\n   block_timestamp, \r\n   network, \r\n   chain_id, \r\n   tx, \r\n   ingested_at,\r\n   _inserted_timestamp\r\nFROM \r\n    {{ source(\r\n      'prod',\r\n      'solana_txs'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.prod.solana_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "bronze", "fqn": ["solana_models", "bronze", "bronze__transactions"], "unique_id": "model.solana_models.bronze__transactions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "bronze\\bronze__transactions.sql", "original_file_path": "models\\bronze\\bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "35c6544e5b8b3ee2bc1181e6f942ec9140abb3b4ba67fea9d2eb3176214f0a5c"}, "tags": [], "refs": [], "sources": [["prod", "solana_txs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\bronze\\bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.1484306, "compiled_sql": "\n\nSELECT\n   record_id, \n   tx_id, \n   tx_block_index, \n   offset_id AS block_id, \n   block_id AS offset_id, \n   block_timestamp, \n   network, \n   chain_id, \n   tx, \n   ingested_at,\n   _inserted_timestamp\nFROM \n    chainwalkers.prod.solana_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.bronze.transactions"}, "model.solana_models.core__ez_staking_lp_actions": {"raw_sql": "{{ config(\r\n    materialized = 'table',\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base_staking_lp_actions AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('silver__staking_lp_actions') }}\r\n\r\nUNION\r\n\r\n    SELECT\r\n        * \r\n    FROM \r\n        {{ ref('silver___historical_staking_lp_actions') }}\r\n    WHERE block_id < 109547725\r\n\r\n),\r\nmerges_and_splits AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        signers,\r\n        instruction :parsed :info :stakeAccount :: STRING AS stake_account,\r\n        'split_source' AS event_type,\r\n        account_keys,\r\n        pre_balances,\r\n        post_balances,\r\n        instruction\r\n    FROM\r\n        base_staking_lp_actions\r\n    WHERE\r\n        event_type = 'split'\r\n    UNION\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        signers,\r\n        instruction :parsed :info :newSplitAccount :: STRING AS stake_account,\r\n        'split_destination' AS event_type,\r\n        account_keys,\r\n        pre_balances,\r\n        post_balances,\r\n        instruction\r\n    FROM\r\n        base_staking_lp_actions\r\n    WHERE\r\n        event_type = 'split'\r\n    UNION\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        signers,\r\n        instruction :parsed :info :destination :: STRING AS stake_account,\r\n        'merge_destination' AS event_type,\r\n        account_keys,\r\n        pre_balances,\r\n        post_balances,\r\n        instruction\r\n    FROM\r\n        base_staking_lp_actions\r\n    WHERE\r\n        event_type = 'merge'\r\n    UNION\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        signers,\r\n        instruction :parsed :info :source :: STRING AS stake_account,\r\n        'merge_source' AS event_type,\r\n        account_keys,\r\n        pre_balances,\r\n        post_balances,\r\n        instruction\r\n    FROM\r\n        base_staking_lp_actions\r\n    WHERE\r\n        event_type = 'merge'\r\n),\r\nall_actions AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        signers,\r\n        instruction :parsed :info :stakeAccount :: STRING AS stake_account,\r\n        event_type,\r\n        account_keys,\r\n        pre_balances,\r\n        post_balances,\r\n        instruction\r\n    FROM\r\n        base_staking_lp_actions\r\n    WHERE\r\n        event_type NOT IN (\r\n            'merge',\r\n            'split'\r\n        )\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        merges_and_splits\r\n),\r\ntx_base AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        event_type,\r\n        LEAD(\r\n            event_type,\r\n            1\r\n        ) over (\r\n            PARTITION BY stake_account\r\n            ORDER BY\r\n                block_id,\r\n                INDEX\r\n        ) AS next_event_type,\r\n        signers,\r\n        CASE\r\n            WHEN event_type = 'initialize' THEN instruction :parsed :info :authorized :staker :: STRING\r\n            WHEN event_type = 'authorize'\r\n            AND instruction :parsed :info :authorityType = 'Staker' THEN instruction :parsed :info :newAuthority :: STRING\r\n            ELSE instruction :parsed :info :stakeAuthority :: STRING\r\n        END AS stake_authority,\r\n        CASE\r\n            WHEN event_type = 'initialize' THEN instruction :parsed :info :authorized :withdrawer :: STRING\r\n            WHEN event_type = 'authorize'\r\n            AND instruction :parsed :info :authorityType = 'Withdrawer' THEN instruction :parsed :info :newAuthority :: STRING\r\n            ELSE instruction :parsed :info :stakeAuthority :: STRING\r\n        END AS withdraw_authority,\r\n        stake_account,\r\n        CASE\r\n            WHEN event_type = 'delegate' THEN TRUE\r\n            WHEN next_event_type = 'delegate' THEN FALSE\r\n            WHEN next_event_type = 'deactivate' THEN TRUE\r\n            WHEN event_type IN (\r\n                'deactivate',\r\n                'merge_source'\r\n            ) THEN FALSE\r\n            ELSE NULL\r\n        END AS stake_active,\r\n        silver.udf_get_account_balances_index(\r\n            stake_account,\r\n            account_keys\r\n        ) AS balance_index,\r\n        pre_balances [balance_index] :: INTEGER AS pre_tx_staked_balance,\r\n        post_balances [balance_index] :: INTEGER AS post_tx_staked_balance,\r\n        instruction :parsed :info :voteAccount :: STRING AS vote_acct,\r\n        CASE\r\n            WHEN event_type = 'withdraw' THEN instruction :parsed :info :lamports :: NUMBER\r\n            ELSE NULL\r\n        END AS withdraw_amount,\r\n        CASE\r\n            WHEN event_type = 'withdraw' THEN instruction :parsed :info :destination :: STRING\r\n            ELSE NULL\r\n        END AS withdraw_destination\r\n    FROM\r\n        all_actions\r\n),\r\nvalidators AS (\r\n    SELECT\r\n        VALUE :nodePubkey :: STRING AS node_pubkey,\r\n        VALUE :commission :: INTEGER AS commission,\r\n        VALUE :votePubkey :: STRING AS vote_pubkey,\r\n        VALUE :number :: INTEGER AS validator_rank\r\n    FROM\r\n        {{ source(\r\n            'solana_external',\r\n            'validator_metadata_api'\r\n        ) }}\r\n),\r\nfill_vote_acct AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        event_type,\r\n        signers,\r\n        CASE\r\n            WHEN stake_authority IS NULL THEN LAST_VALUE(stake_authority) ignore nulls over (\r\n                PARTITION BY stake_authority\r\n                ORDER BY\r\n                    block_id,\r\n                    INDEX rows unbounded preceding\r\n            )\r\n            ELSE stake_authority\r\n        END AS stake_authority,\r\n        CASE\r\n            WHEN withdraw_authority IS NULL THEN LAST_VALUE(withdraw_authority) ignore nulls over (\r\n                PARTITION BY withdraw_authority\r\n                ORDER BY\r\n                    block_id,\r\n                    INDEX rows unbounded preceding\r\n            )\r\n            ELSE withdraw_authority\r\n        END AS withdraw_authority,\r\n        stake_account,\r\n        CASE\r\n            WHEN stake_active IS NULL THEN LAST_VALUE(stake_active) ignore nulls over (\r\n                PARTITION BY stake_account\r\n                ORDER BY\r\n                    block_id,\r\n                    INDEX rows unbounded preceding\r\n            )\r\n            ELSE stake_active\r\n        END AS stake_active,\r\n        pre_tx_staked_balance,\r\n        post_tx_staked_balance,\r\n        withdraw_amount,\r\n        withdraw_destination,\r\n        CASE\r\n            WHEN vote_acct IS NULL THEN LAST_VALUE(vote_acct) ignore nulls over (\r\n                PARTITION BY stake_account\r\n                ORDER BY\r\n                    block_id,\r\n                    INDEX rows unbounded preceding\r\n            )\r\n            ELSE vote_acct\r\n        END AS vote_account\r\n    FROM\r\n        tx_base\r\n), \r\nfill_vote_acct2 AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        event_type,\r\n        signers,\r\n        stake_authority, \r\n        withdraw_authority, \r\n        stake_account,\r\n        stake_active,\r\n        pre_tx_staked_balance,\r\n        post_tx_staked_balance,\r\n        withdraw_amount,\r\n        withdraw_destination, \r\n        CASE    \r\n            WHEN vote_account IS NULL THEN FIRST_VALUE(vote_account) ignore nulls over (\r\n                PARTITION BY stake_account\r\n                ORDER BY\r\n                    block_id,\r\n                    INDEX rows unbounded preceding\r\n            )\r\n            ELSE vote_account\r\n        END AS vote_account\r\n    FROM fill_vote_acct\r\n), \r\ntemp AS (\r\n    SELECT\r\n        b.block_id,\r\n        b.block_timestamp,\r\n        b.tx_id,\r\n        b.succeeded,\r\n        b.index,\r\n        b.event_type,\r\n        b.signers,\r\n        b.stake_authority,\r\n        b.withdraw_authority,\r\n        b.stake_account,\r\n        b.stake_active,\r\n        b.pre_tx_staked_balance,\r\n        b.post_tx_staked_balance,\r\n        b.withdraw_amount,\r\n        b.withdraw_destination,\r\n        COALESCE(\r\n            b.vote_account,\r\n            a.vote_account\r\n        ) AS vote_account  \r\n    FROM\r\n        fill_vote_acct2 b \r\n        LEFT OUTER JOIN fill_vote_acct2 a\r\n        ON b.tx_id = a.tx_id \r\n        AND b.index = a.index\r\n        AND b.event_type = 'split_destination'\r\n        AND a.event_type = 'split_source'   \r\n), \r\ntemp2 AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        INDEX,\r\n        event_type,\r\n        signers,\r\n        stake_authority, \r\n        withdraw_authority, \r\n        stake_account,\r\n        stake_active,\r\n        pre_tx_staked_balance,\r\n        post_tx_staked_balance,\r\n        withdraw_amount,\r\n        withdraw_destination, \r\n        CASE    \r\n            WHEN vote_account IS NULL THEN FIRST_VALUE(vote_account) ignore nulls over (\r\n                PARTITION BY stake_account\r\n                ORDER BY\r\n                    block_id,\r\n                    INDEX rows unbounded preceding\r\n            )\r\n            ELSE vote_account\r\n        END AS vote_account\r\n    FROM temp\r\n) \r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    tx_id,\r\n    succeeded,\r\n    INDEX,\r\n    event_type,\r\n    signers,\r\n    stake_authority, \r\n    withdraw_authority, \r\n    stake_account,\r\n    stake_active,\r\n    pre_tx_staked_balance,\r\n    post_tx_staked_balance,\r\n    withdraw_amount,\r\n    withdraw_destination, \r\n    vote_account, \r\n    node_pubkey,\r\n    validator_rank,\r\n    commission, \r\n    COALESCE(\r\n        address_name,\r\n        vote_account\r\n    ) AS validator_name\r\nFROM temp2\r\nLEFT OUTER JOIN validators v\r\nON vote_account = vote_pubkey\r\nLEFT OUTER JOIN {{ ref('core__dim_labels') }}\r\nON vote_account = address\r\nWHERE \r\n    block_id >= 109547725", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.solana_external.validator_metadata_api", "model.solana_models.silver__staking_lp_actions", "model.solana_models.silver___historical_staking_lp_actions", "model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__ez_staking_lp_actions"], "unique_id": "model.solana_models.core__ez_staking_lp_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__ez_staking_lp_actions.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.sql", "name": "core__ez_staking_lp_actions", "alias": "ez_staking_lp_actions", "checksum": {"name": "sha256", "checksum": "fdeaa8c6f60c33cbbd27745184480c058bfce343bae2e0c046f35d7b72eb2aa0"}, "tags": [], "refs": [["silver__staking_lp_actions"], ["silver___historical_staking_lp_actions"], ["core__dim_labels"]], "sources": [["solana_external", "validator_metadata_api"]], "metrics": [], "description": "An easy table for staking & LP actions that contains additional information about the validator.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_AUTHORITY": {"name": "STAKE_AUTHORITY", "description": "The wallet address of the user who initialized the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_ACCOUNT": {"name": "STAKE_ACCOUNT", "description": "An account address containing balances of staked SOL that belongs to the stake authority.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TX_STAKED_BALANCE": {"name": "PRE_TX_STAKED_BALANCE", "description": "The amount of Solana belonging to the stake account before the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TX_STAKED_BALANCE": {"name": "POST_TX_STAKED_BALANCE", "description": "The amount of Solana belonging to the stake account after the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_ACCOUNT": {"name": "VOTE_ACCOUNT", "description": "A voting account belonging to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_PUBKEY": {"name": "NODE_PUBKEY", "description": "A unique key belonging to the validator node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_RANK": {"name": "VALIDATOR_RANK", "description": "The rank of the validator by amount of delegated SOL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMMISSION": {"name": "COMMISSION", "description": "The percentage of staked earnings given to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__ez_staking_lp_actions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662571475.8592043, "compiled_sql": "\n\nWITH base_staking_lp_actions AS (\n\n    SELECT\n        *\n    FROM\n        SOLANA_DEV.silver.staking_lp_actions\n\nUNION\n\n    SELECT\n        * \n    FROM \n        SOLANA_DEV.silver._historical_staking_lp_actions\n    WHERE block_id < 109547725\n\n),\nmerges_and_splits AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        signers,\n        instruction :parsed :info :stakeAccount :: STRING AS stake_account,\n        'split_source' AS event_type,\n        account_keys,\n        pre_balances,\n        post_balances,\n        instruction\n    FROM\n        base_staking_lp_actions\n    WHERE\n        event_type = 'split'\n    UNION\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        signers,\n        instruction :parsed :info :newSplitAccount :: STRING AS stake_account,\n        'split_destination' AS event_type,\n        account_keys,\n        pre_balances,\n        post_balances,\n        instruction\n    FROM\n        base_staking_lp_actions\n    WHERE\n        event_type = 'split'\n    UNION\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        signers,\n        instruction :parsed :info :destination :: STRING AS stake_account,\n        'merge_destination' AS event_type,\n        account_keys,\n        pre_balances,\n        post_balances,\n        instruction\n    FROM\n        base_staking_lp_actions\n    WHERE\n        event_type = 'merge'\n    UNION\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        signers,\n        instruction :parsed :info :source :: STRING AS stake_account,\n        'merge_source' AS event_type,\n        account_keys,\n        pre_balances,\n        post_balances,\n        instruction\n    FROM\n        base_staking_lp_actions\n    WHERE\n        event_type = 'merge'\n),\nall_actions AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        signers,\n        instruction :parsed :info :stakeAccount :: STRING AS stake_account,\n        event_type,\n        account_keys,\n        pre_balances,\n        post_balances,\n        instruction\n    FROM\n        base_staking_lp_actions\n    WHERE\n        event_type NOT IN (\n            'merge',\n            'split'\n        )\n    UNION\n    SELECT\n        *\n    FROM\n        merges_and_splits\n),\ntx_base AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        event_type,\n        LEAD(\n            event_type,\n            1\n        ) over (\n            PARTITION BY stake_account\n            ORDER BY\n                block_id,\n                INDEX\n        ) AS next_event_type,\n        signers,\n        CASE\n            WHEN event_type = 'initialize' THEN instruction :parsed :info :authorized :staker :: STRING\n            WHEN event_type = 'authorize'\n            AND instruction :parsed :info :authorityType = 'Staker' THEN instruction :parsed :info :newAuthority :: STRING\n            ELSE instruction :parsed :info :stakeAuthority :: STRING\n        END AS stake_authority,\n        CASE\n            WHEN event_type = 'initialize' THEN instruction :parsed :info :authorized :withdrawer :: STRING\n            WHEN event_type = 'authorize'\n            AND instruction :parsed :info :authorityType = 'Withdrawer' THEN instruction :parsed :info :newAuthority :: STRING\n            ELSE instruction :parsed :info :stakeAuthority :: STRING\n        END AS withdraw_authority,\n        stake_account,\n        CASE\n            WHEN event_type = 'delegate' THEN TRUE\n            WHEN next_event_type = 'delegate' THEN FALSE\n            WHEN next_event_type = 'deactivate' THEN TRUE\n            WHEN event_type IN (\n                'deactivate',\n                'merge_source'\n            ) THEN FALSE\n            ELSE NULL\n        END AS stake_active,\n        silver.udf_get_account_balances_index(\n            stake_account,\n            account_keys\n        ) AS balance_index,\n        pre_balances [balance_index] :: INTEGER AS pre_tx_staked_balance,\n        post_balances [balance_index] :: INTEGER AS post_tx_staked_balance,\n        instruction :parsed :info :voteAccount :: STRING AS vote_acct,\n        CASE\n            WHEN event_type = 'withdraw' THEN instruction :parsed :info :lamports :: NUMBER\n            ELSE NULL\n        END AS withdraw_amount,\n        CASE\n            WHEN event_type = 'withdraw' THEN instruction :parsed :info :destination :: STRING\n            ELSE NULL\n        END AS withdraw_destination\n    FROM\n        all_actions\n),\nvalidators AS (\n    SELECT\n        VALUE :nodePubkey :: STRING AS node_pubkey,\n        VALUE :commission :: INTEGER AS commission,\n        VALUE :votePubkey :: STRING AS vote_pubkey,\n        VALUE :number :: INTEGER AS validator_rank\n    FROM\n        SOLANA_DEV.bronze.validator_metadata_api\n),\nfill_vote_acct AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        event_type,\n        signers,\n        CASE\n            WHEN stake_authority IS NULL THEN LAST_VALUE(stake_authority) ignore nulls over (\n                PARTITION BY stake_authority\n                ORDER BY\n                    block_id,\n                    INDEX rows unbounded preceding\n            )\n            ELSE stake_authority\n        END AS stake_authority,\n        CASE\n            WHEN withdraw_authority IS NULL THEN LAST_VALUE(withdraw_authority) ignore nulls over (\n                PARTITION BY withdraw_authority\n                ORDER BY\n                    block_id,\n                    INDEX rows unbounded preceding\n            )\n            ELSE withdraw_authority\n        END AS withdraw_authority,\n        stake_account,\n        CASE\n            WHEN stake_active IS NULL THEN LAST_VALUE(stake_active) ignore nulls over (\n                PARTITION BY stake_account\n                ORDER BY\n                    block_id,\n                    INDEX rows unbounded preceding\n            )\n            ELSE stake_active\n        END AS stake_active,\n        pre_tx_staked_balance,\n        post_tx_staked_balance,\n        withdraw_amount,\n        withdraw_destination,\n        CASE\n            WHEN vote_acct IS NULL THEN LAST_VALUE(vote_acct) ignore nulls over (\n                PARTITION BY stake_account\n                ORDER BY\n                    block_id,\n                    INDEX rows unbounded preceding\n            )\n            ELSE vote_acct\n        END AS vote_account\n    FROM\n        tx_base\n), \nfill_vote_acct2 AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        event_type,\n        signers,\n        stake_authority, \n        withdraw_authority, \n        stake_account,\n        stake_active,\n        pre_tx_staked_balance,\n        post_tx_staked_balance,\n        withdraw_amount,\n        withdraw_destination, \n        CASE    \n            WHEN vote_account IS NULL THEN FIRST_VALUE(vote_account) ignore nulls over (\n                PARTITION BY stake_account\n                ORDER BY\n                    block_id,\n                    INDEX rows unbounded preceding\n            )\n            ELSE vote_account\n        END AS vote_account\n    FROM fill_vote_acct\n), \ntemp AS (\n    SELECT\n        b.block_id,\n        b.block_timestamp,\n        b.tx_id,\n        b.succeeded,\n        b.index,\n        b.event_type,\n        b.signers,\n        b.stake_authority,\n        b.withdraw_authority,\n        b.stake_account,\n        b.stake_active,\n        b.pre_tx_staked_balance,\n        b.post_tx_staked_balance,\n        b.withdraw_amount,\n        b.withdraw_destination,\n        COALESCE(\n            b.vote_account,\n            a.vote_account\n        ) AS vote_account  \n    FROM\n        fill_vote_acct2 b \n        LEFT OUTER JOIN fill_vote_acct2 a\n        ON b.tx_id = a.tx_id \n        AND b.index = a.index\n        AND b.event_type = 'split_destination'\n        AND a.event_type = 'split_source'   \n), \ntemp2 AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        INDEX,\n        event_type,\n        signers,\n        stake_authority, \n        withdraw_authority, \n        stake_account,\n        stake_active,\n        pre_tx_staked_balance,\n        post_tx_staked_balance,\n        withdraw_amount,\n        withdraw_destination, \n        CASE    \n            WHEN vote_account IS NULL THEN FIRST_VALUE(vote_account) ignore nulls over (\n                PARTITION BY stake_account\n                ORDER BY\n                    block_id,\n                    INDEX rows unbounded preceding\n            )\n            ELSE vote_account\n        END AS vote_account\n    FROM temp\n) \nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    succeeded,\n    INDEX,\n    event_type,\n    signers,\n    stake_authority, \n    withdraw_authority, \n    stake_account,\n    stake_active,\n    pre_tx_staked_balance,\n    post_tx_staked_balance,\n    withdraw_amount,\n    withdraw_destination, \n    vote_account, \n    node_pubkey,\n    validator_rank,\n    commission, \n    COALESCE(\n        address_name,\n        vote_account\n    ) AS validator_name\nFROM temp2\nLEFT OUTER JOIN validators v\nON vote_account = vote_pubkey\nLEFT OUTER JOIN SOLANA_DEV.core.dim_labels\nON vote_account = address\nWHERE \n    block_id >= 109547725", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.ez_staking_lp_actions"}, "model.solana_models.silver__blocks": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"block_id\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n  post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\r\n) }}\r\n\r\nWITH base_tables AS (\r\n\r\n  SELECT\r\n    *\r\n  FROM\r\n    {{ ref('bronze__blocks') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n  _inserted_timestamp >= (\r\n    SELECT\r\n      MAX(_inserted_timestamp)\r\n    FROM\r\n      {{ this }}\r\n  )\r\n{% endif %}\r\n)\r\nSELECT\r\n  block_id,\r\n  block_timestamp,\r\n  network,\r\n  chain_id,\r\n  tx_count,\r\n  header :blockHeight :: INTEGER AS block_height,\r\n  header :blockhash :: VARCHAR AS block_hash,\r\n  header :parentSlot :: INTEGER AS previous_block_id,\r\n  header :previousBlockhash :: VARCHAR AS previous_block_hash,\r\n  ingested_at,\r\n  _inserted_timestamp\r\nFROM\r\n  base_tables qualify(ROW_NUMBER() over(PARTITION BY block_id\r\nORDER BY\r\n  _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__blocks"], "unique_id": "model.solana_models.silver__blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__blocks.sql", "original_file_path": "models\\silver\\silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "63ff6efb25afe6e266c9f43390a1f42522b2908d9c2e82333cdfcb09904993d9"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "solana network name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "chain identifier, this will always be solana.  Field is used in joins with crosschain tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "number of transactions within this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "heigh of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "hash of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_ID": {"name": "PREVIOUS_BLOCK_ID", "description": "previous slot value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_HASH": {"name": "PREVIOUS_BLOCK_HASH", "description": "previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__blocks.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1662571476.4489565, "compiled_sql": "\n\nWITH base_tables AS (\n\n  SELECT\n    *\n  FROM\n    SOLANA_DEV.bronze.blocks\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(_inserted_timestamp)\n    FROM\n      SOLANA_DEV.silver.blocks\n  )\n\n)\nSELECT\n  block_id,\n  block_timestamp,\n  network,\n  chain_id,\n  tx_count,\n  header :blockHeight :: INTEGER AS block_height,\n  header :blockhash :: VARCHAR AS block_hash,\n  header :parentSlot :: INTEGER AS previous_block_id,\n  header :previousBlockhash :: VARCHAR AS previous_block_hash,\n  ingested_at,\n  _inserted_timestamp\nFROM\n  base_tables qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n  _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.blocks"}, "model.solana_models.silver__decoded_instructions_data": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, event_index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['program_id'],\r\n) }}\r\n\r\nSELECT\r\n    tx_id,\r\n    event_index,\r\n    program_id,\r\n    instruction_type,\r\n    DATA,\r\n    TO_TIMESTAMP_NTZ(\r\n        SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n        0\r\n    ) AS _inserted_timestamp\r\nFROM\r\n    {{ source(\r\n        'solana_external',\r\n        'decoded_instructions_data_api'\r\n    ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over (PARTITION BY tx_id, event_index\r\nORDER BY\r\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.solana_external.decoded_instructions_data_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, event_index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["program_id"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__decoded_instructions_data"], "unique_id": "model.solana_models.silver__decoded_instructions_data", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__decoded_instructions_data.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.sql", "name": "silver__decoded_instructions_data", "alias": "decoded_instructions_data", "checksum": {"name": "sha256", "checksum": "8f7ffc7fd65459748bf9ca7f1c250e47311d266fcb5e0a12a35dd7d39ba3774d"}, "tags": [], "refs": [], "sources": [["solana_external", "decoded_instructions_data_api"]], "metrics": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION_TYPE": {"name": "INSTRUCTION_TYPE", "description": "Type of instruction being decoded for the specific program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "JSON object with decoded instructions data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__decoded_instructions_data.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, event_index)", "incremental_strategy": "delete+insert", "cluster_by": ["program_id"]}, "created_at": 1662571476.4925382, "compiled_sql": "\n\nSELECT\n    tx_id,\n    event_index,\n    program_id,\n    instruction_type,\n    DATA,\n    TO_TIMESTAMP_NTZ(\n        SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n        0\n    ) AS _inserted_timestamp\nFROM\n    SOLANA_DEV.bronze.decoded_instructions_data_api\n\n\nWHERE _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.decoded_instructions_data\n)\n\n\nqualify(ROW_NUMBER() over (PARTITION BY tx_id, event_index\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.decoded_instructions_data"}, "model.solana_models.silver__events": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE','program_id'],\r\n  post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\r\n) }}\r\n\r\nWITH base_i AS (\r\n  SELECT\r\n    block_timestamp, \r\n    block_id, \r\n    tx_id, \r\n    succeeded,\r\n    index :: INTEGER AS index, \r\n    value:parsed:type AS event_type, \r\n    value:programId AS program_id, \r\n    value, \r\n    ingested_at,\r\n    _inserted_timestamp\r\n  FROM {{ ref('silver___instructions') }} \r\n\r\n{% if is_incremental() %}\r\n  WHERE _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n), \r\n\r\nbase_ii AS (\r\n  SELECT\r\n    block_id, \r\n    tx_id, \r\n    mapped_instruction_index :: INTEGER AS mapped_instruction_index, \r\n    value,  \r\n    ingested_at,\r\n    _inserted_timestamp\r\n  FROM {{ ref('silver___inner_instructions') }}\r\n\r\n{% if is_incremental() %}\r\n  WHERE _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n) \r\n\r\nSELECT\r\n  i.block_timestamp,\r\n  i.block_id,\r\n  i.tx_id,\r\n  i.succeeded,\r\n  i.index,\r\n  i.event_type :: STRING AS event_type,\r\n  i.program_id :: STRING AS program_id, \r\n  i.value AS instruction,\r\n  ii.value AS inner_instruction,\r\n  i.ingested_at,\r\n  i._inserted_timestamp\r\nFROM\r\n  base_i\r\n  i\r\n  LEFT OUTER JOIN base_ii\r\n  ii\r\n  ON ii.block_id = i.block_id\r\n  AND ii.tx_id = i.tx_id\r\n  AND ii.mapped_instruction_index = i.index", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___instructions", "model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE", "program_id"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__events"], "unique_id": "model.solana_models.silver__events", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__events.sql", "original_file_path": "models\\silver\\silver__events.sql", "name": "silver__events", "alias": "events", "checksum": {"name": "sha256", "checksum": "d31c6422d3e5291bafde728a3d38642b5a5dd67ed7cd92ba00ad4adac32afdf2"}, "tags": [], "refs": [["silver___instructions"], ["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "An instruction specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__events.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE", "program_id"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1662571476.5111804, "compiled_sql": "\n\nWITH base_i AS (\n  SELECT\n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded,\n    index :: INTEGER AS index, \n    value:parsed:type AS event_type, \n    value:programId AS program_id, \n    value, \n    ingested_at,\n    _inserted_timestamp\n  FROM SOLANA_DEV.silver._instructions \n\n\n  WHERE _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.events\n)\n\n), \n\nbase_ii AS (\n  SELECT\n    block_id, \n    tx_id, \n    mapped_instruction_index :: INTEGER AS mapped_instruction_index, \n    value,  \n    ingested_at,\n    _inserted_timestamp\n  FROM SOLANA_DEV.silver._inner_instructions\n\n\n  WHERE _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.events\n)\n\n) \n\nSELECT\n  i.block_timestamp,\n  i.block_id,\n  i.tx_id,\n  i.succeeded,\n  i.index,\n  i.event_type :: STRING AS event_type,\n  i.program_id :: STRING AS program_id, \n  i.value AS instruction,\n  ii.value AS inner_instruction,\n  i.ingested_at,\n  i._inserted_timestamp\nFROM\n  base_i\n  i\n  LEFT OUTER JOIN base_ii\n  ii\n  ON ii.block_id = i.block_id\n  AND ii.tx_id = i.tx_id\n  AND ii.mapped_instruction_index = i.index", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.events"}, "model.solana_models.silver__staking_lp_actions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base_e AS (\r\n\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        INDEX,\r\n        event_type,\r\n        program_id,\r\n        instruction,\r\n        inner_instruction,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'Stake11111111111111111111111111111111111111'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n    UNION\r\n    SELECT\r\n        i.block_id,\r\n        i.block_timestamp,\r\n        i.tx_id,\r\n        CONCAT(\r\n            i.mapped_instruction_index,\r\n            '.',\r\n            ii.index\r\n        ) AS INDEX,\r\n        ii.value :parsed :type :: STRING AS event_type,\r\n        ii.value :programId :: STRING AS program_id,\r\n        ii.value AS instruction,\r\n        NULL AS inner_instruction,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('silver___inner_instructions') }}\r\n        i,\r\n        TABLE(FLATTEN(i.value :instructions)) ii\r\n    WHERE\r\n        ii.value :programId :: STRING = 'Stake11111111111111111111111111111111111111'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nbase_t AS (\r\n    SELECT\r\n        block_id,\r\n        tx_id,\r\n        succeeded,\r\n        signers,\r\n        pre_balances,\r\n        post_balances,\r\n        pre_token_balances,\r\n        post_token_balances,\r\n        account_keys\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n)\r\nSELECT\r\n    e.block_id,\r\n    e.block_timestamp,\r\n    e.tx_id,\r\n    t.succeeded,\r\n    e.index,\r\n    e.event_type,\r\n    e.program_id,\r\n    t.signers,\r\n    t.account_keys,\r\n    e.instruction,\r\n    e.inner_instruction,\r\n    t.pre_balances,\r\n    t.post_balances,\r\n    t.pre_token_balances,\r\n    t.post_token_balances,\r\n    e._inserted_timestamp\r\nFROM\r\n    base_e e\r\n    LEFT OUTER JOIN base_t t\r\n    ON t.block_id = e.block_id\r\n    AND t.tx_id = e.tx_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver___inner_instructions", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__staking_lp_actions"], "unique_id": "model.solana_models.silver__staking_lp_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__staking_lp_actions.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.sql", "name": "silver__staking_lp_actions", "alias": "staking_lp_actions", "checksum": {"name": "sha256", "checksum": "19a300bca1e61f8799e53e116426ff49b5edbea8519697ad13d6f60fd4c76db7"}, "tags": [], "refs": [["silver__events"], ["silver___inner_instructions"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__staking_lp_actions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662571477.0879822, "compiled_sql": "\n\nWITH base_e AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        INDEX,\n        event_type,\n        program_id,\n        instruction,\n        inner_instruction,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'Stake11111111111111111111111111111111111111'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.staking_lp_actions\n)\n\n    UNION\n    SELECT\n        i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        CONCAT(\n            i.mapped_instruction_index,\n            '.',\n            ii.index\n        ) AS INDEX,\n        ii.value :parsed :type :: STRING AS event_type,\n        ii.value :programId :: STRING AS program_id,\n        ii.value AS instruction,\n        NULL AS inner_instruction,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.silver._inner_instructions\n        i,\n        TABLE(FLATTEN(i.value :instructions)) ii\n    WHERE\n        ii.value :programId :: STRING = 'Stake11111111111111111111111111111111111111'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.staking_lp_actions\n)\n\n),\nbase_t AS (\n    SELECT\n        block_id,\n        tx_id,\n        succeeded,\n        signers,\n        pre_balances,\n        post_balances,\n        pre_token_balances,\n        post_token_balances,\n        account_keys\n    FROM\n        SOLANA_DEV.silver.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.staking_lp_actions\n    )\n\n)\nSELECT\n    e.block_id,\n    e.block_timestamp,\n    e.tx_id,\n    t.succeeded,\n    e.index,\n    e.event_type,\n    e.program_id,\n    t.signers,\n    t.account_keys,\n    e.instruction,\n    e.inner_instruction,\n    t.pre_balances,\n    t.post_balances,\n    t.pre_token_balances,\n    t.post_token_balances,\n    e._inserted_timestamp\nFROM\n    base_e e\n    LEFT OUTER JOIN base_t t\n    ON t.block_id = e.block_id\n    AND t.tx_id = e.tx_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.staking_lp_actions"}, "model.solana_models.silver__transactions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\",\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        block_timestamp,\r\n        block_id,\r\n        tx_id,\r\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\r\n        tx :meta :fee :: NUMBER AS fee,\r\n        CASE\r\n            WHEN IS_NULL_VALUE(\r\n                tx :meta :err\r\n            ) THEN TRUE\r\n            ELSE FALSE\r\n        END AS succeeded,\r\n        tx :transaction :message :accountKeys :: ARRAY AS account_keys,\r\n        tx :meta :preBalances :: ARRAY AS pre_balances,\r\n        tx :meta :postBalances :: ARRAY AS post_balances,\r\n        tx :meta :preTokenBalances :: ARRAY AS pre_token_balances,\r\n        tx :meta :postTokenBalances :: ARRAY AS post_token_balances,\r\n        tx :transaction :message :instructions :: ARRAY AS instructions,\r\n        tx :meta :innerInstructions :: ARRAY AS inner_instructions,\r\n        tx :meta :logMessages :: ARRAY AS log_messages,\r\n        ingested_at,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('bronze__transactions') }}\r\n        t\r\n    WHERE\r\n        COALESCE(\r\n            tx :transaction :message :instructions [0] :programId :: STRING,\r\n            ''\r\n        ) <> 'Vote111111111111111111111111111111111111111'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    b.tx_id,\r\n    recent_block_hash,\r\n    silver.udf_ordered_signers(account_keys) AS signers,\r\n    fee,\r\n    succeeded,\r\n    account_keys,\r\n    pre_balances,\r\n    post_balances,\r\n    pre_token_balances,\r\n    post_token_balances,\r\n    instructions,\r\n    inner_instructions,\r\n    log_messages,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    base b qualify(ROW_NUMBER() over(PARTITION BY b.block_id, b.tx_id\r\nORDER BY\r\n    b._inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__transactions"], "unique_id": "model.solana_models.silver__transactions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__transactions.sql", "original_file_path": "models\\silver\\silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "0332c34d63a28516692f7335c988d108047ede6a14dc5ab340fe1e200e4b5481"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_MESSAGES": {"name": "LOG_MESSAGES", "description": "Array of log messages written by the program for this transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__transactions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1662571477.2641122, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        tx :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN IS_NULL_VALUE(\n                tx :meta :err\n            ) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        tx :transaction :message :accountKeys :: ARRAY AS account_keys,\n        tx :meta :preBalances :: ARRAY AS pre_balances,\n        tx :meta :postBalances :: ARRAY AS post_balances,\n        tx :meta :preTokenBalances :: ARRAY AS pre_token_balances,\n        tx :meta :postTokenBalances :: ARRAY AS post_token_balances,\n        tx :transaction :message :instructions :: ARRAY AS instructions,\n        tx :meta :innerInstructions :: ARRAY AS inner_instructions,\n        tx :meta :logMessages :: ARRAY AS log_messages,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.bronze.transactions\n        t\n    WHERE\n        COALESCE(\n            tx :transaction :message :instructions [0] :programId :: STRING,\n            ''\n        ) <> 'Vote111111111111111111111111111111111111111'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.transactions\n)\n\n)\nSELECT\n    block_timestamp,\n    block_id,\n    b.tx_id,\n    recent_block_hash,\n    silver.udf_ordered_signers(account_keys) AS signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    base b qualify(ROW_NUMBER() over(PARTITION BY b.block_id, b.tx_id\nORDER BY\n    b._inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.transactions"}, "model.solana_models.silver__transfers": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\r\n) }}\r\n\r\nWITH base_transfers AS (\r\n\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        e.index,\r\n        e.instruction,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n\r\n{% if is_incremental() %}\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nWHERE\r\n    e.event_type IN (\r\n        'transfer',\r\n        'transferChecked'\r\n    )\r\n    AND t.succeeded = TRUE\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nbase_post_token_balances AS (\r\n    SELECT\r\n        tx_id,\r\n        owner,\r\n        account,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n),\r\nbase_pre_token_balances AS (\r\n    SELECT\r\n        tx_id,\r\n        owner,\r\n        account,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        {{ ref('silver___pre_token_balances') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n),\r\nspl_transfers AS (\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        e.index,\r\n        COALESCE(\r\n            p.owner,\r\n            e.instruction :parsed :info :authority :: STRING\r\n        ) AS tx_from,\r\n        COALESCE(\r\n            p2.owner,\r\n            instruction :parsed :info :destination :: STRING\r\n        ) AS tx_to,\r\n        COALESCE(\r\n            e.instruction :parsed :info :tokenAmount: decimals,\r\n            p.decimal,\r\n            p2.decimal,\r\n            p3.decimal,\r\n            p4.decimal\r\n        ) AS decimal_adj,\r\n        COALESCE (\r\n            e.instruction :parsed :info :amount :: INTEGER,\r\n            e.instruction :parsed :info :tokenAmount :amount :: INTEGER\r\n        ) / pow(\r\n            10,\r\n            decimal_adj\r\n        ) AS amount,\r\n        COALESCE(\r\n            p.mint,\r\n            p2.mint,\r\n            p3.mint,\r\n            p4.mint\r\n        ) AS mint,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        base_transfers e\r\n        LEFT OUTER JOIN base_pre_token_balances p\r\n        ON e.tx_id = p.tx_id\r\n        AND e.instruction :parsed :info :source :: STRING = p.account\r\n        LEFT OUTER JOIN base_post_token_balances p2\r\n        ON e.tx_id = p2.tx_id\r\n        AND e.instruction :parsed :info :destination :: STRING = p2.account\r\n        LEFT OUTER JOIN base_post_token_balances p3\r\n        ON e.tx_id = p3.tx_id\r\n        AND e.instruction :parsed :info :source :: STRING = p3.account\r\n        LEFT OUTER JOIN base_pre_token_balances p4\r\n        ON e.tx_id = p4.tx_id\r\n        AND e.instruction :parsed :info :destination :: STRING = p4.account\r\n    WHERE\r\n        e.instruction :parsed :info :authority :: STRING IS NOT NULL\r\n),\r\nsol_transfers AS (\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        e.index,\r\n        instruction :parsed :info :source :: STRING AS tx_from,\r\n        instruction :parsed :info :destination :: STRING AS tx_to,\r\n        instruction :parsed :info :lamports / pow(\r\n            10,\r\n            9\r\n        ) AS amount,\r\n        'So11111111111111111111111111111111111111112' AS mint,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        base_transfers e\r\n    WHERE\r\n        instruction :parsed :info :lamports :: STRING IS NOT NULL\r\n)\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    tx_id,\r\n    INDEX,\r\n    tx_from,\r\n    tx_to,\r\n    amount,\r\n    mint,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    spl_transfers\r\nUNION\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    tx_id,\r\n    INDEX,\r\n    tx_from,\r\n    tx_to,\r\n    amount,\r\n    mint,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    sol_transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__transfers"], "unique_id": "model.solana_models.silver__transfers", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__transfers.sql", "original_file_path": "models\\silver\\silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "8f630f63d42e62461e931b9a9781c786760d99d3b4617eccc1209a48ee089c2a"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"], ["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "A unique key that identifies the event's position within a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address that initiated an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The wallet address that receives tokens in an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The number of tokens sent during an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__transfers.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1662571477.2968352, "compiled_sql": "\n\nWITH base_transfers AS (\n\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        e.instruction,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n\n\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.transfers\n)\n\nWHERE\n    e.event_type IN (\n        'transfer',\n        'transferChecked'\n    )\n    AND t.succeeded = TRUE\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.transfers\n)\n\n),\nbase_post_token_balances AS (\n    SELECT\n        tx_id,\n        owner,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.transfers\n    )\n\n),\nbase_pre_token_balances AS (\n    SELECT\n        tx_id,\n        owner,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        SOLANA_DEV.silver._pre_token_balances\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.transfers\n    )\n\n),\nspl_transfers AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        COALESCE(\n            p.owner,\n            e.instruction :parsed :info :authority :: STRING\n        ) AS tx_from,\n        COALESCE(\n            p2.owner,\n            instruction :parsed :info :destination :: STRING\n        ) AS tx_to,\n        COALESCE(\n            e.instruction :parsed :info :tokenAmount: decimals,\n            p.decimal,\n            p2.decimal,\n            p3.decimal,\n            p4.decimal\n        ) AS decimal_adj,\n        COALESCE (\n            e.instruction :parsed :info :amount :: INTEGER,\n            e.instruction :parsed :info :tokenAmount :amount :: INTEGER\n        ) / pow(\n            10,\n            decimal_adj\n        ) AS amount,\n        COALESCE(\n            p.mint,\n            p2.mint,\n            p3.mint,\n            p4.mint\n        ) AS mint,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        base_transfers e\n        LEFT OUTER JOIN base_pre_token_balances p\n        ON e.tx_id = p.tx_id\n        AND e.instruction :parsed :info :source :: STRING = p.account\n        LEFT OUTER JOIN base_post_token_balances p2\n        ON e.tx_id = p2.tx_id\n        AND e.instruction :parsed :info :destination :: STRING = p2.account\n        LEFT OUTER JOIN base_post_token_balances p3\n        ON e.tx_id = p3.tx_id\n        AND e.instruction :parsed :info :source :: STRING = p3.account\n        LEFT OUTER JOIN base_pre_token_balances p4\n        ON e.tx_id = p4.tx_id\n        AND e.instruction :parsed :info :destination :: STRING = p4.account\n    WHERE\n        e.instruction :parsed :info :authority :: STRING IS NOT NULL\n),\nsol_transfers AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        instruction :parsed :info :source :: STRING AS tx_from,\n        instruction :parsed :info :destination :: STRING AS tx_to,\n        instruction :parsed :info :lamports / pow(\n            10,\n            9\n        ) AS amount,\n        'So11111111111111111111111111111111111111112' AS mint,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        base_transfers e\n    WHERE\n        instruction :parsed :info :lamports :: STRING IS NOT NULL\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    tx_from,\n    tx_to,\n    amount,\n    mint,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    spl_transfers\nUNION\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    tx_from,\n    tx_to,\n    amount,\n    mint,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    sol_transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.transfers"}, "model.solana_models.silver__votes": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        block_timestamp,\r\n        block_id,\r\n        tx_id,\r\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\r\n        tx :meta :fee :: NUMBER AS fee,\r\n        CASE\r\n            WHEN IS_NULL_VALUE(\r\n                tx :meta :err\r\n            ) THEN TRUE\r\n            ELSE FALSE\r\n        END AS succeeded,\r\n        tx :transaction :message :instructions [0] :parsed :info :voteAccount :: STRING AS vote_account,\r\n        tx :transaction :message :instructions [0] :parsed :info :voteAuthority :: STRING AS vote_authority,\r\n        tx :transaction :message :instructions [0] :parsed :info :vote :hash :: STRING AS vote_hash,\r\n        tx :transaction :message :instructions [0] :parsed :info :vote :slots :: ARRAY AS vote_slots,\r\n        ingested_at,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('bronze__transactions') }}\r\n        t\r\n    WHERE\r\n        tx :transaction :message :instructions [0] :parsed :type :: STRING IS NOT NULL\r\n        AND tx :transaction :message :instructions [0] :programId :: STRING = 'Vote111111111111111111111111111111111111111'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    recent_block_hash,\r\n    fee,\r\n    succeeded,\r\n    vote_account,\r\n    vote_authority,\r\n    vote_hash,\r\n    vote_slots,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    base qualify(ROW_NUMBER() over(PARTITION BY block_id, tx_id\r\nORDER BY\r\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__votes"], "unique_id": "model.solana_models.silver__votes", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__votes.sql", "original_file_path": "models\\silver\\silver__votes.sql", "name": "silver__votes", "alias": "votes", "checksum": {"name": "sha256", "checksum": "ad63d6ce322f01af6b047d979b821d293d1f4a9fb27bbd7aeb1b7ff8556bbb23"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_ACCOUNT": {"name": "VOTE_ACCOUNT", "description": "Account belonging to the voting delegator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_AUTHORITY": {"name": "VOTE_AUTHORITY", "description": "Authority for the voting delegator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_HASH": {"name": "VOTE_HASH", "description": "Unique hash representing this set of votes(?)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_SLOTS": {"name": "VOTE_SLOTS", "description": "Slots being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__votes.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1662571477.3267782, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        tx :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN IS_NULL_VALUE(\n                tx :meta :err\n            ) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        tx :transaction :message :instructions [0] :parsed :info :voteAccount :: STRING AS vote_account,\n        tx :transaction :message :instructions [0] :parsed :info :voteAuthority :: STRING AS vote_authority,\n        tx :transaction :message :instructions [0] :parsed :info :vote :hash :: STRING AS vote_hash,\n        tx :transaction :message :instructions [0] :parsed :info :vote :slots :: ARRAY AS vote_slots,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.bronze.transactions\n        t\n    WHERE\n        tx :transaction :message :instructions [0] :parsed :type :: STRING IS NOT NULL\n        AND tx :transaction :message :instructions [0] :programId :: STRING = 'Vote111111111111111111111111111111111111111'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.votes\n)\n\n)\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    fee,\n    succeeded,\n    vote_account,\n    vote_authority,\n    vote_hash,\n    vote_slots,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY block_id, tx_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.votes"}, "model.solana_models.silver__votes_agg_block": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"block_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH v AS (\r\n  SELECT \r\n    block_id, \r\n    count(block_id) AS num_votes\r\n  FROM {{ ref('silver__votes') }}\r\n  \r\n  {% if is_incremental() %}\r\n     WHERE _inserted_timestamp::date >= current_date - 1\r\n  {% endif %}\r\n\r\n  GROUP BY block_id\r\n)\r\n\r\nSELECT \r\n  t.block_timestamp,\r\n  v.block_id, \r\n  num_votes\r\n\r\nFROM v\r\n\r\nINNER JOIN (SELECT DISTINCT block_id, block_timestamp FROM {{ ref('silver__transactions') }}) t \r\nON v.block_id = t.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__votes", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__votes_agg_block"], "unique_id": "model.solana_models.silver__votes_agg_block", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__votes_agg_block.sql", "original_file_path": "models\\silver\\silver__votes_agg_block.sql", "name": "silver__votes_agg_block", "alias": "votes_agg_block", "checksum": {"name": "sha256", "checksum": "175eb3825b9186eb9d274de646ec07a693835a24ed4fd5c7970f35ecef1f21fa"}, "tags": [], "refs": [["silver__votes"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUM_VOTES": {"name": "NUM_VOTES", "description": "The number of vote events that occurred within the block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__votes_agg_block.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes_agg_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662571477.3632596, "compiled_sql": "\n\nWITH v AS (\n  SELECT \n    block_id, \n    count(block_id) AS num_votes\n  FROM SOLANA_DEV.silver.votes\n  \n  \n     WHERE _inserted_timestamp::date >= current_date - 1\n  \n\n  GROUP BY block_id\n)\n\nSELECT \n  t.block_timestamp,\n  v.block_id, \n  num_votes\n\nFROM v\n\nINNER JOIN (SELECT DISTINCT block_id, block_timestamp FROM SOLANA_DEV.silver.transactions) t \nON v.block_id = t.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.votes_agg_block"}, "model.solana_models.silver___all_undecoded_instructions_data": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n    post_hook = 'call silver.sp_bulk_get_decoded_instructions_data()',\r\n) }}\r\n\r\nWITH create_validator_gauge_instruction_data AS (\r\n\r\n    SELECT\r\n        program_id,\r\n        'CreateValidatorGauge' AS instruction_type,\r\n        tx_id,\r\n        INDEX,\r\n        instruction :data :: STRING AS DATA\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'va12L6Z9fa5aGJ7gxtJuQZ928nySAk5UetjcGPve3Nu'\r\n        AND DATA LIKE 'ykMtAXE4%'\r\n),\r\nmarinade_gauge_set_vote_instruction_data AS (\r\n    SELECT\r\n        program_id,\r\n        'GaugeSetVote' AS instruction_type,\r\n        tx_id,\r\n        INDEX,\r\n        instruction :data :: STRING AS DATA\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\r\n        AND DATA LIKE 'XGC1Gnw6V9Q%'\r\n),\r\npossible_undecoded_instructions AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        create_validator_gauge_instruction_data\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        marinade_gauge_set_vote_instruction_data\r\n)\r\nSELECT\r\n    p.*\r\nFROM\r\n    possible_undecoded_instructions p\r\n    LEFT OUTER JOIN {{ source(\r\n        'solana_external',\r\n        'decoded_instructions_data_api'\r\n    ) }}\r\n    d\r\n    ON p.tx_id = d.tx_id\r\n    AND p.index = d.event_index\r\nWHERE\r\n    d.tx_id IS NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.solana_external.decoded_instructions_data_api", "model.solana_models.silver__events", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [{"sql": "call silver.sp_bulk_get_decoded_instructions_data()", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___all_undecoded_instructions_data"], "unique_id": "model.solana_models.silver___all_undecoded_instructions_data", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___all_undecoded_instructions_data.sql", "original_file_path": "models\\silver\\silver___all_undecoded_instructions_data.sql", "name": "silver___all_undecoded_instructions_data", "alias": "_all_undecoded_instructions_data", "checksum": {"name": "sha256", "checksum": "079dd5b05ac743023388eef64016d44118b389370e2c9b5c41c06e9a5998a928"}, "tags": [], "refs": [["silver__events"], ["silver__events"]], "sources": [["solana_external", "decoded_instructions_data_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___all_undecoded_instructions_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "post-hook": ["call silver.sp_bulk_get_decoded_instructions_data()"]}, "created_at": 1662571475.440533, "compiled_sql": "\n\nWITH create_validator_gauge_instruction_data AS (\n\n    SELECT\n        program_id,\n        'CreateValidatorGauge' AS instruction_type,\n        tx_id,\n        INDEX,\n        instruction :data :: STRING AS DATA\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'va12L6Z9fa5aGJ7gxtJuQZ928nySAk5UetjcGPve3Nu'\n        AND DATA LIKE 'ykMtAXE4%'\n),\nmarinade_gauge_set_vote_instruction_data AS (\n    SELECT\n        program_id,\n        'GaugeSetVote' AS instruction_type,\n        tx_id,\n        INDEX,\n        instruction :data :: STRING AS DATA\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\n        AND DATA LIKE 'XGC1Gnw6V9Q%'\n),\npossible_undecoded_instructions AS (\n    SELECT\n        *\n    FROM\n        create_validator_gauge_instruction_data\n    UNION\n    SELECT\n        *\n    FROM\n        marinade_gauge_set_vote_instruction_data\n)\nSELECT\n    p.*\nFROM\n    possible_undecoded_instructions p\n    LEFT OUTER JOIN SOLANA_DEV.bronze.decoded_instructions_data_api\n    d\n    ON p.tx_id = d.tx_id\n    AND p.index = d.event_index\nWHERE\n    d.tx_id IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._all_undecoded_instructions_data"}, "model.solana_models.silver___all_unknown_stake_vote_accounts": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        DISTINCT stake_account\r\n    FROM\r\n        {{ ref('core__ez_staking_lp_actions') }}\r\n    WHERE\r\n        vote_account IS NULL\r\n    EXCEPT\r\n    SELECT\r\n        DISTINCT stake_account\r\n    FROM\r\n        {{ ref('core__ez_staking_lp_actions') }}\r\n    WHERE\r\n        vote_account IS NOT NULL\r\n),\r\nvalidator_keys as (\r\n    SELECT\r\n        VALUE :nodePubkey :: STRING AS node_pubkey\r\n    FROM\r\n        {{ source(\r\n            'solana_external',\r\n            'validator_metadata_api'\r\n        ) }}\r\n)\r\nSELECT\r\n    stake_account\r\nFROM\r\n    base\r\nWHERE \r\n    stake_account <> 'FeD1HoB2dyEZnxYpzUnkmQm9jTTY3D7cTf9TFaMGeBii' -- this thing has a ton of txs...it does voting doesnt seem like a stake account\r\nAND\r\n    stake_account not in (select node_pubkey from validator_keys)\r\nEXCEPT\r\nSELECT\r\n    account\r\nFROM\r\n    {{ source(\r\n        'solana_external',\r\n        'stake_account_tx_ids_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.solana_external.stake_account_tx_ids_api", "source.solana_models.solana_external.validator_metadata_api", "model.solana_models.core__ez_staking_lp_actions", "model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___all_unknown_stake_vote_accounts"], "unique_id": "model.solana_models.silver___all_unknown_stake_vote_accounts", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___all_unknown_stake_vote_accounts.sql", "original_file_path": "models\\silver\\silver___all_unknown_stake_vote_accounts.sql", "name": "silver___all_unknown_stake_vote_accounts", "alias": "_all_unknown_stake_vote_accounts", "checksum": {"name": "sha256", "checksum": "a9dbe209f4a747c3290f570d178da82aa5212922ad34630ae02f394e27a63297"}, "tags": [], "refs": [["core__ez_staking_lp_actions"], ["core__ez_staking_lp_actions"]], "sources": [["solana_external", "stake_account_tx_ids_api"], ["solana_external", "validator_metadata_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___all_unknown_stake_vote_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.4465353, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        DISTINCT stake_account\n    FROM\n        SOLANA_DEV.core.ez_staking_lp_actions\n    WHERE\n        vote_account IS NULL\n    EXCEPT\n    SELECT\n        DISTINCT stake_account\n    FROM\n        SOLANA_DEV.core.ez_staking_lp_actions\n    WHERE\n        vote_account IS NOT NULL\n),\nvalidator_keys as (\n    SELECT\n        VALUE :nodePubkey :: STRING AS node_pubkey\n    FROM\n        SOLANA_DEV.bronze.validator_metadata_api\n)\nSELECT\n    stake_account\nFROM\n    base\nWHERE \n    stake_account <> 'FeD1HoB2dyEZnxYpzUnkmQm9jTTY3D7cTf9TFaMGeBii' -- this thing has a ton of txs...it does voting doesnt seem like a stake account\nAND\n    stake_account not in (select node_pubkey from validator_keys)\nEXCEPT\nSELECT\n    account\nFROM\n    SOLANA_DEV.bronze.stake_account_tx_ids_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._all_unknown_stake_vote_accounts"}, "model.solana_models.silver___all_unknown_tx_details": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    signature as tx_id\r\nFROM\r\n    {{ source(\r\n        'solana_external',\r\n        'stake_account_tx_ids_api'\r\n    ) }}\r\nEXCEPT\r\nSELECT\r\n    tx_id\r\nFROM\r\n    {{ source(\r\n        'solana_external',\r\n        'txs_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.solana_external.txs_api", "source.solana_models.solana_external.stake_account_tx_ids_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___all_unknown_tx_details"], "unique_id": "model.solana_models.silver___all_unknown_tx_details", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___all_unknown_tx_details.sql", "original_file_path": "models\\silver\\silver___all_unknown_tx_details.sql", "name": "silver___all_unknown_tx_details", "alias": "_all_unknown_tx_details", "checksum": {"name": "sha256", "checksum": "937a8e62ca40810e2f0a9bea810f66937342bd1a54dfa32a52fe1c167253c78d"}, "tags": [], "refs": [], "sources": [["solana_external", "txs_api"], ["solana_external", "stake_account_tx_ids_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___all_unknown_tx_details.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.4495585, "compiled_sql": "\n\nSELECT\n    signature as tx_id\nFROM\n    SOLANA_DEV.bronze.stake_account_tx_ids_api\nEXCEPT\nSELECT\n    tx_id\nFROM\n    SOLANA_DEV.bronze.txs_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._all_unknown_tx_details"}, "model.solana_models.silver___historical_staking_lp_actions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH instructs AS (\r\n\r\n    SELECT\r\n        tx_id,\r\n        INDEX,\r\n        i.value :parsed :type :: STRING AS event_type,\r\n        i.value :programId :: STRING AS program_id,\r\n        i.value AS instruction\r\n    FROM\r\n        {{ source(\r\n            'solana_external',\r\n            'txs_api'\r\n        ) }},\r\n        TABLE(\r\n            FLATTEN (\r\n                DATA :result :transaction :message :instructions\r\n            )\r\n        ) i\r\n    WHERE\r\n        program_id = 'Stake11111111111111111111111111111111111111'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_date >= CURRENT_DATE - 1\r\nAND TO_TIMESTAMP_NTZ(\r\n    SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n    0\r\n) >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    tx_id,\r\n    CONCAT(\r\n        b.value :index,\r\n        '.',\r\n        C.index\r\n    ) AS INDEX,\r\n    C.value :parsed :type :: STRING AS event_type,\r\n    C.value :programId :: STRING AS program_id,\r\n    C.value AS instruction\r\nFROM\r\n    {{ source(\r\n        'solana_external',\r\n        'txs_api'\r\n    ) }} A,\r\n    TABLE(FLATTEN (DATA :result :meta :innerInstructions)) b,\r\n    TABLE(FLATTEN(b.value :instructions)) C\r\nWHERE\r\n    program_id = 'Stake11111111111111111111111111111111111111'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_date >= CURRENT_DATE - 1\r\nAND TO_TIMESTAMP_NTZ(\r\n    SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n    0\r\n) >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ntxs AS (\r\n    SELECT\r\n        DISTINCT tx_id\r\n    FROM\r\n        instructs\r\n),\r\ntx_base AS (\r\n    SELECT\r\n        DATA :result :slot AS block_id,\r\n        TO_TIMESTAMP_NTZ(\r\n            DATA :result :blockTime\r\n        ) AS block_timestamp,\r\n        i.tx_id,\r\n        CASE\r\n            WHEN DATA :result :meta :err :: STRING IS NULL THEN TRUE\r\n            ELSE FALSE\r\n        END AS succeeded,\r\n        DATA :result :transaction :message :accountKeys AS account_keys,\r\n        DATA :result :transaction :message :instructions AS instruction,\r\n        DATA :result :meta :innerInstructions AS inner_instruction,\r\n        DATA :result :meta :preBalances AS pre_balances,\r\n        DATA :result :meta :postBalances AS post_balances,\r\n        DATA :result :meta :preTokenBalances AS pre_token_balances,\r\n        DATA :result :meta :postTokenBalances AS post_token_balances,\r\n        TO_TIMESTAMP_NTZ(\r\n            SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n            0\r\n        ) AS _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'solana_external',\r\n            'txs_api'\r\n        ) }}\r\n        t\r\n        INNER JOIN txs i\r\n        ON i.tx_id = t.tx_id\r\n{% if is_incremental() %}\r\nWHERE _inserted_date >= CURRENT_DATE - 1\r\nAND TO_TIMESTAMP_NTZ(\r\n    SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n    0\r\n) >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    b.tx_id,\r\n    succeeded,\r\n    INDEX,\r\n    event_type,\r\n    program_id,\r\n    [] :: ARRAY AS signers,\r\n    account_keys :: ARRAY AS account_keys,\r\n    i.instruction,\r\n    inner_instruction :: variant AS inner_instruction,\r\n    pre_balances :: ARRAY AS pre_balances,\r\n    post_balances :: ARRAY AS post_balances,\r\n    pre_token_balances :: ARRAY AS pre_token_balances,\r\n    post_token_balances :: ARRAY AS post_token_balances,\r\n    b._inserted_timestamp\r\nFROM\r\n    instructs i\r\n    LEFT OUTER JOIN tx_base b\r\n    ON b.tx_id = i.tx_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.solana_external.txs_api", "source.solana_models.solana_external.txs_api", "source.solana_models.solana_external.txs_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___historical_staking_lp_actions"], "unique_id": "model.solana_models.silver___historical_staking_lp_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___historical_staking_lp_actions.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.sql", "name": "silver___historical_staking_lp_actions", "alias": "_historical_staking_lp_actions", "checksum": {"name": "sha256", "checksum": "661c20a70939ab40f649fc7209dd5ef8cdac2e962576a3d8370de0ab31feb06c"}, "tags": [], "refs": [], "sources": [["solana_external", "txs_api"], ["solana_external", "txs_api"], ["solana_external", "txs_api"]], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver___historical_staking_lp_actions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662571477.3824732, "compiled_sql": "\n\nWITH instructs AS (\n\n    SELECT\n        tx_id,\n        INDEX,\n        i.value :parsed :type :: STRING AS event_type,\n        i.value :programId :: STRING AS program_id,\n        i.value AS instruction\n    FROM\n        SOLANA_DEV.bronze.txs_api,\n        TABLE(\n            FLATTEN (\n                DATA :result :transaction :message :instructions\n            )\n        ) i\n    WHERE\n        program_id = 'Stake11111111111111111111111111111111111111'\n\n\nAND _inserted_date >= CURRENT_DATE - 1\nAND TO_TIMESTAMP_NTZ(\n    SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n    0\n) >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver._historical_staking_lp_actions\n)\n\nUNION\nSELECT\n    tx_id,\n    CONCAT(\n        b.value :index,\n        '.',\n        C.index\n    ) AS INDEX,\n    C.value :parsed :type :: STRING AS event_type,\n    C.value :programId :: STRING AS program_id,\n    C.value AS instruction\nFROM\n    SOLANA_DEV.bronze.txs_api A,\n    TABLE(FLATTEN (DATA :result :meta :innerInstructions)) b,\n    TABLE(FLATTEN(b.value :instructions)) C\nWHERE\n    program_id = 'Stake11111111111111111111111111111111111111'\n\n\nAND _inserted_date >= CURRENT_DATE - 1\nAND TO_TIMESTAMP_NTZ(\n    SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n    0\n) >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver._historical_staking_lp_actions\n)\n\n),\ntxs AS (\n    SELECT\n        DISTINCT tx_id\n    FROM\n        instructs\n),\ntx_base AS (\n    SELECT\n        DATA :result :slot AS block_id,\n        TO_TIMESTAMP_NTZ(\n            DATA :result :blockTime\n        ) AS block_timestamp,\n        i.tx_id,\n        CASE\n            WHEN DATA :result :meta :err :: STRING IS NULL THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        DATA :result :transaction :message :accountKeys AS account_keys,\n        DATA :result :transaction :message :instructions AS instruction,\n        DATA :result :meta :innerInstructions AS inner_instruction,\n        DATA :result :meta :preBalances AS pre_balances,\n        DATA :result :meta :postBalances AS post_balances,\n        DATA :result :meta :preTokenBalances AS pre_token_balances,\n        DATA :result :meta :postTokenBalances AS post_token_balances,\n        TO_TIMESTAMP_NTZ(\n            SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n            0\n        ) AS _inserted_timestamp\n    FROM\n        SOLANA_DEV.bronze.txs_api\n        t\n        INNER JOIN txs i\n        ON i.tx_id = t.tx_id\n\nWHERE _inserted_date >= CURRENT_DATE - 1\nAND TO_TIMESTAMP_NTZ(\n    SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n    0\n) >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver._historical_staking_lp_actions\n)\n\n)\nSELECT\n    block_id,\n    block_timestamp,\n    b.tx_id,\n    succeeded,\n    INDEX,\n    event_type,\n    program_id,\n    [] :: ARRAY AS signers,\n    account_keys :: ARRAY AS account_keys,\n    i.instruction,\n    inner_instruction :: variant AS inner_instruction,\n    pre_balances :: ARRAY AS pre_balances,\n    post_balances :: ARRAY AS post_balances,\n    pre_token_balances :: ARRAY AS pre_token_balances,\n    post_token_balances :: ARRAY AS post_token_balances,\n    b._inserted_timestamp\nFROM\n    instructs i\n    LEFT OUTER JOIN tx_base b\n    ON b.tx_id = i.tx_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._historical_staking_lp_actions"}, "model.solana_models.silver___inner_instructions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, mapped_instruction_index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    e.index,\r\n    e.value :index :: NUMBER AS mapped_instruction_index,\r\n    e.value,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('silver__transactions') }}\r\n    t,\r\n    TABLE(FLATTEN(inner_instructions)) AS e\r\nWHERE\r\n    COALESCE(\r\n        e.value :programId :: STRING,\r\n        ''\r\n    ) NOT IN (\r\n        -- exclude Pyth Oracle programs\r\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\r\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\r\n    )\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, mapped_instruction_index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___inner_instructions"], "unique_id": "model.solana_models.silver___inner_instructions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___inner_instructions.sql", "original_file_path": "models\\silver\\silver___inner_instructions.sql", "name": "silver___inner_instructions", "alias": "_inner_instructions", "checksum": {"name": "sha256", "checksum": "e08aecbe1b8c4682fdbfc0bcbdf450f579604de6629b0adb72548f0bbffc9f5a"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the inner_instruction within the inner_instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAPPED_INSTRUCTION_INDEX": {"name": "MAPPED_INSTRUCTION_INDEX", "description": "Specifies the instruction which this inner_instruction applies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "json object that contains the inner instruction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver___inner_instructions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, mapped_instruction_index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1662571477.399385, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    e.index,\n    e.value :index :: NUMBER AS mapped_instruction_index,\n    e.value,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.transactions\n    t,\n    TABLE(FLATTEN(inner_instructions)) AS e\nWHERE\n    COALESCE(\n        e.value :programId :: STRING,\n        ''\n    ) NOT IN (\n        -- exclude Pyth Oracle programs\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\n    )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver._inner_instructions\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._inner_instructions"}, "model.solana_models.silver___instructions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    e.index,\r\n    e.value,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('silver__transactions') }}\r\n    t,\r\n    TABLE(FLATTEN(instructions)) AS e\r\nWHERE\r\n    COALESCE(\r\n        e.value :programId :: STRING,\r\n        ''\r\n    ) NOT IN (\r\n        -- exclude Pyth Oracle programs\r\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\r\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\r\n    )\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___instructions"], "unique_id": "model.solana_models.silver___instructions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___instructions.sql", "original_file_path": "models\\silver\\silver___instructions.sql", "name": "silver___instructions", "alias": "_instructions", "checksum": {"name": "sha256", "checksum": "fccc7e34c3e0316ad92f6cc5f6743aa30595958af19202403dcb99c5e268e0a6"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the instruction within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "json object that contains the instruction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver___instructions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1662571477.4738984, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    e.index,\n    e.value,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.transactions\n    t,\n    TABLE(FLATTEN(instructions)) AS e\nWHERE\n    COALESCE(\n        e.value :programId :: STRING,\n        ''\n    ) NOT IN (\n        -- exclude Pyth Oracle programs\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\n    )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver._instructions\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._instructions"}, "model.solana_models.silver___post_token_balances": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    b.index,\r\n    b.value :accountIndex :: INTEGER AS account_index,\r\n    t.account_keys [account_index] :pubkey :: STRING AS account,\r\n    b.value :mint :: STRING AS mint,\r\n    b.value :owner :: STRING AS owner,\r\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\r\n    b.value :uiTokenAmount :decimals AS DECIMAL,\r\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\r\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('silver__transactions') }}\r\n    t,\r\n    TABLE(FLATTEN(post_token_balances)) b\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___post_token_balances"], "unique_id": "model.solana_models.silver___post_token_balances", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___post_token_balances.sql", "original_file_path": "models\\silver\\silver___post_token_balances.sql", "name": "silver___post_token_balances", "alias": "_post_token_balances", "checksum": {"name": "sha256", "checksum": "a3cbf74e086a5d426f428762cf6f961a31abbb6c40ebd64bdecadffa17b87076"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the post token balance entry within the array for a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_INDEX": {"name": "ACCOUNT_INDEX", "description": "Location corresponding to the index in the account_keys array", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "Address of the owner of the token account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Number of decimals in the token value, need to divide amount by 10^decimal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNT": {"name": "UIAMOUNT", "description": "Amount of the token in the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNTSTRING": {"name": "UIAMOUNTSTRING", "description": "Amount of the token in the transaction in string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver___post_token_balances.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1662571477.5020514, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    b.index,\n    b.value :accountIndex :: INTEGER AS account_index,\n    t.account_keys [account_index] :pubkey :: STRING AS account,\n    b.value :mint :: STRING AS mint,\n    b.value :owner :: STRING AS owner,\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\n    b.value :uiTokenAmount :decimals AS DECIMAL,\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.transactions\n    t,\n    TABLE(FLATTEN(post_token_balances)) b\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver._post_token_balances\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._post_token_balances"}, "model.solana_models.silver___pre_token_balances": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    b.index,\r\n    b.value :accountIndex :: INTEGER AS account_index,\r\n    t.account_keys [account_index] :pubkey :: STRING AS account,\r\n    b.value :mint :: STRING AS mint,\r\n    b.value :owner :: STRING AS owner,\r\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\r\n    b.value :uiTokenAmount :decimals AS DECIMAL,\r\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\r\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('silver__transactions') }}\r\n    t,\r\n    TABLE(FLATTEN(pre_token_balances)) b\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___pre_token_balances"], "unique_id": "model.solana_models.silver___pre_token_balances", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___pre_token_balances.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.sql", "name": "silver___pre_token_balances", "alias": "_pre_token_balances", "checksum": {"name": "sha256", "checksum": "2e7b1cae23bd8aacce84b9812c027f161cf6fa79ba5ce8405b7b8404f3e2c10b"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the pre token balance entry within the array for a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_INDEX": {"name": "ACCOUNT_INDEX", "description": "Location corresponding to the index in the accounts array", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "Address of the owner of the token account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Number of decimals in the token value, need to divide amount by 10^decimal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNT": {"name": "UIAMOUNT", "description": "Amount of the token in the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNTSTRING": {"name": "UIAMOUNTSTRING", "description": "Amount of the token in the transaction in string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver___pre_token_balances.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1662571477.5407383, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    b.index,\n    b.value :accountIndex :: INTEGER AS account_index,\n    t.account_keys [account_index] :pubkey :: STRING AS account,\n    b.value :mint :: STRING AS mint,\n    b.value :owner :: STRING AS owner,\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\n    b.value :uiTokenAmount :decimals AS DECIMAL,\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.transactions\n    t,\n    TABLE(FLATTEN(pre_token_balances)) b\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver._pre_token_balances\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._pre_token_balances"}, "model.solana_models.silver___prices": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    recorded_at,\r\n    symbol,\r\n    price,\r\n    total_supply,\r\n    volume_24h,\r\n    provider\r\nFROM\r\n    {{ source(\r\n        'shared',\r\n        'prices_v2'\r\n    ) }}\r\nWHERE\r\n    (\r\n        provider = 'coinmarketcap'\r\n        AND (\r\n            asset_id = '5426'\r\n            OR asset_id = '8526'\r\n            OR asset_id = '11461'\r\n            OR asset_id = '9549'\r\n            OR asset_id = '12297'\r\n            OR asset_id = '9015'\r\n            OR asset_id = '7978'\r\n            OR asset_id = '12236'\r\n            OR asset_id = '11171'\r\n            OR asset_id = '13524'\r\n            OR asset_id = '6187'\r\n            OR asset_id = '3408'\r\n            OR asset_id = '825'\r\n            OR asset_id = '7129'\r\n            OR asset_id = '4195'\r\n            OR asset_id = '11181'\r\n        )\r\n    )\r\n    OR (\r\n        provider = 'coingecko'\r\n        AND (\r\n            asset_id = 'solana'\r\n            OR asset_id = 'cope'\r\n            OR asset_id = 'bonfida'\r\n            OR asset_id = 'jet'\r\n            OR asset_id = 'mercurial'\r\n            OR asset_id = 'mango-markets'\r\n            OR asset_id = 'msol'\r\n            OR asset_id = 'raydium'\r\n            OR asset_id = 'saber'\r\n            OR asset_id = 'solend'\r\n            OR asset_id = 'serum'\r\n            OR asset_id = 'lido-staked-sol'\r\n            OR asset_id = 'ftx-token'\r\n            OR asset_id = 'usd-coin'\r\n            OR asset_id = 'tether'\r\n            OR asset_id = 'terrausd'\r\n        )\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.shared.prices_v2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver___prices"], "unique_id": "model.solana_models.silver___prices", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver___prices.sql", "original_file_path": "models\\silver\\silver___prices.sql", "name": "silver___prices", "alias": "_prices", "checksum": {"name": "sha256", "checksum": "d7a985441472850bb1bcf224982dce9ed01567ab29395c3371556130064d74c8"}, "tags": [], "refs": [], "sources": [["shared", "prices_v2"]], "metrics": [], "description": "", "columns": {"RECORDED_AT": {"name": "RECORDED_AT", "description": "Time that the price was recorded at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "Symbol of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "Price of the token at the recorded time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SUPPLY": {"name": "TOTAL_SUPPLY", "description": "Total supply of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOLUME_24H": {"name": "VOLUME_24H", "description": "Total volume of token traded in a 24H time period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROVIDER": {"name": "PROVIDER", "description": "Name of the provider of the price information", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver___prices.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571477.5856636, "compiled_sql": "\n\nSELECT\n    recorded_at,\n    symbol,\n    price,\n    total_supply,\n    volume_24h,\n    provider\nFROM\n    flipside_prod_db.silver.prices_v2\nWHERE\n    (\n        provider = 'coinmarketcap'\n        AND (\n            asset_id = '5426'\n            OR asset_id = '8526'\n            OR asset_id = '11461'\n            OR asset_id = '9549'\n            OR asset_id = '12297'\n            OR asset_id = '9015'\n            OR asset_id = '7978'\n            OR asset_id = '12236'\n            OR asset_id = '11171'\n            OR asset_id = '13524'\n            OR asset_id = '6187'\n            OR asset_id = '3408'\n            OR asset_id = '825'\n            OR asset_id = '7129'\n            OR asset_id = '4195'\n            OR asset_id = '11181'\n        )\n    )\n    OR (\n        provider = 'coingecko'\n        AND (\n            asset_id = 'solana'\n            OR asset_id = 'cope'\n            OR asset_id = 'bonfida'\n            OR asset_id = 'jet'\n            OR asset_id = 'mercurial'\n            OR asset_id = 'mango-markets'\n            OR asset_id = 'msol'\n            OR asset_id = 'raydium'\n            OR asset_id = 'saber'\n            OR asset_id = 'solend'\n            OR asset_id = 'serum'\n            OR asset_id = 'lido-staked-sol'\n            OR asset_id = 'ftx-token'\n            OR asset_id = 'usd-coin'\n            OR asset_id = 'tether'\n            OR asset_id = 'terrausd'\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver._prices"}, "model.solana_models.solana_share__dim_labels": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    cluster_by = ['address'],\r\n    tags = ['share']\r\n) }}\r\n\r\nSELECT\r\n  blockchain, \r\n  creator, \r\n  address,\r\n  label_type,\r\n  label_subtype,\r\n  label, \r\n  address_name\r\nFROM {{ref('core__dim_labels')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["address"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__dim_labels"], "unique_id": "model.solana_models.solana_share__dim_labels", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__dim_labels.sql", "original_file_path": "models\\solana_share\\solana_share__dim_labels.sql", "name": "solana_share__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "5be43bc42e3e893300a5fe5f40184fe519a06e662864d456722fe29e222e9813"}, "tags": ["share"], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "address", "cluster_by": ["address"], "tags": ["share"]}, "created_at": 1662571475.4767063, "compiled_sql": "\n\nSELECT\n  blockchain, \n  creator, \n  address,\n  label_type,\n  label_subtype,\n  label, \n  address_name\nFROM SOLANA_DEV.core.dim_labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.dim_labels"}, "model.solana_models.solana_share__ez_staking_lp_actions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"block_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_id,\r\n    block_timestamp,\r\n    tx_id,\r\n    succeeded,\r\n    INDEX,\r\n    event_type,\r\n    signers,\r\n    stake_authority, \r\n    withdraw_authority, \r\n    stake_account,\r\n    stake_active,\r\n    pre_tx_staked_balance,\r\n    post_tx_staked_balance,\r\n    withdraw_amount,\r\n    withdraw_destination, \r\n    vote_account, \r\n    node_pubkey,\r\n    validator_rank,\r\n    commission, \r\n    validator_name\r\nFROM {{ref('core__ez_staking_lp_actions')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__ez_staking_lp_actions"], "unique_id": "model.solana_models.solana_share__ez_staking_lp_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__ez_staking_lp_actions.sql", "original_file_path": "models\\solana_share\\solana_share__ez_staking_lp_actions.sql", "name": "solana_share__ez_staking_lp_actions", "alias": "ez_staking_lp_actions", "checksum": {"name": "sha256", "checksum": "c7641d0f4e2b0fccd444605c6b7b512fdfec557c1224de141da9e6472b016ce9"}, "tags": ["share"], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__ez_staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.4816303, "compiled_sql": "\n\n  SELECT \n    block_id,\n    block_timestamp,\n    tx_id,\n    succeeded,\n    INDEX,\n    event_type,\n    signers,\n    stake_authority, \n    withdraw_authority, \n    stake_account,\n    stake_active,\n    pre_tx_staked_balance,\n    post_tx_staked_balance,\n    withdraw_amount,\n    withdraw_destination, \n    vote_account, \n    node_pubkey,\n    validator_rank,\n    commission, \n    validator_name\nFROM SOLANA_DEV.core.ez_staking_lp_actions\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.ez_staking_lp_actions"}, "model.solana_models.solana_share__fact_blocks": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"block_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_id,\r\n    block_timestamp, \r\n    network,\r\n    chain_id,\r\n    tx_count,\r\n    block_height, \r\n    block_hash, \r\n    previous_block_id, \r\n    previous_block_hash\r\nFROM {{ref('core__fact_blocks')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_blocks"], "unique_id": "model.solana_models.solana_share__fact_blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_blocks.sql", "original_file_path": "models\\solana_share\\solana_share__fact_blocks.sql", "name": "solana_share__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "f84f981f4e7e14f4dbcf2c95a7fadea80ee83f5b1c011645f1bfec2e2f340b4a"}, "tags": ["share"], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.4831498, "compiled_sql": "\n\n  SELECT \n    block_id,\n    block_timestamp, \n    network,\n    chain_id,\n    tx_count,\n    block_height, \n    block_hash, \n    previous_block_id, \n    previous_block_hash\nFROM SOLANA_DEV.core.fact_blocks\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_blocks"}, "model.solana_models.solana_share__fact_events": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    index,\r\n    event_type,\r\n    program_id,\r\n    instruction,\r\n    inner_instruction\r\nFROM {{ref('core__fact_events')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_events"], "unique_id": "model.solana_models.solana_share__fact_events", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_events.sql", "original_file_path": "models\\solana_share\\solana_share__fact_events.sql", "name": "solana_share__fact_events", "alias": "fact_events", "checksum": {"name": "sha256", "checksum": "710dfbd9771ac9574d9db502bc4b5874ad79beedafb969710c775668679fe05a"}, "tags": ["share"], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.4851832, "compiled_sql": "\n\n  SELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    index,\n    event_type,\n    program_id,\n    instruction,\n    inner_instruction\nFROM SOLANA_DEV.core.fact_events\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_events"}, "model.solana_models.solana_share__fact_staking_lp_actions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    index,\r\n    event_type,\r\n    program_id,\r\n    signers,\r\n    account_keys,\r\n    instruction,\r\n    inner_instruction,\r\n    pre_balances,\r\n    post_balances,\r\n    pre_token_balances,\r\n    post_token_balances\r\nFROM {{ref('core__fact_staking_lp_actions')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_staking_lp_actions"], "unique_id": "model.solana_models.solana_share__fact_staking_lp_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_staking_lp_actions.sql", "original_file_path": "models\\solana_share\\solana_share__fact_staking_lp_actions.sql", "name": "solana_share__fact_staking_lp_actions", "alias": "fact_staking_lp_actions", "checksum": {"name": "sha256", "checksum": "ff2191f7f436586a3400ebcd124f4685e373f4bf0b2a5bdb22c93c35c0f4c1e2"}, "tags": ["share"], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.4999433, "compiled_sql": "\n\n  SELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    index,\n    event_type,\n    program_id,\n    signers,\n    account_keys,\n    instruction,\n    inner_instruction,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances\nFROM SOLANA_DEV.core.fact_staking_lp_actions\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_staking_lp_actions"}, "model.solana_models.solana_share__fact_transactions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    recent_block_hash,\r\n    signers,\r\n    fee,\r\n    succeeded,\r\n    account_keys,\r\n    pre_balances,\r\n    post_balances,\r\n    pre_token_balances,\r\n    post_token_balances,\r\n    instructions,\r\n    inner_instructions,\r\n    log_messages\r\nFROM {{ref('core__fact_transactions')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_transactions"], "unique_id": "model.solana_models.solana_share__fact_transactions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_transactions.sql", "original_file_path": "models\\solana_share\\solana_share__fact_transactions.sql", "name": "solana_share__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "3ac6ee94dd7483af233dd73d42fcc68668329b3c3c123c751d641761e00bb683"}, "tags": ["share"], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.5051093, "compiled_sql": "\n\n  SELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages\nFROM SOLANA_DEV.core.fact_transactions\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_transactions"}, "model.solana_models.solana_share__fact_transfers": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    index,\r\n    tx_from,\r\n    tx_to,\r\n    amount,\r\n    mint\r\nFROM {{ref('core__fact_transfers')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_transfers"], "unique_id": "model.solana_models.solana_share__fact_transfers", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_transfers.sql", "original_file_path": "models\\solana_share\\solana_share__fact_transfers.sql", "name": "solana_share__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "9f9db75f2165d839e2d8372fa8529512e2d729ce53f026463503dd5b803dc403"}, "tags": ["share"], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.5072014, "compiled_sql": "\n\n  SELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    index,\n    tx_from,\n    tx_to,\n    amount,\n    mint\nFROM SOLANA_DEV.core.fact_transfers\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_transfers"}, "model.solana_models.solana_share__fact_votes_agg_block": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"block_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_timestamp,\r\n    block_id,\r\n    num_votes\r\nFROM {{ref('core__fact_votes_agg_block')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_votes_agg_block"], "unique_id": "model.solana_models.solana_share__fact_votes_agg_block", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_votes_agg_block.sql", "original_file_path": "models\\solana_share\\solana_share__fact_votes_agg_block.sql", "name": "solana_share__fact_votes_agg_block", "alias": "fact_votes_agg_block", "checksum": {"name": "sha256", "checksum": "bbe2b55234efb0cb03f15bc0119484c5b5732134c0f37b669a8cff9a37b0c8f1"}, "tags": ["share"], "refs": [["core__fact_votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_votes_agg_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662571475.5091188, "compiled_sql": "\n\n  SELECT \n    block_timestamp,\n    block_id,\n    num_votes\nFROM SOLANA_DEV.core.fact_votes_agg_block\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_votes_agg_block"}, "model.solana_models.streamline__all_unknown_blocks_historical": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    SEQ8() + 98680445 AS block_id\r\nFROM\r\n    TABLE(GENERATOR(rowcount => 60000000))\r\nWHERE\r\n    block_id > 98680445\r\n    AND block_id <= 148693779\r\nEXCEPT\r\nSELECT\r\n    block_id\r\nFROM\r\n    {{ ref('streamline__complete_blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__all_unknown_blocks_historical"], "unique_id": "model.solana_models.streamline__all_unknown_blocks_historical", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__all_unknown_blocks_historical.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_blocks_historical.sql", "name": "streamline__all_unknown_blocks_historical", "alias": "all_unknown_blocks_historical", "checksum": {"name": "sha256", "checksum": "b44bdbfc32fa743174321750eddf9bdaa1a5d9854f198dd718e47064ce176f24"}, "tags": [], "refs": [["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__all_unknown_blocks_historical.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.5111983, "compiled_sql": "\n\nSELECT\n    SEQ8() + 98680445 AS block_id\nFROM\n    TABLE(GENERATOR(rowcount => 60000000))\nWHERE\n    block_id > 98680445\n    AND block_id <= 148693779\nEXCEPT\nSELECT\n    block_id\nFROM\n    SOLANA_DEV.streamline.complete_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.all_unknown_blocks_historical"}, "model.solana_models.streamline__all_unknown_blocks_real_time": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    SEQ8()+\r\n    iff(\r\n        (select max(block_id)-300000 from {{ ref('streamline__complete_block_txs') }}) < 148693779,\r\n        148693779,\r\n        (select max(block_id)-300000 from {{ ref('streamline__complete_block_txs') }})) \r\n    as block_id\r\nFROM\r\n    TABLE(GENERATOR(rowcount => 5000000))\r\nEXCEPT\r\nSELECT\r\n    block_id\r\nFROM\r\n    {{ ref('streamline__complete_blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__all_unknown_blocks_real_time"], "unique_id": "model.solana_models.streamline__all_unknown_blocks_real_time", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__all_unknown_blocks_real_time.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_blocks_real_time.sql", "name": "streamline__all_unknown_blocks_real_time", "alias": "all_unknown_blocks_real_time", "checksum": {"name": "sha256", "checksum": "7cd40c3cfef1a9da0f5c441811ce377edab9d365df40d883bdda9e234193e494"}, "tags": [], "refs": [["streamline__complete_block_txs"], ["streamline__complete_block_txs"], ["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__all_unknown_blocks_real_time.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.5133793, "compiled_sql": "\n\nSELECT\n    SEQ8()+\n    iff(\n        (select max(block_id)-300000 from SOLANA_DEV.streamline.complete_block_txs) < 148693779,\n        148693779,\n        (select max(block_id)-300000 from SOLANA_DEV.streamline.complete_block_txs)) \n    as block_id\nFROM\n    TABLE(GENERATOR(rowcount => 5000000))\nEXCEPT\nSELECT\n    block_id\nFROM\n    SOLANA_DEV.streamline.complete_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.all_unknown_blocks_real_time"}, "model.solana_models.streamline__all_unknown_block_rewards_historical": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nWITH pre_final AS (\r\n\r\n    SELECT\r\n        SEQ8()+98680445 AS block_id\r\n    FROM\r\n        TABLE(GENERATOR(rowcount => 60000000))\r\n    WHERE\r\n        block_id > 98680445\r\n        AND block_id <= 148693779\r\n    EXCEPT\r\n    SELECT\r\n        block_id\r\n    FROM\r\n        {{ ref('streamline__complete_block_rewards') }}\r\n)\r\nSELECT\r\n    block_id,\r\n    (\r\n        SELECT\r\n            coalesce(MAX(_partition_id) + 1,1)\r\n        FROM\r\n            {{ ref('streamline__complete_block_rewards') }}\r\n    ) AS batch_id\r\nFROM\r\n    pre_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__all_unknown_block_rewards_historical"], "unique_id": "model.solana_models.streamline__all_unknown_block_rewards_historical", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__all_unknown_block_rewards_historical.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_block_rewards_historical.sql", "name": "streamline__all_unknown_block_rewards_historical", "alias": "all_unknown_block_rewards_historical", "checksum": {"name": "sha256", "checksum": "1dbe648147e0e7cf746487f3159b079db7c70c392e9a712774a928f9c4ea9c7b"}, "tags": [], "refs": [["streamline__complete_block_rewards"], ["streamline__complete_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__all_unknown_block_rewards_historical.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.5152886, "compiled_sql": "\n\nWITH pre_final AS (\n\n    SELECT\n        SEQ8()+98680445 AS block_id\n    FROM\n        TABLE(GENERATOR(rowcount => 60000000))\n    WHERE\n        block_id > 98680445\n        AND block_id <= 148693779\n    EXCEPT\n    SELECT\n        block_id\n    FROM\n        SOLANA_DEV.streamline.complete_block_rewards\n)\nSELECT\n    block_id,\n    (\n        SELECT\n            coalesce(MAX(_partition_id) + 1,1)\n        FROM\n            SOLANA_DEV.streamline.complete_block_rewards\n    ) AS batch_id\nFROM\n    pre_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.all_unknown_block_rewards_historical"}, "model.solana_models.streamline__all_unknown_block_rewards_real_time": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nWITH pre_final AS (\r\n\r\n    SELECT\r\n        SEQ8()+\r\n        iff(\r\n            (select max(block_id)-300000 from {{ ref('streamline__complete_block_rewards') }}) < 148693779,\r\n            148693779,\r\n            (select max(block_id)-300000 from {{ ref('streamline__complete_block_rewards') }})) \r\n        as block_id\r\n    FROM\r\n        TABLE(GENERATOR(rowcount => 5000000))\r\n    EXCEPT\r\n    SELECT\r\n        block_id\r\n    FROM\r\n        {{ ref('streamline__complete_block_rewards') }}\r\n)\r\nSELECT\r\n    block_id,\r\n    (\r\n        SELECT\r\n            coalesce(MAX(_partition_id) + 1,1)\r\n        FROM\r\n            {{ ref('streamline__complete_block_rewards') }}\r\n    ) AS batch_id\r\nFROM\r\n    pre_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__all_unknown_block_rewards_real_time"], "unique_id": "model.solana_models.streamline__all_unknown_block_rewards_real_time", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__all_unknown_block_rewards_real_time.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_block_rewards_real_time.sql", "name": "streamline__all_unknown_block_rewards_real_time", "alias": "all_unknown_block_rewards_real_time", "checksum": {"name": "sha256", "checksum": "62a9b5996656b5b810cf943763be2e1d6a79cf4500b279f8ee6223b82c5d113f"}, "tags": [], "refs": [["streamline__complete_block_rewards"], ["streamline__complete_block_rewards"], ["streamline__complete_block_rewards"], ["streamline__complete_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__all_unknown_block_rewards_real_time.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.5172887, "compiled_sql": "\n\nWITH pre_final AS (\n\n    SELECT\n        SEQ8()+\n        iff(\n            (select max(block_id)-300000 from SOLANA_DEV.streamline.complete_block_rewards) < 148693779,\n            148693779,\n            (select max(block_id)-300000 from SOLANA_DEV.streamline.complete_block_rewards)) \n        as block_id\n    FROM\n        TABLE(GENERATOR(rowcount => 5000000))\n    EXCEPT\n    SELECT\n        block_id\n    FROM\n        SOLANA_DEV.streamline.complete_block_rewards\n)\nSELECT\n    block_id,\n    (\n        SELECT\n            coalesce(MAX(_partition_id) + 1,1)\n        FROM\n            SOLANA_DEV.streamline.complete_block_rewards\n    ) AS batch_id\nFROM\n    pre_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.all_unknown_block_rewards_real_time"}, "model.solana_models.streamline__all_unknown_block_txs_historical": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nWITH pre_final AS (\r\n\r\n    SELECT\r\n        SEQ8()+98680445 AS block_id\r\n    FROM\r\n        TABLE(GENERATOR(rowcount => 60000000))\r\n    WHERE\r\n        block_id > 98680445\r\n        AND block_id <= 148693779\r\n    EXCEPT\r\n    SELECT\r\n        block_id\r\n    FROM\r\n        {{ ref('streamline__complete_block_txs') }}\r\n)\r\nSELECT\r\n    block_id,\r\n    (\r\n        SELECT\r\n            coalesce(MAX(_partition_id) + 1,1)\r\n        FROM\r\n            {{ ref('streamline__complete_block_txs') }}\r\n    ) AS batch_id\r\nFROM\r\n    pre_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__all_unknown_block_txs_historical"], "unique_id": "model.solana_models.streamline__all_unknown_block_txs_historical", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__all_unknown_block_txs_historical.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_block_txs_historical.sql", "name": "streamline__all_unknown_block_txs_historical", "alias": "all_unknown_block_txs_historical", "checksum": {"name": "sha256", "checksum": "55b564306c9d89ba111df2a48e92010e0307395038a3e872f75d3eb772a5aa4b"}, "tags": [], "refs": [["streamline__complete_block_txs"], ["streamline__complete_block_txs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__all_unknown_block_txs_historical.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.5202885, "compiled_sql": "\n\nWITH pre_final AS (\n\n    SELECT\n        SEQ8()+98680445 AS block_id\n    FROM\n        TABLE(GENERATOR(rowcount => 60000000))\n    WHERE\n        block_id > 98680445\n        AND block_id <= 148693779\n    EXCEPT\n    SELECT\n        block_id\n    FROM\n        SOLANA_DEV.streamline.complete_block_txs\n)\nSELECT\n    block_id,\n    (\n        SELECT\n            coalesce(MAX(_partition_id) + 1,1)\n        FROM\n            SOLANA_DEV.streamline.complete_block_txs\n    ) AS batch_id\nFROM\n    pre_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.all_unknown_block_txs_historical"}, "model.solana_models.streamline__all_unknown_block_txs_real_time": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nWITH pre_final AS (\r\n\r\n    SELECT\r\n        SEQ8()+\r\n        iff(\r\n            (select max(block_id)-300000 from {{ ref('streamline__complete_block_txs') }}) < 148693779,\r\n            148693779,\r\n            (select max(block_id)-300000 from {{ ref('streamline__complete_block_txs') }})) \r\n        as block_id\r\n    FROM\r\n        TABLE(GENERATOR(rowcount => 5000000))\r\n    EXCEPT\r\n    SELECT\r\n        block_id\r\n    FROM\r\n        {{ ref('streamline__complete_block_txs') }}\r\n)\r\nSELECT\r\n    block_id,\r\n    (\r\n        SELECT\r\n            coalesce(MAX(_partition_id) + 1,1)\r\n        FROM\r\n            {{ ref('streamline__complete_block_txs') }}\r\n    ) AS batch_id\r\nFROM\r\n    pre_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__all_unknown_block_txs_real_time"], "unique_id": "model.solana_models.streamline__all_unknown_block_txs_real_time", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__all_unknown_block_txs_real_time.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_block_txs_real_time.sql", "name": "streamline__all_unknown_block_txs_real_time", "alias": "all_unknown_block_txs_real_time", "checksum": {"name": "sha256", "checksum": "957ddc27e18172e7e1f223f9bbe14d8a8e5a4583bcf80a60e08af9e745889fe3"}, "tags": [], "refs": [["streamline__complete_block_txs"], ["streamline__complete_block_txs"], ["streamline__complete_block_txs"], ["streamline__complete_block_txs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__all_unknown_block_txs_real_time.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662571475.5222847, "compiled_sql": "\n\nWITH pre_final AS (\n\n    SELECT\n        SEQ8()+\n        iff(\n            (select max(block_id)-300000 from SOLANA_DEV.streamline.complete_block_txs) < 148693779,\n            148693779,\n            (select max(block_id)-300000 from SOLANA_DEV.streamline.complete_block_txs)) \n        as block_id\n    FROM\n        TABLE(GENERATOR(rowcount => 5000000))\n    EXCEPT\n    SELECT\n        block_id\n    FROM\n        SOLANA_DEV.streamline.complete_block_txs\n)\nSELECT\n    block_id,\n    (\n        SELECT\n            coalesce(MAX(_partition_id) + 1,1)\n        FROM\n            SOLANA_DEV.streamline.complete_block_txs\n    ) AS batch_id\nFROM\n    pre_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.all_unknown_block_txs_real_time"}, "model.solana_models.streamline__complete_blocks": {"raw_sql": "{{ config (\r\n    materialized = \"incremental\",\r\n    unique_key = \"block_id\",\r\n    cluster_by = \"_inserted_date\",\r\n    merge_update_columns = [\"_inserted_date\",\"_inserted_timestamp\"]\r\n) }}\r\n\r\nWITH meta AS (\r\n\r\n    SELECT\r\n        registered_on,\r\n        file_name\r\n    FROM\r\n        TABLE(\r\n            information_schema.external_table_files(\r\n                table_name => '{{ source( \"solana_external\", \"blocks_api\") }}'\r\n            )\r\n        ) A\r\n{% if is_incremental() %}\r\nWHERE\r\n    registered_on >= (\r\n        SELECT\r\n            COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\r\n        FROM\r\n            {{ this }})\r\n{% endif %}\r\n)\r\nSELECT\r\n    block_id,\r\n    _inserted_date,\r\n    m.registered_on as _inserted_timestamp\r\nFROM\r\n    {{ source(\r\n        \"solana_external\",\r\n        \"blocks_api\"\r\n    ) }} AS s\r\n    JOIN meta m\r\n    ON m.file_name = metadata$filename\r\nWHERE\r\n    s.block_id IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\n    AND s._inserted_date >= CURRENT_DATE\r\n    AND m.registered_on > (\r\n        SELECT\r\n            max(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nqualify(ROW_NUMBER() over (PARTITION BY block_id\r\nORDER BY\r\n_inserted_date, _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.solana_external.blocks_api", "source.solana_models.solana_external.blocks_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": "_inserted_date", "merge_update_columns": ["_inserted_date", "_inserted_timestamp"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__complete_blocks"], "unique_id": "model.solana_models.streamline__complete_blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__complete_blocks.sql", "original_file_path": "models\\streamline\\streamline__complete_blocks.sql", "name": "streamline__complete_blocks", "alias": "complete_blocks", "checksum": {"name": "sha256", "checksum": "eb14a455558c0d4cacdf6edbd5c3ecd136b67e740df5d3ac76ab2be05da93a00"}, "tags": [], "refs": [], "sources": [["solana_external", "blocks_api"], ["solana_external", "blocks_api"]], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_DATE": {"name": "_INSERTED_DATE", "description": "Date that the external file was inserted into s3", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\streamline\\streamline__complete_blocks.yml", "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "cluster_by": "_inserted_date", "merge_update_columns": ["_inserted_date", "_inserted_timestamp"]}, "created_at": 1662571477.6099677, "compiled_sql": "\n\nWITH meta AS (\n\n    SELECT\n        registered_on,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => 'SOLANA_DEV.bronze.blocks_api'\n            )\n        ) A\n\nWHERE\n    registered_on >= (\n        SELECT\n            COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n        FROM\n            SOLANA_DEV.streamline.complete_blocks)\n\n)\nSELECT\n    block_id,\n    _inserted_date,\n    m.registered_on as _inserted_timestamp\nFROM\n    SOLANA_DEV.bronze.blocks_api AS s\n    JOIN meta m\n    ON m.file_name = metadata$filename\nWHERE\n    s.block_id IS NOT NULL\n\n\n    AND s._inserted_date >= CURRENT_DATE\n    AND m.registered_on > (\n        SELECT\n            max(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.streamline.complete_blocks\n    )\n\nqualify(ROW_NUMBER() over (PARTITION BY block_id\nORDER BY\n_inserted_date, _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.complete_blocks"}, "model.solana_models.streamline__complete_block_rewards": {"raw_sql": "{{ config (\r\n    materialized = \"incremental\",\r\n    unique_key = \"block_id\",\r\n    cluster_by = \"_partition_id\",\r\n    merge_update_columns = [\"_partition_id\"]\r\n) }}\r\n\r\nSELECT\r\n    block_id,\r\n    _partition_id\r\nFROM\r\n    {{ source(\r\n        \"solana_external\",\r\n        \"block_rewards_api\"\r\n    ) }} AS s\r\nWHERE\r\n    s.block_id IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND s._partition_id > (\r\n    select \r\n        coalesce(max(_partition_id),0)\r\n    from\r\n        {{ this }}\r\n)\r\n{% endif %}\r\ngroup by 1,2", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.solana_external.block_rewards_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": "_partition_id", "merge_update_columns": ["_partition_id"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__complete_block_rewards"], "unique_id": "model.solana_models.streamline__complete_block_rewards", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__complete_block_rewards.sql", "original_file_path": "models\\streamline\\streamline__complete_block_rewards.sql", "name": "streamline__complete_block_rewards", "alias": "complete_block_rewards", "checksum": {"name": "sha256", "checksum": "c79eacf1bdcf7c04231318ebcc746b68c6e072dcc45920b62c9c8208289ffd62"}, "tags": [], "refs": [], "sources": [["solana_external", "block_rewards_api"]], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_PARTITION_ID": {"name": "_PARTITION_ID", "description": "Value representing a single pipeline execution batch", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\streamline\\streamline__complete_block_rewards.yml", "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "cluster_by": "_partition_id", "merge_update_columns": ["_partition_id"]}, "created_at": 1662571477.6240206, "compiled_sql": "\n\nSELECT\n    block_id,\n    _partition_id\nFROM\n    SOLANA_DEV.bronze.block_rewards_api AS s\nWHERE\n    s.block_id IS NOT NULL\n\n\nAND s._partition_id > (\n    select \n        coalesce(max(_partition_id),0)\n    from\n        SOLANA_DEV.streamline.complete_block_rewards\n)\n\ngroup by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.complete_block_rewards"}, "model.solana_models.streamline__complete_block_txs": {"raw_sql": "{{ config (\r\n    materialized = \"incremental\",\r\n    unique_key = \"block_id\",\r\n    cluster_by = \"_partition_id\",\r\n    merge_update_columns = [\"_partition_id\"]\r\n) }}\r\n\r\nSELECT\r\n    block_id,\r\n    _partition_id\r\nFROM\r\n    {{ source(\r\n        \"solana_external\",\r\n        \"block_txs_api\"\r\n    ) }} AS s\r\nWHERE\r\n    s.block_id IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND s._partition_id > (\r\n    select \r\n        coalesce(max(_partition_id),0)\r\n    from\r\n        {{ this }}\r\n)\r\n{% endif %}\r\ngroup by 1,2\r\n{% if not is_incremental() %}\r\nqualify(ROW_NUMBER() over (PARTITION BY block_id\r\nORDER BY\r\n_partition_id DESC)) = 1\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.solana_external.block_txs_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": "_partition_id", "merge_update_columns": ["_partition_id"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "streamline", "fqn": ["solana_models", "streamline", "streamline__complete_block_txs"], "unique_id": "model.solana_models.streamline__complete_block_txs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "streamline\\streamline__complete_block_txs.sql", "original_file_path": "models\\streamline\\streamline__complete_block_txs.sql", "name": "streamline__complete_block_txs", "alias": "complete_block_txs", "checksum": {"name": "sha256", "checksum": "2c0507675cef249d2380d5e8b1e56c3470c3c75a800dff8fbb98d1b5f14901aa"}, "tags": [], "refs": [], "sources": [["solana_external", "block_txs_api"]], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_PARTITION_ID": {"name": "_PARTITION_ID", "description": "Value representing a single pipeline execution batch", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\streamline\\streamline__complete_block_txs.yml", "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_txs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "cluster_by": "_partition_id", "merge_update_columns": ["_partition_id"]}, "created_at": 1662571477.638708, "compiled_sql": "\n\nSELECT\n    block_id,\n    _partition_id\nFROM\n    SOLANA_DEV.bronze.block_txs_api AS s\nWHERE\n    s.block_id IS NOT NULL\n\n\nAND s._partition_id > (\n    select \n        coalesce(max(_partition_id),0)\n    from\n        SOLANA_DEV.streamline.complete_block_txs\n)\n\ngroup by 1,2\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.streamline.complete_block_txs"}, "test.solana_models.test_silver__blocks__block_hash-assert-no-gaps": {"raw_sql": "{{ config(error_if = '>500', warn_if = '>400') }}\r\n\r\nWITH tmp AS (\r\n    SELECT  block_id, \r\n            block_hash, \r\n            previous_block_hash\r\n    FROM {{ ref('silver__blocks') }}\r\n), \r\n\r\nhash AS (\r\n        SELECT  \r\n            t.block_id AS missing_slot, \r\n            t.block_hash \r\n        FROM tmp t\r\n        LEFT JOIN tmp t2\r\n        ON t.previous_block_hash = t2.block_hash\r\n        WHERE t2.block_hash is null \r\n) \r\n\r\nSELECT \r\n    *\r\nFROM hash", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">400", "error_if": ">500"}, "database": "SOLANA_DEV", "schema": "test_silver", "fqn": ["solana_models", "test_silver__blocks__block_hash-assert-no-gaps"], "unique_id": "test.solana_models.test_silver__blocks__block_hash-assert-no-gaps", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "test_silver__blocks__block_hash-assert-no-gaps.sql", "original_file_path": "tests\\test_silver__blocks__block_hash-assert-no-gaps.sql", "name": "test_silver__blocks__block_hash-assert-no-gaps", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "d9957ab64df27e64ae6937a46fb12dee7b64420f180d1d6feca455d461ef2cae"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\tests\\test_silver__blocks__block_hash-assert-no-gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "error_if": ">500", "warn_if": ">400"}, "created_at": 1662571475.5532846, "compiled_sql": "\n\nWITH tmp AS (\n    SELECT  block_id, \n            block_hash, \n            previous_block_hash\n    FROM SOLANA_DEV.silver.blocks\n), \n\nhash AS (\n        SELECT  \n            t.block_id AS missing_slot, \n            t.block_hash \n        FROM tmp t\n        LEFT JOIN tmp t2\n        ON t.previous_block_hash = t2.block_hash\n        WHERE t2.block_hash is null \n) \n\nSELECT \n    *\nFROM hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.test_silver.blocks"}, "test.solana_models.test_silver__transactions__block_id-assert-no-gaps": {"raw_sql": "{{ config(error_if = '>500', warn_if = '>500') }}\r\n\r\nSELECT \r\n    block_id AS slot\r\nFROM {{ ref('silver__blocks') }}\r\nWHERE block_timestamp::date <= current_date - 1\r\nAND block_id NOT IN (\r\n    SELECT \r\n        block_id \r\n    FROM {{ ref('silver__transactions') }}\r\n)\r\n\r\nAND block_id NOT IN (\r\n    SELECT \r\n        block_id \r\n    FROM {{ ref('silver__votes') }}\r\n)\r\n\r\nAND tx_count > 0", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__blocks", "model.solana_models.silver__transactions", "model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": ">500"}, "database": "SOLANA_DEV", "schema": "test_silver", "fqn": ["solana_models", "test_silver__transactions__block_id-assert-no-gaps"], "unique_id": "test.solana_models.test_silver__transactions__block_id-assert-no-gaps", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "test_silver__transactions__block_id-assert-no-gaps.sql", "original_file_path": "tests\\test_silver__transactions__block_id-assert-no-gaps.sql", "name": "test_silver__transactions__block_id-assert-no-gaps", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "792546ce53f20bd7087b65bb15987a82863dffe4f3884a9bdc36f4fe0d80feef"}, "tags": [], "refs": [["silver__blocks"], ["silver__transactions"], ["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\tests\\test_silver__transactions__block_id-assert-no-gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "error_if": ">500", "warn_if": ">500"}, "created_at": 1662571475.5572848, "compiled_sql": "\n\nSELECT \n    block_id AS slot\nFROM SOLANA_DEV.silver.blocks\nWHERE block_timestamp::date <= current_date - 1\nAND block_id NOT IN (\n    SELECT \n        block_id \n    FROM SOLANA_DEV.silver.transactions\n)\n\nAND block_id NOT IN (\n    SELECT \n        block_id \n    FROM SOLANA_DEV.silver.votes\n)\n\nAND tx_count > 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.test_silver.transactions"}, "operation.solana_models.solana_models-on-run-start-0": {"raw_sql": "{{ create_sps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-0", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-0"], "unique_id": "operation.solana_models.solana_models-on-run-start-0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-0.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.617936, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.solana_models.solana_models-on-run-start-1": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-1", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-1"], "unique_id": "operation.solana_models.solana_models-on-run-start-1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-1.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.6229382, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.solana_models.solana_models-on-run-start-2": {"raw_sql": "{{ sp_create_bulk_get_decoded_instructions_data() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.sp_create_bulk_get_decoded_instructions_data"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-2", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-2"], "unique_id": "operation.solana_models.solana_models-on-run-start-2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-2.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-2", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.64347, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "operation.solana_models.solana_models-on-run-start-3": {"raw_sql": "{{ sp_create_bulk_get_validator_metadata() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.sp_create_bulk_get_validator_metadata"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-3", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-3"], "unique_id": "operation.solana_models.solana_models-on-run-start-3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-3.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-3", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-3.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.6488798, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 3}, "operation.solana_models.solana_models-on-run-start-4": {"raw_sql": "{{ sp_create_bulk_get_stake_account_tx_ids() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.sp_create_bulk_get_stake_account_tx_ids"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-4", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-4"], "unique_id": "operation.solana_models.solana_models-on-run-start-4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-4.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-4", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-4.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.654926, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 4}, "operation.solana_models.solana_models-on-run-start-5": {"raw_sql": "{{ sp_create_bulk_get_txs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.sp_create_bulk_get_txs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-5", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-5"], "unique_id": "operation.solana_models.solana_models-on-run-start-5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-5.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-5", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-5.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.6599226, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 5}, "operation.solana_models.solana_models-on-run-start-6": {"raw_sql": "{{ sp_refresh_external_table_batch() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.sp_refresh_external_table_batch"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_models-on-run-start-6", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-6"], "unique_id": "operation.solana_models.solana_models-on-run-start-6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "hooks\\solana_models-on-run-start-6.sql", "original_file_path": ".\\dbt_project.yml", "name": "solana_models-on-run-start-6", "alias": "", "checksum": {"name": "sha256", "checksum": "bb5a57aa56bf5c37492fba5ab32aaaa679c0d0410c0775fd3eab580614cecbb1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\.\\dbt_project.yml\\hooks\\solana_models-on-run-start-6.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1662571475.664918, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 6}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP.8e9cefa953": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b5c1065a0c0536083a4bd0ad8e4d6683\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b5c1065a0c0536083a4bd0ad8e4d6683", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP.8e9cefa953", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b5c1065a0c0536083a4bd0ad8e4d6683.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP", "alias": "ez_staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_b5c1065a0c0536083a4bd0ad8e4d6683.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b5c1065a0c0536083a4bd0ad8e4d6683"}, "created_at": 1662571475.8601975, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID.89b6d6552d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_228a9c8e901ec37f56bd50eb49b11589\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_228a9c8e901ec37f56bd50eb49b11589", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID.89b6d6552d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_228a9c8e901ec37f56bd50eb49b11589.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID", "alias": "ez_staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_228a9c8e901ec37f56bd50eb49b11589.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_228a9c8e901ec37f56bd50eb49b11589"}, "created_at": 1662571475.8632042, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID.9d42019d95": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_46b8bf1103ea66eeb2035f8974aab18f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_46b8bf1103ea66eeb2035f8974aab18f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID.9d42019d95", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_46b8bf1103ea66eeb2035f8974aab18f.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID", "alias": "ez_staking_lp_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_46b8bf1103ea66eeb2035f8974aab18f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_46b8bf1103ea66eeb2035f8974aab18f"}, "created_at": 1662571475.8671532, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX.ba6651aba1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1c9cc5f2ccd87a22303169f993df3b08\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1c9cc5f2ccd87a22303169f993df3b08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX.ba6651aba1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_1c9cc5f2ccd87a22303169f993df3b08.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX", "alias": "ez_staking_lp_actions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_1c9cc5f2ccd87a22303169f993df3b08.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1c9cc5f2ccd87a22303169f993df3b08"}, "created_at": 1662571475.8711987, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INDEX' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_INDEX", "column_name": "INDEX", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED.7aef76b713": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fd3c3a633e0e2261ef855b8d58795638\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fd3c3a633e0e2261ef855b8d58795638", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED.7aef76b713", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fd3c3a633e0e2261ef855b8d58795638.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED", "alias": "ez_staking_lp_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_fd3c3a633e0e2261ef855b8d58795638.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fd3c3a633e0e2261ef855b8d58795638"}, "created_at": 1662571475.8741925, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE.b67e8cf6eb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6c67ac08784ae1cff97e6a2b9d6b6d7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b6c67ac08784ae1cff97e6a2b9d6b6d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE.b67e8cf6eb", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b6c67ac08784ae1cff97e6a2b9d6b6d7.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE", "alias": "ez_staking_lp_actions_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_b6c67ac08784ae1cff97e6a2b9d6b6d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b6c67ac08784ae1cff97e6a2b9d6b6d7"}, "created_at": 1662571475.877192, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_EVENT_TYPE", "column_name": "EVENT_TYPE", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS.5edbe73369": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_01c7587af2e204be50d78c7c8d57687d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNERS", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_01c7587af2e204be50d78c7c8d57687d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS.5edbe73369", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_01c7587af2e204be50d78c7c8d57687d.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS", "alias": "ez_staking_lp_actions_SIGNERS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_01c7587af2e204be50d78c7c8d57687d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_01c7587af2e204be50d78c7c8d57687d"}, "created_at": 1662571475.8811915, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SIGNERS' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_SIGNERS", "column_name": "SIGNERS", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY.243622350c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_93412b6589cc478ec8090414a3a91373\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "STAKE_AUTHORITY", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_93412b6589cc478ec8090414a3a91373", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY.243622350c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_93412b6589cc478ec8090414a3a91373.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY", "alias": "ez_staking_lp_actions_STAKE_AUTHORITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_93412b6589cc478ec8090414a3a91373.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_93412b6589cc478ec8090414a3a91373"}, "created_at": 1662571475.8853805, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('STAKE_AUTHORITY' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_STAKE_AUTHORITY", "column_name": "STAKE_AUTHORITY", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT.9d236e667f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_87119a4562761debc7a0bd1e3a82e48d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "STAKE_ACCOUNT", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_87119a4562761debc7a0bd1e3a82e48d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT.9d236e667f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_87119a4562761debc7a0bd1e3a82e48d.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT", "alias": "ez_staking_lp_actions_STAKE_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_87119a4562761debc7a0bd1e3a82e48d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_87119a4562761debc7a0bd1e3a82e48d"}, "created_at": 1662571475.8884041, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('STAKE_ACCOUNT' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_STAKE_ACCOUNT", "column_name": "STAKE_ACCOUNT", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE.be14980ebe": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_42106c63017adaa62562bc563b7848a7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_TX_STAKED_BALANCE", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_42106c63017adaa62562bc563b7848a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE.be14980ebe", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_42106c63017adaa62562bc563b7848a7.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE", "alias": "ez_staking_lp_actions_PRE_TX_STAKED_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_42106c63017adaa62562bc563b7848a7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_42106c63017adaa62562bc563b7848a7"}, "created_at": 1662571475.8913982, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRE_TX_STAKED_BALANCE' as \n    varchar\n) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_PRE_TX_STAKED_BALANCE", "column_name": "PRE_TX_STAKED_BALANCE", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE.8ec3223bae": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_265cbe75c6943b3043bd7eff3c73fc23\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_TX_STAKED_BALANCE", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_265cbe75c6943b3043bd7eff3c73fc23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE.8ec3223bae", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_265cbe75c6943b3043bd7eff3c73fc23.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE", "alias": "ez_staking_lp_actions_POST_TX_STAKED_BALANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_265cbe75c6943b3043bd7eff3c73fc23.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_265cbe75c6943b3043bd7eff3c73fc23"}, "created_at": 1662571475.8953853, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('POST_TX_STAKED_BALANCE' as \n    varchar\n) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_POST_TX_STAKED_BALANCE", "column_name": "POST_TX_STAKED_BALANCE", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT.ad8dfe8b7c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0a2c6507bcf29fb708153101ae4a01bf\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTE_ACCOUNT", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0a2c6507bcf29fb708153101ae4a01bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT.ad8dfe8b7c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_0a2c6507bcf29fb708153101ae4a01bf.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT", "alias": "ez_staking_lp_actions_VOTE_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_0a2c6507bcf29fb708153101ae4a01bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0a2c6507bcf29fb708153101ae4a01bf"}, "created_at": 1662571475.8987808, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTE_ACCOUNT' as \n    varchar\n) as column_name,\n            15 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_VOTE_ACCOUNT", "column_name": "VOTE_ACCOUNT", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY.44f420bb81": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca36192b5a9446472c1c610186bb1748\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NODE_PUBKEY", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca36192b5a9446472c1c610186bb1748", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY.44f420bb81", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_ca36192b5a9446472c1c610186bb1748.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY", "alias": "ez_staking_lp_actions_NODE_PUBKEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_ca36192b5a9446472c1c610186bb1748.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ca36192b5a9446472c1c610186bb1748"}, "created_at": 1662571475.9018328, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('NODE_PUBKEY' as \n    varchar\n) as column_name,\n            16 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_NODE_PUBKEY", "column_name": "NODE_PUBKEY", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK.43a29632b7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fdfd48aba6ff5c8e5b28b679a8283dd9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VALIDATOR_RANK", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fdfd48aba6ff5c8e5b28b679a8283dd9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK.43a29632b7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fdfd48aba6ff5c8e5b28b679a8283dd9.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK", "alias": "ez_staking_lp_actions_VALIDATOR_RANK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_fdfd48aba6ff5c8e5b28b679a8283dd9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fdfd48aba6ff5c8e5b28b679a8283dd9"}, "created_at": 1662571475.9058392, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VALIDATOR_RANK' as \n    varchar\n) as column_name,\n            17 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_VALIDATOR_RANK", "column_name": "VALIDATOR_RANK", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION.aabf523728": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f4564a2b0bde44318a73c616b728c993\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "COMMISSION", "model": "{{ get_where_subquery(ref('core__ez_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__ez_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f4564a2b0bde44318a73c616b728c993", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION.aabf523728", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_f4564a2b0bde44318a73c616b728c993.sql", "original_file_path": "models\\core\\core__ez_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION", "alias": "ez_staking_lp_actions_COMMISSION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__ez_staking_lp_actions.yml\\dbt_expectations_expect_column_f4564a2b0bde44318a73c616b728c993.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f4564a2b0bde44318a73c616b728c993"}, "created_at": 1662571475.9088395, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('COMMISSION' as \n    varchar\n) as column_name,\n            18 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.ez_staking_lp_actions_COMMISSION", "column_name": "COMMISSION", "file_key_name": "models.core__ez_staking_lp_actions"}, "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4499567, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4509568, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d"}, "created_at": 1662571476.4519563, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_NETWORK"], "unique_id": "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_NETWORK.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_NETWORK", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4679568, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_NETWORK", "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_CHAIN_ID"], "unique_id": "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_CHAIN_ID", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4689565, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4699574, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_HEIGHT"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_BLOCK_HEIGHT.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEIGHT", "alias": "blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_BLOCK_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4709568, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere BLOCK_HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HASH", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4719563, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_PREVIOUS_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_PREVIOUS_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_PREVIOUS_BLOCK_ID", "alias": "blocks_PREVIOUS_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_PREVIOUS_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4739566, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere PREVIOUS_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_PREVIOUS_BLOCK_ID", "column_name": "PREVIOUS_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_PREVIOUS_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_PREVIOUS_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_PREVIOUS_BLOCK_HASH", "alias": "blocks_PREVIOUS_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_PREVIOUS_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4755292, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere PREVIOUS_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_PREVIOUS_BLOCK_HASH", "column_name": "PREVIOUS_BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_INGESTED_AT", "alias": "blocks_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4775364, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks__INSERTED_TIMESTAMP", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4795358, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks.yml\\dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4815357, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from SOLANA_DEV.silver.blocks\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.blocks_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__decoded_instructions_data_TX_ID.0d023c1b85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__decoded_instructions_data_TX_ID"], "unique_id": "test.solana_models.not_null_silver__decoded_instructions_data_TX_ID.0d023c1b85", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__decoded_instructions_data_TX_ID.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "not_null_silver__decoded_instructions_data_TX_ID", "alias": "decoded_instructions_data_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\not_null_silver__decoded_instructions_data_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4935386, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.decoded_instructions_data\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.decoded_instructions_data_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.not_null_silver__decoded_instructions_data_EVENT_INDEX.d3bf02c7f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__decoded_instructions_data_EVENT_INDEX"], "unique_id": "test.solana_models.not_null_silver__decoded_instructions_data_EVENT_INDEX.d3bf02c7f1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__decoded_instructions_data_EVENT_INDEX.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "not_null_silver__decoded_instructions_data_EVENT_INDEX", "alias": "decoded_instructions_data_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\not_null_silver__decoded_instructions_data_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.495538, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.decoded_instructions_data\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.decoded_instructions_data_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.not_null_silver__decoded_instructions_data_PROGRAM_ID.64985194e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__decoded_instructions_data_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__decoded_instructions_data_PROGRAM_ID.64985194e2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__decoded_instructions_data_PROGRAM_ID.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "not_null_silver__decoded_instructions_data_PROGRAM_ID", "alias": "decoded_instructions_data_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\not_null_silver__decoded_instructions_data_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4965377, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.decoded_instructions_data\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.decoded_instructions_data_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.abc0ebff70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSTRUCTION_TYPE", "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE"], "unique_id": "test.solana_models.not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.abc0ebff70", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE", "alias": "decoded_instructions_data_INSTRUCTION_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.4985373, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.decoded_instructions_data\nwhere INSTRUCTION_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.decoded_instructions_data_INSTRUCTION_TYPE", "column_name": "INSTRUCTION_TYPE", "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.not_null_silver__decoded_instructions_data_DATA.904e098152": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA", "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__decoded_instructions_data_DATA"], "unique_id": "test.solana_models.not_null_silver__decoded_instructions_data_DATA.904e098152", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__decoded_instructions_data_DATA.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "not_null_silver__decoded_instructions_data_DATA", "alias": "decoded_instructions_data_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\not_null_silver__decoded_instructions_data_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5005383, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.decoded_instructions_data\nwhere DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.decoded_instructions_data_DATA", "column_name": "DATA", "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.625e5704ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.625e5704ff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP", "alias": "decoded_instructions_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5015378, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.decoded_instructions_data\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.decoded_instructions_data", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX.3c25f52606": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4e3e9193fb6d58624321978a911a6d9d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "EVENT_INDEX"], "model": "{{ get_where_subquery(ref('silver__decoded_instructions_data')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4e3e9193fb6d58624321978a911a6d9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX.3c25f52606", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_4e3e9193fb6d58624321978a911a6d9d.sql", "original_file_path": "models\\silver\\silver__decoded_instructions_data.yml", "name": "dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX", "alias": "decoded_instructions_data_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__decoded_instructions_data.yml\\dbt_utils_unique_combination_o_4e3e9193fb6d58624321978a911a6d9d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_4e3e9193fb6d58624321978a911a6d9d"}, "created_at": 1662571476.5035381, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, EVENT_INDEX\n    from SOLANA_DEV.silver.decoded_instructions_data\n    group by TX_ID, EVENT_INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.decoded_instructions_data_TX_ID", "column_name": null, "file_key_name": "models.silver__decoded_instructions_data"}, "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_BLOCK_TIMESTAMP", "alias": "events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5111804, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__events"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2", "alias": "events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773"}, "created_at": 1662571476.5131814, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.events\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_BLOCK_ID", "alias": "events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5191803, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_TX_ID"], "unique_id": "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_TX_ID.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_TX_ID", "alias": "events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5201812, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_SUCCEEDED.14f8e6ee9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__events_SUCCEEDED.14f8e6ee9d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_SUCCEEDED", "alias": "events_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.522414, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_INDEX.9a860b1d59": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_INDEX"], "unique_id": "test.solana_models.not_null_silver__events_INDEX.9a860b1d59", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_INDEX.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_INDEX", "alias": "events_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5234258, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_INDEX", "column_name": "INDEX", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_INSTRUCTION"], "unique_id": "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_INSTRUCTION.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_INSTRUCTION", "alias": "events_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_INSTRUCTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5254252, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere INSTRUCTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_INSTRUCTION", "column_name": "INSTRUCTION", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events_INGESTED_AT", "alias": "events_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5264256, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events__INSERTED_TIMESTAMP.7505ba4015": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__events__INSERTED_TIMESTAMP.7505ba4015", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__events__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "not_null_silver__events__INSERTED_TIMESTAMP", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\not_null_silver__events__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571476.5284252, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.events\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.events", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__events"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae.sql", "original_file_path": "models\\silver\\silver__events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX", "alias": "events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__events.yml\\dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae"}, "created_at": 1662571476.529425, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA_DEV.silver.events\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.events_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP", "alias": "staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.0889797, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2", "alias": "staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4"}, "created_at": 1662571477.0909798, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.staking_lp_actions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.staking_lp_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_BLOCK_ID", "alias": "staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.0959797, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_TX_ID"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_TX_ID.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_TX_ID", "alias": "staking_lp_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.0969796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_INDEX"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_INDEX.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_INDEX", "alias": "staking_lp_actions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.0990589, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_INDEX", "column_name": "INDEX", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_SUCCEEDED", "alias": "staking_lp_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.1024427, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_PROGRAM_ID.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_PROGRAM_ID", "alias": "staking_lp_actions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.1054428, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_EVENT_TYPE"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_EVENT_TYPE.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_EVENT_TYPE", "alias": "staking_lp_actions_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.1074429, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_EVENT_TYPE", "column_name": "EVENT_TYPE", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_INSTRUCTION"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions_INSTRUCTION.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_INSTRUCTION", "alias": "staking_lp_actions_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions_INSTRUCTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.108443, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere INSTRUCTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions_INSTRUCTION", "column_name": "INSTRUCTION", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.413356b53a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.413356b53a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP", "alias": "staking_lp_actions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.110444, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.staking_lp_actions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.staking_lp_actions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015.sql", "original_file_path": "models\\silver\\silver__staking_lp_actions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX", "alias": "staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__staking_lp_actions.yml\\dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015"}, "created_at": 1662571477.112444, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA_DEV.silver.staking_lp_actions\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.staking_lp_actions_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2650225, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec"}, "created_at": 1662571477.2671206, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_ID", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2729201, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_RECENT_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_RECENT_BLOCK_HASH", "alias": "transactions_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_RECENT_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2739217, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere RECENT_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_RECENT_BLOCK_HASH", "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_TX_ID"], "unique_id": "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_TX_ID.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_TX_ID", "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2759235, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transactions"}, "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466": {"raw_sql": "{{ test_null_threshold(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "null_threshold", "kwargs": {"threshold_percent": 0.99, "column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.solana_models.test_null_threshold", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "null_threshold_silver", "fqn": ["solana_models", "silver", "null_threshold_silver__transactions_FEE__0_99"], "unique_id": "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "null_threshold_silver__transactions_FEE__0_99.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "null_threshold_silver__transactions_FEE__0_99", "alias": "transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\null_threshold_silver__transactions_FEE__0_99.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.276924, "compiled_sql": "\n    -- threshold_percent: decimal representing percent of values that should NOT be null\n    WITH t AS (\n        SELECT\n            COUNT(*) * 0.99 AS threshold_num\n        FROM\n            SOLANA_DEV.silver.transactions\n    ),\n    C AS (\n        SELECT\n            COUNT(*) AS cnt\n        FROM\n            SOLANA_DEV.silver.transactions\n        WHERE\n            FEE IS NOT NULL\n    )\nSELECT\n    *\nFROM\n    C\nWHERE\n    C.cnt <= (\n        SELECT\n            MAX(threshold_num)\n        FROM\n            t\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.null_threshold_silver.transactions_FEE", "column_name": "FEE", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ingested_at::date >= current_date - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "ingested_at::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_FEE"], "unique_id": "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_FEE.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_FEE", "alias": "transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "ingested_at::date >= current_date - 2"}, "created_at": 1662571477.281842, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.transactions where ingested_at::date >= current_date - 2) dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_FEE", "column_name": "FEE", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_SUCCEEDED", "alias": "transactions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2829256, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_ACCOUNT_KEYS"], "unique_id": "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_ACCOUNT_KEYS.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_ACCOUNT_KEYS", "alias": "transactions_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_ACCOUNT_KEYS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2849207, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere ACCOUNT_KEYS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_ACCOUNT_KEYS", "column_name": "ACCOUNT_KEYS", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_INGESTED_AT", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2868357, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions__INSERTED_TIMESTAMP", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.287835, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions.yml\\dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61"}, "created_at": 1662571477.289835, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA_DEV.silver.transactions\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.transactions_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.2978354, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93"}, "created_at": 1662571477.2988358, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.transfers\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_ID", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.305107, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_TX_ID"], "unique_id": "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_TX_ID.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_TX_ID", "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3061066, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_INDEX.d7de164538": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_INDEX"], "unique_id": "test.solana_models.not_null_silver__transfers_INDEX.d7de164538", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_INDEX.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_INDEX", "alias": "transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3081064, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_INDEX", "column_name": "INDEX", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_TX_FROM"], "unique_id": "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_TX_FROM.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_TX_FROM", "alias": "transfers_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_TX_FROM.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3091066, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere TX_FROM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_TX_FROM", "column_name": "TX_FROM", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_TX_TO"], "unique_id": "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_TX_TO.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_TX_TO", "alias": "transfers_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.311106, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_TX_TO", "column_name": "TX_TO", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_AMOUNT.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_AMOUNT", "alias": "transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3121068, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_MINT"], "unique_id": "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_MINT.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_MINT", "alias": "transfers_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3141067, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_MINT", "column_name": "MINT", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_INGESTED_AT", "alias": "transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3151069, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transfers__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers__INSERTED_TIMESTAMP", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3177748, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transfers\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transfers", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transfers.yml\\dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2"}, "created_at": 1662571477.3197746, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA_DEV.silver.transfers\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.transfers_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_BLOCK_TIMESTAMP", "alias": "votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3277779, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2", "alias": "votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274"}, "created_at": 1662571477.329778, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.votes\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_BLOCK_ID", "alias": "votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3384793, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_RECENT_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_RECENT_BLOCK_HASH", "alias": "votes_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_RECENT_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3414667, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere RECENT_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_RECENT_BLOCK_HASH", "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_TX_ID.e428472813": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_TX_ID"], "unique_id": "test.solana_models.not_null_silver__votes_TX_ID.e428472813", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_TX_ID.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_TX_ID", "alias": "votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3434727, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__votes"}, "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5": {"raw_sql": "{{ test_null_threshold(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "null_threshold", "kwargs": {"threshold_percent": 0.99, "column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.solana_models.test_null_threshold", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "null_threshold_silver", "fqn": ["solana_models", "silver", "null_threshold_silver__votes_FEE__0_99"], "unique_id": "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "null_threshold_silver__votes_FEE__0_99.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "null_threshold_silver__votes_FEE__0_99", "alias": "votes_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\null_threshold_silver__votes_FEE__0_99.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3444743, "compiled_sql": "\n    -- threshold_percent: decimal representing percent of values that should NOT be null\n    WITH t AS (\n        SELECT\n            COUNT(*) * 0.99 AS threshold_num\n        FROM\n            SOLANA_DEV.silver.votes\n    ),\n    C AS (\n        SELECT\n            COUNT(*) AS cnt\n        FROM\n            SOLANA_DEV.silver.votes\n        WHERE\n            FEE IS NOT NULL\n    )\nSELECT\n    *\nFROM\n    C\nWHERE\n    C.cnt <= (\n        SELECT\n            MAX(threshold_num)\n        FROM\n            t\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.null_threshold_silver.votes_FEE", "column_name": "FEE", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ingested_at::date >= current_date - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "ingested_at::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_FEE"], "unique_id": "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_FEE.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_FEE", "alias": "votes_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "ingested_at::date >= current_date - 2"}, "created_at": 1662571477.348003, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.votes where ingested_at::date >= current_date - 2) dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_FEE", "column_name": "FEE", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_SUCCEEDED", "alias": "votes_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.350071, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_VOTE_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_VOTE_ACCOUNT.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_VOTE_ACCOUNT", "alias": "votes_VOTE_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_VOTE_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3521461, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere VOTE_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_VOTE_ACCOUNT", "column_name": "VOTE_ACCOUNT", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_INGESTED_AT", "alias": "votes_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3551583, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes__INSERTED_TIMESTAMP.741e592bd1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__votes__INSERTED_TIMESTAMP.741e592bd1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes__INSERTED_TIMESTAMP", "alias": "votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\not_null_silver__votes__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.356159, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__votes"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp::date >= current_date - 2\",alias=\"dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "block_timestamp::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID", "alias": "votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes.yml\\dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "block_timestamp::date >= current_date - 2", "alias": "dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93"}, "created_at": 1662571477.3581583, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from (select * from SOLANA_DEV.silver.votes where block_timestamp::date >= current_date - 2) dbt_subquery\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.votes_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_agg_block_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__votes_agg_block.yml", "name": "not_null_silver__votes_agg_block_BLOCK_TIMESTAMP", "alias": "votes_agg_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes_agg_block.yml\\not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3643878, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes_agg_block\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_agg_block_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c.sql", "original_file_path": "models\\silver\\silver__votes_agg_block.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2", "alias": "votes_agg_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes_agg_block.yml\\dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c"}, "created_at": 1662571477.3663855, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.votes_agg_block\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.votes_agg_block_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_agg_block_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_agg_block_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__votes_agg_block.yml", "name": "not_null_silver__votes_agg_block_BLOCK_ID", "alias": "votes_agg_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes_agg_block.yml\\not_null_silver__votes_agg_block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3704712, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes_agg_block\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_agg_block_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUM_VOTES", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_agg_block_NUM_VOTES"], "unique_id": "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_agg_block_NUM_VOTES.sql", "original_file_path": "models\\silver\\silver__votes_agg_block.yml", "name": "not_null_silver__votes_agg_block_NUM_VOTES", "alias": "votes_agg_block_NUM_VOTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes_agg_block.yml\\not_null_silver__votes_agg_block_NUM_VOTES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3724732, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.votes_agg_block\nwhere NUM_VOTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.votes_agg_block_NUM_VOTES", "column_name": "NUM_VOTES", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp::date >= current_date - 2\",alias=\"dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "block_timestamp::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a.sql", "original_file_path": "models\\silver\\silver__votes_agg_block.yml", "name": "dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID", "alias": "votes_agg_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__votes_agg_block.yml\\dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "block_timestamp::date >= current_date - 2", "alias": "dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a"}, "created_at": 1662571477.3744826, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from (select * from SOLANA_DEV.silver.votes_agg_block where block_timestamp::date >= current_date - 2) dbt_subquery\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.votes_agg_block_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.not_null_silver___historical_staking_lp_actions_BLOCK_ID.fbefcaf8d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___historical_staking_lp_actions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___historical_staking_lp_actions_BLOCK_ID.fbefcaf8d2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___historical_staking_lp_actions_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "not_null_silver___historical_staking_lp_actions_BLOCK_ID", "alias": "_historical_staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\not_null_silver___historical_staking_lp_actions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3834758, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._historical_staking_lp_actions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._historical_staking_lp_actions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.not_null_silver___historical_staking_lp_actions_TX_ID.5a59286ba2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___historical_staking_lp_actions_TX_ID"], "unique_id": "test.solana_models.not_null_silver___historical_staking_lp_actions_TX_ID.5a59286ba2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___historical_staking_lp_actions_TX_ID.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "not_null_silver___historical_staking_lp_actions_TX_ID", "alias": "_historical_staking_lp_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\not_null_silver___historical_staking_lp_actions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3844707, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._historical_staking_lp_actions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._historical_staking_lp_actions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.not_null_silver___historical_staking_lp_actions_INDEX.9f9d298a76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___historical_staking_lp_actions_INDEX"], "unique_id": "test.solana_models.not_null_silver___historical_staking_lp_actions_INDEX.9f9d298a76", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___historical_staking_lp_actions_INDEX.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "not_null_silver___historical_staking_lp_actions_INDEX", "alias": "_historical_staking_lp_actions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\not_null_silver___historical_staking_lp_actions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3864896, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._historical_staking_lp_actions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._historical_staking_lp_actions_INDEX", "column_name": "INDEX", "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.not_null_silver___historical_staking_lp_actions_SUCCEEDED.f3d5339ed0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___historical_staking_lp_actions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver___historical_staking_lp_actions_SUCCEEDED.f3d5339ed0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___historical_staking_lp_actions_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "not_null_silver___historical_staking_lp_actions_SUCCEEDED", "alias": "_historical_staking_lp_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\not_null_silver___historical_staking_lp_actions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3874872, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._historical_staking_lp_actions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._historical_staking_lp_actions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.not_null_silver___historical_staking_lp_actions_PROGRAM_ID.ffcc8836da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___historical_staking_lp_actions_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver___historical_staking_lp_actions_PROGRAM_ID.ffcc8836da", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___historical_staking_lp_actions_PROGRAM_ID.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "not_null_silver___historical_staking_lp_actions_PROGRAM_ID", "alias": "_historical_staking_lp_actions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\not_null_silver___historical_staking_lp_actions_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.389477, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._historical_staking_lp_actions\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._historical_staking_lp_actions_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.not_null_silver___historical_staking_lp_actions_INSTRUCTION.e152e4f7bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___historical_staking_lp_actions_INSTRUCTION"], "unique_id": "test.solana_models.not_null_silver___historical_staking_lp_actions_INSTRUCTION.e152e4f7bc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___historical_staking_lp_actions_INSTRUCTION.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "not_null_silver___historical_staking_lp_actions_INSTRUCTION", "alias": "_historical_staking_lp_actions_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\not_null_silver___historical_staking_lp_actions_INSTRUCTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.3904855, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._historical_staking_lp_actions\nwhere INSTRUCTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._historical_staking_lp_actions_INSTRUCTION", "column_name": "INSTRUCTION", "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX.4df18388e4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_baa4f712b3e2e23b4d199d31f8f95199\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver___historical_staking_lp_actions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___historical_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_baa4f712b3e2e23b4d199d31f8f95199", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX.4df18388e4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_baa4f712b3e2e23b4d199d31f8f95199.sql", "original_file_path": "models\\silver\\silver___historical_staking_lp_actions.yml", "name": "dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX", "alias": "_historical_staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___historical_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___historical_staking_lp_actions.yml\\dbt_utils_unique_combination_o_baa4f712b3e2e23b4d199d31f8f95199.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_baa4f712b3e2e23b4d199d31f8f95199"}, "created_at": 1662571477.3924744, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA_DEV.silver._historical_staking_lp_actions\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver._historical_staking_lp_actions_BLOCK_ID", "column_name": null, "file_key_name": "models.silver___historical_staking_lp_actions"}, "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_BLOCK_TIMESTAMP", "alias": "_inner_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4004638, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1", "alias": "_inner_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2"}, "created_at": 1662571477.401479, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver._inner_instructions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver._inner_instructions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_BLOCK_ID", "alias": "_inner_instructions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4064908, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_TX_ID"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_TX_ID.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_TX_ID", "alias": "_inner_instructions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4566553, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_INDEX"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_INDEX.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_INDEX", "alias": "_inner_instructions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4593062, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_INDEX", "column_name": "INDEX", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAPPED_INSTRUCTION_INDEX", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX", "alias": "_inner_instructions_MAPPED_INSTRUCTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4614198, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere MAPPED_INSTRUCTION_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_MAPPED_INSTRUCTION_INDEX", "column_name": "MAPPED_INSTRUCTION_INDEX", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALUE", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_VALUE"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_VALUE.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_VALUE", "alias": "_inner_instructions_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4639726, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_VALUE", "column_name": "VALUE", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_INGESTED_AT", "alias": "_inner_instructions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4659703, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions__INSERTED_TIMESTAMP.cfe9e2c6cf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___inner_instructions__INSERTED_TIMESTAMP.cfe9e2c6cf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___inner_instructions__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions__INSERTED_TIMESTAMP", "alias": "_inner_instructions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___inner_instructions.yml\\not_null_silver___inner_instructions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4679642, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._inner_instructions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._inner_instructions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_BLOCK_TIMESTAMP", "alias": "_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.474974, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___instructions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1", "alias": "_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42"}, "created_at": 1662571477.4769642, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver._instructions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver._instructions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_BLOCK_ID", "alias": "_instructions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4849505, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_TX_ID"], "unique_id": "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_TX_ID.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_TX_ID", "alias": "_instructions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4869628, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_SUCCEEDED.a2f8a7a3ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver___instructions_SUCCEEDED.a2f8a7a3ae", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_SUCCEEDED", "alias": "_instructions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4889417, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_INDEX"], "unique_id": "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_INDEX.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_INDEX", "alias": "_instructions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4910374, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_INDEX", "column_name": "INDEX", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALUE", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_VALUE"], "unique_id": "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_VALUE.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_VALUE", "alias": "_instructions_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4930153, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_VALUE", "column_name": "VALUE", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions_INGESTED_AT", "alias": "_instructions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.495101, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions__INSERTED_TIMESTAMP.c55b5e3da3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___instructions__INSERTED_TIMESTAMP.c55b5e3da3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___instructions__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___instructions.yml", "name": "not_null_silver___instructions__INSERTED_TIMESTAMP", "alias": "_instructions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___instructions.yml\\not_null_silver___instructions__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.4960933, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._instructions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._instructions", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_BLOCK_TIMESTAMP", "alias": "_post_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5030613, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2", "alias": "_post_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734"}, "created_at": 1662571477.5055816, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver._post_token_balances\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver._post_token_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_BLOCK_ID", "alias": "_post_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.511847, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_TX_ID"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_TX_ID.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_TX_ID", "alias": "_post_token_balances_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5141227, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_INDEX"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_INDEX.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_INDEX", "alias": "_post_token_balances_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5151227, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_INDEX", "column_name": "INDEX", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_INDEX", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_ACCOUNT_INDEX"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_ACCOUNT_INDEX.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_ACCOUNT_INDEX", "alias": "_post_token_balances_ACCOUNT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_ACCOUNT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.517123, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere ACCOUNT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_ACCOUNT_INDEX", "column_name": "ACCOUNT_INDEX", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_MINT"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_MINT.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_MINT", "alias": "_post_token_balances_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.518998, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_MINT", "column_name": "MINT", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_id > 111442741\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OWNER", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "block_id > 111442741", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_OWNER"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_OWNER.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_OWNER", "alias": "_post_token_balances_OWNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_OWNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "block_id > 111442741"}, "created_at": 1662571477.520644, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver._post_token_balances where block_id > 111442741) dbt_subquery\nwhere OWNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_OWNER", "column_name": "OWNER", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_DECIMAL"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_DECIMAL.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_DECIMAL", "alias": "_post_token_balances_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_DECIMAL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.522209, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere DECIMAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_DECIMAL", "column_name": "DECIMAL", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNT", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_UIAMOUNT"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_UIAMOUNT.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_UIAMOUNT", "alias": "_post_token_balances_UIAMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_UIAMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5242312, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere UIAMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_UIAMOUNT", "column_name": "UIAMOUNT", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNTSTRING", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_UIAMOUNTSTRING"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_UIAMOUNTSTRING.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_UIAMOUNTSTRING", "alias": "_post_token_balances_UIAMOUNTSTRING", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_UIAMOUNTSTRING.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5252273, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere UIAMOUNTSTRING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_UIAMOUNTSTRING", "column_name": "UIAMOUNTSTRING", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_INGESTED_AT", "alias": "_post_token_balances_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5272303, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances__INSERTED_TIMESTAMP.743b56887f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___post_token_balances__INSERTED_TIMESTAMP.743b56887f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___post_token_balances__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances__INSERTED_TIMESTAMP", "alias": "_post_token_balances", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\not_null_silver___post_token_balances__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5282311, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._post_token_balances\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._post_token_balances", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8.sql", "original_file_path": "models\\silver\\silver___post_token_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX", "alias": "_post_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___post_token_balances.yml\\dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8"}, "created_at": 1662571477.5302303, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA_DEV.silver._post_token_balances\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver._post_token_balances_BLOCK_ID", "column_name": null, "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_BLOCK_TIMESTAMP", "alias": "_pre_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5417376, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2", "alias": "_pre_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3"}, "created_at": 1662571477.5427392, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver._pre_token_balances\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver._pre_token_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_BLOCK_ID", "alias": "_pre_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.550434, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_TX_ID"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_TX_ID.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_TX_ID", "alias": "_pre_token_balances_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.553459, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_INDEX"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_INDEX.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_INDEX", "alias": "_pre_token_balances_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5561042, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_INDEX", "column_name": "INDEX", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_INDEX", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_ACCOUNT_INDEX"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_ACCOUNT_INDEX.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_ACCOUNT_INDEX", "alias": "_pre_token_balances_ACCOUNT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_ACCOUNT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5572615, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere ACCOUNT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_ACCOUNT_INDEX", "column_name": "ACCOUNT_INDEX", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_MINT"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_MINT.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_MINT", "alias": "_pre_token_balances_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.559263, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_MINT", "column_name": "MINT", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_id > 111442741\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OWNER", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "block_id > 111442741", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_OWNER"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_OWNER.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_OWNER", "alias": "_pre_token_balances_OWNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_OWNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "block_id > 111442741"}, "created_at": 1662571477.5622702, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver._pre_token_balances where block_id > 111442741) dbt_subquery\nwhere OWNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_OWNER", "column_name": "OWNER", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_DECIMAL"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_DECIMAL.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_DECIMAL", "alias": "_pre_token_balances_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_DECIMAL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5642653, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere DECIMAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_DECIMAL", "column_name": "DECIMAL", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNT", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_UIAMOUNT"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_UIAMOUNT.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_UIAMOUNT", "alias": "_pre_token_balances_UIAMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_UIAMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.567048, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere UIAMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_UIAMOUNT", "column_name": "UIAMOUNT", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNTSTRING", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_UIAMOUNTSTRING"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_UIAMOUNTSTRING.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_UIAMOUNTSTRING", "alias": "_pre_token_balances_UIAMOUNTSTRING", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_UIAMOUNTSTRING.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.569033, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere UIAMOUNTSTRING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_UIAMOUNTSTRING", "column_name": "UIAMOUNTSTRING", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances_INGESTED_AT.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_INGESTED_AT", "alias": "_pre_token_balances_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.57146, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.18c805b0ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.18c805b0ff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances__INSERTED_TIMESTAMP", "alias": "_pre_token_balances", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5739827, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._pre_token_balances\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._pre_token_balances", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09.sql", "original_file_path": "models\\silver\\silver___pre_token_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX", "alias": "_pre_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___pre_token_balances.yml\\dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09"}, "created_at": 1662571477.576561, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA_DEV.silver._pre_token_balances\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver._pre_token_balances_BLOCK_ID", "column_name": null, "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "RECORDED_AT", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1.sql", "original_file_path": "models\\silver\\silver___prices.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2", "alias": "_prices_RECORDED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___prices.yml\\dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1"}, "created_at": 1662571477.58666, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(RECORDED_AT as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver._prices\n    where\n        -- to exclude erroneous future dates\n        cast(RECORDED_AT as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver._prices_RECORDED_AT", "column_name": "RECORDED_AT", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_SYMBOL"], "unique_id": "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___prices_SYMBOL.sql", "original_file_path": "models\\silver\\silver___prices.yml", "name": "not_null_silver___prices_SYMBOL", "alias": "_prices_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___prices.yml\\not_null_silver___prices_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5942962, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._prices\nwhere SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._prices_SYMBOL", "column_name": "SYMBOL", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver___prices_PRICE.538411960a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_PRICE"], "unique_id": "test.solana_models.not_null_silver___prices_PRICE.538411960a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___prices_PRICE.sql", "original_file_path": "models\\silver\\silver___prices.yml", "name": "not_null_silver___prices_PRICE", "alias": "_prices_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___prices.yml\\not_null_silver___prices_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.5967505, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._prices\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._prices_PRICE", "column_name": "PRICE", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_PROVIDER"], "unique_id": "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___prices_PROVIDER.sql", "original_file_path": "models\\silver\\silver___prices.yml", "name": "not_null_silver___prices_PROVIDER", "alias": "_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver___prices.yml\\not_null_silver___prices_PROVIDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.605719, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver._prices\nwhere PROVIDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver._prices_PROVIDER", "column_name": "PROVIDER", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_streamline__complete_blocks_BLOCK_ID.b5cf662eab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('streamline__complete_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_streamline", "fqn": ["solana_models", "streamline", "not_null_streamline__complete_blocks_BLOCK_ID"], "unique_id": "test.solana_models.not_null_streamline__complete_blocks_BLOCK_ID.b5cf662eab", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_streamline__complete_blocks_BLOCK_ID.sql", "original_file_path": "models\\streamline\\streamline__complete_blocks.yml", "name": "not_null_streamline__complete_blocks_BLOCK_ID", "alias": "complete_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_blocks.yml\\not_null_streamline__complete_blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.6115496, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.streamline.complete_blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_streamline.complete_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.streamline__complete_blocks"}, "test.solana_models.not_null_streamline__complete_blocks__INSERTED_DATE.425fede01f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_DATE", "model": "{{ get_where_subquery(ref('streamline__complete_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_streamline", "fqn": ["solana_models", "streamline", "not_null_streamline__complete_blocks__INSERTED_DATE"], "unique_id": "test.solana_models.not_null_streamline__complete_blocks__INSERTED_DATE.425fede01f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_streamline__complete_blocks__INSERTED_DATE.sql", "original_file_path": "models\\streamline\\streamline__complete_blocks.yml", "name": "not_null_streamline__complete_blocks__INSERTED_DATE", "alias": "complete_blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_blocks.yml\\not_null_streamline__complete_blocks__INSERTED_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.6141305, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.streamline.complete_blocks\nwhere _INSERTED_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_streamline.complete_blocks", "column_name": "_INSERTED_DATE", "file_key_name": "models.streamline__complete_blocks"}, "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID.1ba4c0ccdc": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1c27b52deac7a3d3cbff932fac6b0bd9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('streamline__complete_blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1c27b52deac7a3d3cbff932fac6b0bd9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_streamline", "fqn": ["solana_models", "streamline", "dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID.1ba4c0ccdc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_1c27b52deac7a3d3cbff932fac6b0bd9.sql", "original_file_path": "models\\streamline\\streamline__complete_blocks.yml", "name": "dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID", "alias": "complete_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_blocks.yml\\dbt_utils_unique_combination_o_1c27b52deac7a3d3cbff932fac6b0bd9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_1c27b52deac7a3d3cbff932fac6b0bd9"}, "created_at": 1662571477.6157124, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from SOLANA_DEV.streamline.complete_blocks\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_streamline.complete_blocks_BLOCK_ID", "column_name": null, "file_key_name": "models.streamline__complete_blocks"}, "test.solana_models.not_null_streamline__complete_block_rewards_BLOCK_ID.7ed53b986d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('streamline__complete_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_streamline", "fqn": ["solana_models", "streamline", "not_null_streamline__complete_block_rewards_BLOCK_ID"], "unique_id": "test.solana_models.not_null_streamline__complete_block_rewards_BLOCK_ID.7ed53b986d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_streamline__complete_block_rewards_BLOCK_ID.sql", "original_file_path": "models\\streamline\\streamline__complete_block_rewards.yml", "name": "not_null_streamline__complete_block_rewards_BLOCK_ID", "alias": "complete_block_rewards_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_rewards.yml\\not_null_streamline__complete_block_rewards_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.6250741, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.streamline.complete_block_rewards\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_streamline.complete_block_rewards_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.streamline__complete_block_rewards"}, "test.solana_models.not_null_streamline__complete_block_rewards__PARTITION_ID.7e887fbe6e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_PARTITION_ID", "model": "{{ get_where_subquery(ref('streamline__complete_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_streamline", "fqn": ["solana_models", "streamline", "not_null_streamline__complete_block_rewards__PARTITION_ID"], "unique_id": "test.solana_models.not_null_streamline__complete_block_rewards__PARTITION_ID.7e887fbe6e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_streamline__complete_block_rewards__PARTITION_ID.sql", "original_file_path": "models\\streamline\\streamline__complete_block_rewards.yml", "name": "not_null_streamline__complete_block_rewards__PARTITION_ID", "alias": "complete_block_rewards", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_rewards.yml\\not_null_streamline__complete_block_rewards__PARTITION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.6279488, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.streamline.complete_block_rewards\nwhere _PARTITION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_streamline.complete_block_rewards", "column_name": "_PARTITION_ID", "file_key_name": "models.streamline__complete_block_rewards"}, "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID.2d196b4953": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_87003575ee59a08561bf51f1f1e700d7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('streamline__complete_block_rewards')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_87003575ee59a08561bf51f1f1e700d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_streamline", "fqn": ["solana_models", "streamline", "dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID.2d196b4953", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_87003575ee59a08561bf51f1f1e700d7.sql", "original_file_path": "models\\streamline\\streamline__complete_block_rewards.yml", "name": "dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID", "alias": "complete_block_rewards_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_rewards.yml\\dbt_utils_unique_combination_o_87003575ee59a08561bf51f1f1e700d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_87003575ee59a08561bf51f1f1e700d7"}, "created_at": 1662571477.6320271, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from SOLANA_DEV.streamline.complete_block_rewards\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_streamline.complete_block_rewards_BLOCK_ID", "column_name": null, "file_key_name": "models.streamline__complete_block_rewards"}, "test.solana_models.not_null_streamline__complete_block_txs_BLOCK_ID.b2ca3dc9e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('streamline__complete_block_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_block_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_streamline", "fqn": ["solana_models", "streamline", "not_null_streamline__complete_block_txs_BLOCK_ID"], "unique_id": "test.solana_models.not_null_streamline__complete_block_txs_BLOCK_ID.b2ca3dc9e6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_streamline__complete_block_txs_BLOCK_ID.sql", "original_file_path": "models\\streamline\\streamline__complete_block_txs.yml", "name": "not_null_streamline__complete_block_txs_BLOCK_ID", "alias": "complete_block_txs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_block_txs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_txs.yml\\not_null_streamline__complete_block_txs_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.6394045, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.streamline.complete_block_txs\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_streamline.complete_block_txs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.streamline__complete_block_txs"}, "test.solana_models.not_null_streamline__complete_block_txs__PARTITION_ID.a35fe6b303": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_PARTITION_ID", "model": "{{ get_where_subquery(ref('streamline__complete_block_txs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_block_txs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_streamline", "fqn": ["solana_models", "streamline", "not_null_streamline__complete_block_txs__PARTITION_ID"], "unique_id": "test.solana_models.not_null_streamline__complete_block_txs__PARTITION_ID.a35fe6b303", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_streamline__complete_block_txs__PARTITION_ID.sql", "original_file_path": "models\\streamline\\streamline__complete_block_txs.yml", "name": "not_null_streamline__complete_block_txs__PARTITION_ID", "alias": "complete_block_txs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_block_txs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_txs.yml\\not_null_streamline__complete_block_txs__PARTITION_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662571477.641434, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.streamline.complete_block_txs\nwhere _PARTITION_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_streamline.complete_block_txs", "column_name": "_PARTITION_ID", "file_key_name": "models.streamline__complete_block_txs"}, "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID.3802e1f2d9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_931090f2a784c60af56b5fe5b31aee60\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('streamline__complete_block_txs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.streamline__complete_block_txs"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_931090f2a784c60af56b5fe5b31aee60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_streamline", "fqn": ["solana_models", "streamline", "dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID.3802e1f2d9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_931090f2a784c60af56b5fe5b31aee60.sql", "original_file_path": "models\\streamline\\streamline__complete_block_txs.yml", "name": "dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID", "alias": "complete_block_txs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["streamline__complete_block_txs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\streamline\\streamline__complete_block_txs.yml\\dbt_utils_unique_combination_o_931090f2a784c60af56b5fe5b31aee60.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_931090f2a784c60af56b5fe5b31aee60"}, "created_at": 1662571477.6447673, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from SOLANA_DEV.streamline.complete_block_txs\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_streamline.complete_block_txs_BLOCK_ID", "column_name": null, "file_key_name": "models.streamline__complete_block_txs"}, "model.solana_models.silver__nft_mints": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, mint, mint_currency)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH b AS (\r\n\r\n    SELECT\r\n        tx_id\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n    WHERE\r\n        event_type IN (\r\n            'mintTo',\r\n            'initializeMint'\r\n        )\r\n        AND succeeded\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nEXCEPT\r\nSELECT\r\n    tx_id\r\nFROM\r\n    {{ ref('silver__nft_mints_tmp') }}\r\n    m\r\n\r\n{% if is_incremental() %}\r\nWHERE m._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    mint_currency,\r\n    mint,\r\n    mint_price,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('silver__nft_mints_tmp') }}\r\n    e\r\n{% if is_incremental() %}\r\nWHERE e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    e.succeeded,\r\n    e.program_id,\r\n    COALESCE(\r\n        instruction :parsed :info :mintAuthority :: STRING,\r\n        instruction :parsed :info :multisigMintAuthority :: STRING\r\n    ) AS purchaser,\r\n    NULL AS mint_currency,\r\n    instruction :parsed :info :mint :: STRING AS mint,\r\n    NULL AS mint_price,\r\n    e.ingested_at,\r\n    e._inserted_timestamp\r\nFROM\r\n    {{ ref('silver__events') }}\r\n    e\r\n    INNER JOIN b\r\n    ON b.tx_id = e.tx_id\r\nWHERE\r\n    event_type IN (\r\n        'mintTo',\r\n        'initializeMint'\r\n    )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, mint, mint_currency)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_mints"], "unique_id": "model.solana_models.silver__nft_mints", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_mints.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.sql", "name": "silver__nft_mints", "alias": "nft_mints", "checksum": {"name": "sha256", "checksum": "532a330d260d0574e7dded723b578fe8f4d46955f1a6776d814ecb0a4d74e9cd"}, "tags": [], "refs": [["silver__events"], ["silver__nft_mints_tmp"], ["silver__nft_mints_tmp"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_CURRENCY": {"name": "MINT_CURRENCY", "description": "Currency used to pay for the NFT mint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "Price that it cost to mint the NFT in SOL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_mints.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint, mint_currency)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575623.125312, "compiled_sql": "\n\nWITH b AS (\n\n    SELECT\n        tx_id\n    FROM\n        SOLANA_DEV.silver.events\n        e\n    WHERE\n        event_type IN (\n            'mintTo',\n            'initializeMint'\n        )\n        AND succeeded\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints\n)\n\nEXCEPT\nSELECT\n    tx_id\nFROM\n    SOLANA_DEV.silver.nft_mints_tmp\n    m\n\n\nWHERE m._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints\n)\n\n)\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint_currency,\n    mint,\n    mint_price,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.nft_mints_tmp\n    e\n\nWHERE e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints\n)\n\nUNION\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    e.succeeded,\n    e.program_id,\n    COALESCE(\n        instruction :parsed :info :mintAuthority :: STRING,\n        instruction :parsed :info :multisigMintAuthority :: STRING\n    ) AS purchaser,\n    NULL AS mint_currency,\n    instruction :parsed :info :mint :: STRING AS mint,\n    NULL AS mint_price,\n    e.ingested_at,\n    e._inserted_timestamp\nFROM\n    SOLANA_DEV.silver.events\n    e\n    INNER JOIN b\n    ON b.tx_id = e.tx_id\nWHERE\n    event_type IN (\n        'mintTo',\n        'initializeMint'\n    )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints\n)\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_mints"}, "model.solana_models.silver__gauges_votes_saber": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, voter, gauge)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH all_saber_gauges_events AS (\r\n\r\n    SELECT\r\n        block_timestamp,\r\n        block_id,\r\n        tx_id,\r\n        INDEX,\r\n        instruction,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'GaugesLJrnVjNNWLReiw3Q7xQhycSBRgeHGTMDUaX231'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND block_timestamp :: DATE >= '2022-01-14' -- no saber votes before this date\r\n{% endif %}\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        t.tx_id,\r\n        t.succeeded,\r\n        l.value :: STRING AS message,\r\n        CASE\r\n            WHEN l.value LIKE 'Program log: Instruction:%' THEN 'instruction_name'\r\n            ELSE 'vote'\r\n        END AS log_type,\r\n        conditional_true_event(\r\n            l.value LIKE 'Program log: Instruction:%'\r\n        ) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index\r\n        ) - 1 AS event_index\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT tx_id\r\n            FROM\r\n                all_saber_gauges_events\r\n        ) g\r\n        ON t.tx_id = g.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n    WHERE\r\n        (\r\n            l.value :: STRING LIKE 'Program log: Instruction:%'\r\n            OR l.value :: STRING LIKE 'Program log: power:%'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND t.block_timestamp :: DATE >= '2022-01-14' -- no saber votes before this date\r\n{% endif %}\r\n)\r\nSELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    l.succeeded,\r\n    e.instruction :accounts [7] :: STRING AS voter,\r\n    e.instruction :accounts [1] :: STRING AS gauge,\r\n    REPLACE(\r\n        REGEXP_SUBSTR(\r\n            l.message,\r\n            'Program log: power: \\\\d+'\r\n        ),\r\n        'Program log: power: '\r\n    ) :: NUMBER AS power,\r\n    REPLACE(\r\n        REGEXP_SUBSTR(\r\n            l.message,\r\n            'shares: \\\\d+'\r\n        ),\r\n        'shares: '\r\n    ) :: NUMBER AS delegated_shares,\r\n    e._inserted_timestamp\r\nFROM\r\n    all_saber_gauges_events e\r\n    LEFT OUTER JOIN tx_logs l\r\n    ON l.tx_id = e.tx_id\r\n    AND e.index = l.event_index\r\nWHERE\r\n    l.log_type = 'vote'\r\n    AND e.instruction :accounts [0] :: STRING = '28ZDtf6d2wsYhBvabTxUHTRT6MDxqjmqR7RMCp348tyU' -- this is saber gaugemeister", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, voter, gauge)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "gauges", "silver__gauges_votes_saber"], "unique_id": "model.solana_models.silver__gauges_votes_saber", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\gauges\\silver__gauges_votes_saber.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.sql", "name": "silver__gauges_votes_saber", "alias": "gauges_votes_saber", "checksum": {"name": "sha256", "checksum": "848561707a4796cf0c5089cda2912521ab3cd37799dd34392b98d5a87db372f9"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address performing the vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Address that determines the rewards share to give to a liquidity pool, or in the case of Marinade, the amount of SOL that should be delegated to a given validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATED_SHARES": {"name": "DELEGATED_SHARES", "description": "Number of shares delegated to vote for this gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POWER": {"name": "POWER", "description": "Total voting power of the voter.  This is only available for certain types of gauge votes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\gauges\\silver__gauges_votes_saber.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, voter, gauge)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575623.161743, "compiled_sql": "\n\nWITH all_saber_gauges_events AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        INDEX,\n        instruction,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'GaugesLJrnVjNNWLReiw3Q7xQhycSBRgeHGTMDUaX231'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gauges_votes_saber\n)\n\n),\ntx_logs AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.value :: STRING AS message,\n        CASE\n            WHEN l.value LIKE 'Program log: Instruction:%' THEN 'instruction_name'\n            ELSE 'vote'\n        END AS log_type,\n        conditional_true_event(\n            l.value LIKE 'Program log: Instruction:%'\n        ) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index\n        ) - 1 AS event_index\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                all_saber_gauges_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        (\n            l.value :: STRING LIKE 'Program log: Instruction:%'\n            OR l.value :: STRING LIKE 'Program log: power:%'\n        )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gauges_votes_saber\n)\n\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    e.instruction :accounts [7] :: STRING AS voter,\n    e.instruction :accounts [1] :: STRING AS gauge,\n    REPLACE(\n        REGEXP_SUBSTR(\n            l.message,\n            'Program log: power: \\\\d+'\n        ),\n        'Program log: power: '\n    ) :: NUMBER AS power,\n    REPLACE(\n        REGEXP_SUBSTR(\n            l.message,\n            'shares: \\\\d+'\n        ),\n        'shares: '\n    ) :: NUMBER AS delegated_shares,\n    e._inserted_timestamp\nFROM\n    all_saber_gauges_events e\n    LEFT OUTER JOIN tx_logs l\n    ON l.tx_id = e.tx_id\n    AND e.index = l.event_index\nWHERE\n    l.log_type = 'vote'\n    AND e.instruction :accounts [0] :: STRING = '28ZDtf6d2wsYhBvabTxUHTRT6MDxqjmqR7RMCp348tyU' -- this is saber gaugemeister", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.gauges_votes_saber"}, "model.solana_models.silver__transactions2": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE','block_id','_inserted_timestamp::DATE'],\r\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\",\r\n) }}\r\n\r\nWITH pre_final AS (\r\n    SELECT\r\n        b.block_timestamp,\r\n        t.block_id,\r\n        t.tx_id,\r\n        t.data :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\r\n        t.data :meta :fee :: NUMBER AS fee,\r\n        CASE\r\n            WHEN IS_NULL_VALUE(\r\n                t.data :meta :err\r\n            ) THEN TRUE\r\n            ELSE FALSE\r\n        END AS succeeded,\r\n        t.data :transaction :message :accountKeys :: ARRAY AS account_keys,\r\n        t.data :meta :preBalances :: ARRAY AS pre_balances,\r\n        t.data :meta :postBalances :: ARRAY AS post_balances,\r\n        t.data :meta :preTokenBalances :: ARRAY AS pre_token_balances,\r\n        t.data :meta :postTokenBalances :: ARRAY AS post_token_balances,\r\n        t.data :transaction :message :instructions :: ARRAY AS instructions,\r\n        t.data :meta :innerInstructions :: ARRAY AS inner_instructions,\r\n        t.data :meta :logMessages :: ARRAY AS log_messages,\r\n        t._partition_id,\r\n        t._inserted_timestamp\r\n    FROM\r\n        {{ ref('bronze__transactions2') }} t\r\n    LEFT OUTER JOIN \r\n        {{ ref('silver__blocks2') }} b on b.block_id = t.block_id\r\n    WHERE\r\n        tx_id is not null\r\n    AND \r\n        COALESCE(\r\n            t.data :transaction :message :instructions [0] :programId :: STRING,\r\n            ''\r\n        ) <> 'Vote111111111111111111111111111111111111111'\r\n    {% if is_incremental() %}\r\n    AND \r\n        _partition_id >= (\r\n            select max(_partition_id)-1\r\n            from {{this}}\r\n        )\r\n    AND\r\n        _partition_id <= (\r\n            select max(_partition_id)+10\r\n            from {{this}}\r\n        )\r\n    AND \r\n        t._inserted_timestamp > (\r\n            select max(_inserted_timestamp)\r\n            from {{this}}\r\n        )\r\n    {% else %}\r\n    AND \r\n        _partition_id in (1,2)\r\n    {% endif %}\r\n)\r\n{% if is_incremental() %}\r\n, prev_null_block_timestamp_txs as (\r\n    select \r\n        b.block_timestamp,\r\n        t.block_id,\r\n        t.tx_id,\r\n        t.recent_block_hash,\r\n        t.signers,\r\n        t.fee,\r\n        t.succeeded,\r\n        t.account_keys,\r\n        t.pre_balances,\r\n        t.post_balances,\r\n        t.pre_token_balances,\r\n        t.post_token_balances,\r\n        t.instructions,\r\n        t.inner_instructions,\r\n        t.log_messages,\r\n        t._partition_id,\r\n        greatest(t._inserted_timestamp,b._inserted_timestamp) as _inserted_timestamp\r\n    from {{ this }} t\r\n    inner join {{ ref('silver__blocks2') }} b on b.block_id = t.block_id\r\n    where t.block_timestamp::date is null\r\n)\r\n{% endif %}\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    recent_block_hash,\r\n    silver.udf_ordered_signers(account_keys) AS signers,\r\n    fee,\r\n    succeeded,\r\n    account_keys,\r\n    pre_balances,\r\n    post_balances,\r\n    pre_token_balances,\r\n    post_token_balances,\r\n    instructions,\r\n    inner_instructions,\r\n    log_messages,\r\n    _partition_id,\r\n    _inserted_timestamp\r\nFROM\r\n    pre_final b \r\nqualify(ROW_NUMBER() over(PARTITION BY block_id, tx_id\r\nORDER BY\r\n    _inserted_timestamp DESC)) = 1\r\n{% if is_incremental() %}\r\nunion\r\nselect *\r\nfrom prev_null_block_timestamp_txs\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__transactions2", "model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "block_id", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__transactions2"], "unique_id": "model.solana_models.silver__transactions2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__transactions2.sql", "original_file_path": "models\\silver\\silver__transactions2.sql", "name": "silver__transactions2", "alias": "transactions2", "checksum": {"name": "sha256", "checksum": "7f1bb84aaafc2d6a7dd025eecc7820d1f516f87d98d7d3008f9ccca9929828cb"}, "tags": [], "refs": [["bronze__transactions2"], ["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_MESSAGES": {"name": "LOG_MESSAGES", "description": "Array of log messages written by the program for this transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__transactions2.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "block_id", "_inserted_timestamp::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1662575622.6100733, "compiled_sql": "\n\nWITH pre_final AS (\n    SELECT\n        b.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.data :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        t.data :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN IS_NULL_VALUE(\n                t.data :meta :err\n            ) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        t.data :transaction :message :accountKeys :: ARRAY AS account_keys,\n        t.data :meta :preBalances :: ARRAY AS pre_balances,\n        t.data :meta :postBalances :: ARRAY AS post_balances,\n        t.data :meta :preTokenBalances :: ARRAY AS pre_token_balances,\n        t.data :meta :postTokenBalances :: ARRAY AS post_token_balances,\n        t.data :transaction :message :instructions :: ARRAY AS instructions,\n        t.data :meta :innerInstructions :: ARRAY AS inner_instructions,\n        t.data :meta :logMessages :: ARRAY AS log_messages,\n        t._partition_id,\n        t._inserted_timestamp\n    FROM\n        SOLANA_DEV.bronze.transactions2 t\n    LEFT OUTER JOIN \n        SOLANA_DEV.silver.blocks2 b on b.block_id = t.block_id\n    WHERE\n        tx_id is not null\n    AND \n        COALESCE(\n            t.data :transaction :message :instructions [0] :programId :: STRING,\n            ''\n        ) <> 'Vote111111111111111111111111111111111111111'\n    \n    AND \n        _partition_id >= (\n            select max(_partition_id)-1\n            from SOLANA_DEV.silver.transactions2\n        )\n    AND\n        _partition_id <= (\n            select max(_partition_id)+10\n            from SOLANA_DEV.silver.transactions2\n        )\n    AND \n        t._inserted_timestamp > (\n            select max(_inserted_timestamp)\n            from SOLANA_DEV.silver.transactions2\n        )\n    \n)\n\n, prev_null_block_timestamp_txs as (\n    select \n        b.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.recent_block_hash,\n        t.signers,\n        t.fee,\n        t.succeeded,\n        t.account_keys,\n        t.pre_balances,\n        t.post_balances,\n        t.pre_token_balances,\n        t.post_token_balances,\n        t.instructions,\n        t.inner_instructions,\n        t.log_messages,\n        t._partition_id,\n        greatest(t._inserted_timestamp,b._inserted_timestamp) as _inserted_timestamp\n    from SOLANA_DEV.silver.transactions2 t\n    inner join SOLANA_DEV.silver.blocks2 b on b.block_id = t.block_id\n    where t.block_timestamp::date is null\n)\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    silver.udf_ordered_signers(account_keys) AS signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages,\n    _partition_id,\n    _inserted_timestamp\nFROM\n    pre_final b \nqualify(ROW_NUMBER() over(PARTITION BY block_id, tx_id\nORDER BY\n    _inserted_timestamp DESC)) = 1\n\nunion\nselect *\nfrom prev_null_block_timestamp_txs\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.transactions2"}, "model.solana_models.silver__gauges_votes_marinade": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, voter, voter_nft, gauge)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH all_marinade_gov_events AS (\r\n\r\n    SELECT\r\n        block_timestamp,\r\n        block_id,\r\n        tx_id,\r\n        INDEX,\r\n        instruction,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\r\n        AND block_timestamp :: DATE >= '2022-05-17'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nb AS (\r\n    SELECT\r\n        t.tx_id,\r\n        t.succeeded,\r\n        l.index,\r\n        l.value :: STRING AS log_message,\r\n        CASE\r\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\r\n            WHEN l.value :: STRING LIKE '%success' THEN -1\r\n            ELSE 0\r\n        END AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS event_cumsum\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT tx_id\r\n            FROM\r\n                all_marinade_gov_events\r\n        ) g\r\n        ON t.tx_id = g.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n    WHERE\r\n        block_timestamp :: DATE >= '2022-05-17'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nC AS (\r\n    SELECT\r\n        b.*,\r\n        LAG(\r\n            event_cumsum,\r\n            1\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS prev_event_cumsum\r\n    FROM\r\n        b\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        C.tx_id,\r\n        C.succeeded,\r\n        C.index AS log_index,\r\n        C.log_message,\r\n        conditional_true_event(\r\n            prev_event_cumsum = 0\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS event_index\r\n    FROM\r\n        C\r\n),\r\nfiltered_logs AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        tx_logs\r\n    WHERE\r\n        log_message LIKE 'Program log: Instruction: GaugeSetVote%'\r\n)\r\nSELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    l.succeeded,\r\n    e.index,\r\n    e.instruction :accounts [5] :: STRING AS voter,\r\n    e.instruction :accounts [3] :: STRING AS voter_nft,\r\n    e.instruction :accounts [6] :: STRING AS gauge,\r\n    d.data :new_weight :: NUMBER AS delegated_shares,\r\n    e._inserted_timestamp\r\nFROM\r\n    all_marinade_gov_events e\r\n    INNER JOIN filtered_logs l\r\n    ON l.tx_id = e.tx_id\r\n    AND e.index = l.event_index\r\n    LEFT OUTER JOIN {{ ref('silver__decoded_instructions_data') }}\r\n    d\r\n    ON d.tx_id = e.tx_id\r\n    AND d.event_index = e.index\r\n    AND d.instruction_type = 'GaugeSetVote'\r\n    AND d.program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, voter, voter_nft, gauge)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "gauges", "silver__gauges_votes_marinade"], "unique_id": "model.solana_models.silver__gauges_votes_marinade", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\gauges\\silver__gauges_votes_marinade.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.sql", "name": "silver__gauges_votes_marinade", "alias": "gauges_votes_marinade", "checksum": {"name": "sha256", "checksum": "9ac87eb83091ec1c7b1aa182c7ca443dd9e06b8940b7fcb0c95962f37a68a968"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address performing the vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER_NFT": {"name": "VOTER_NFT", "description": "NFT representing tokens for governance.  This is only available for certain types of governance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Address that determines the rewards share to give to a liquidity pool, or in the case of Marinade, the amount of SOL that should be delegated to a given validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATED_SHARES": {"name": "DELEGATED_SHARES", "description": "Number of shares delegated to vote for this gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, voter, voter_nft, gauge)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.6693075, "compiled_sql": "\n\nWITH all_marinade_gov_events AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        INDEX,\n        instruction,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\n        AND block_timestamp :: DATE >= '2022-05-17'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gauges_votes_marinade\n)\n\n),\nb AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.index,\n        l.value :: STRING AS log_message,\n        CASE\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\n            WHEN l.value :: STRING LIKE '%success' THEN -1\n            ELSE 0\n        END AS cnt,\n        SUM(cnt) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS event_cumsum\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                all_marinade_gov_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        block_timestamp :: DATE >= '2022-05-17'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gauges_votes_marinade\n)\n\n),\nC AS (\n    SELECT\n        b.*,\n        LAG(\n            event_cumsum,\n            1\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS prev_event_cumsum\n    FROM\n        b\n),\ntx_logs AS (\n    SELECT\n        C.tx_id,\n        C.succeeded,\n        C.index AS log_index,\n        C.log_message,\n        conditional_true_event(\n            prev_event_cumsum = 0\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS event_index\n    FROM\n        C\n),\nfiltered_logs AS (\n    SELECT\n        *\n    FROM\n        tx_logs\n    WHERE\n        log_message LIKE 'Program log: Instruction: GaugeSetVote%'\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    e.index,\n    e.instruction :accounts [5] :: STRING AS voter,\n    e.instruction :accounts [3] :: STRING AS voter_nft,\n    e.instruction :accounts [6] :: STRING AS gauge,\n    d.data :new_weight :: NUMBER AS delegated_shares,\n    e._inserted_timestamp\nFROM\n    all_marinade_gov_events e\n    INNER JOIN filtered_logs l\n    ON l.tx_id = e.tx_id\n    AND e.index = l.event_index\n    LEFT OUTER JOIN SOLANA_DEV.silver.decoded_instructions_data\n    d\n    ON d.tx_id = e.tx_id\n    AND d.event_index = e.index\n    AND d.instruction_type = 'GaugeSetVote'\n    AND d.program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.gauges_votes_marinade"}, "model.solana_models.silver__proposal_votes_marinade": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, voter_nft, proposal)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH marinade_vote_txs AS (\r\n\r\n    SELECT\r\n        DISTINCT e.tx_id,\r\n        e.succeeded\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        LEFT OUTER JOIN TABLE(\r\n            FLATTEN(\r\n                input => inner_instruction :instructions,\r\n                outer => TRUE\r\n            )\r\n        ) ii\r\n    WHERE\r\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\nINTERSECT\r\nSELECT\r\n    DISTINCT e.tx_id,\r\n    e.succeeded\r\nFROM\r\n    {{ ref('silver__events') }}\r\n    e\r\n    LEFT OUTER JOIN TABLE(\r\n        FLATTEN(\r\n            input => inner_instruction :instructions,\r\n            outer => TRUE\r\n        )\r\n    ) ii\r\nWHERE\r\n    (\r\n        program_id = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw' -- ignore votes\r\n        OR COALESCE(\r\n            ii.value :programId :: STRING,\r\n            ''\r\n        ) = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw'\r\n    )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\n),\r\nb AS (\r\n    SELECT\r\n        t.tx_id,\r\n        l.index,\r\n        l.value :: STRING AS log_message,\r\n        CASE\r\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\r\n            WHEN l.value :: STRING LIKE '%success' THEN -1\r\n            ELSE 0\r\n        END AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS event_cumsum\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN marinade_vote_txs d\r\n        ON t.tx_id = d.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    t._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\nWHERE\r\n    t.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\n),\r\nC AS (\r\n    SELECT\r\n        b.*,\r\n        LAG(\r\n            event_cumsum,\r\n            1\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS prev_event_cumsum\r\n    FROM\r\n        b\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        C.tx_id,\r\n        C.index AS log_index,\r\n        C.log_message,\r\n        CASE\r\n            WHEN C.log_message = 'Program log: Instruction: CastVote' THEN 'VOTE'\r\n            ELSE NULL\r\n        END AS action,\r\n        conditional_true_event(\r\n            prev_event_cumsum = 0\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS event_index\r\n    FROM\r\n        C\r\n)\r\nSELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    m.succeeded,\r\n    e.instruction :accounts [3] :: STRING AS voter,\r\n    e.instruction :accounts [1] :: STRING AS voter_nft,\r\n    e.instruction :accounts [5] :: STRING AS voter_account,\r\n    e.instruction :accounts [6] :: STRING AS proposal,\r\n    e._inserted_timestamp\r\nFROM\r\n    {{ ref('silver__events') }}\r\n    e\r\n    INNER JOIN marinade_vote_txs m\r\n    ON m.tx_id = e.tx_id\r\n    LEFT OUTER JOIN tx_logs l\r\n    ON e.tx_id = l.tx_id\r\n    AND e.index = l.event_index\r\n    AND l.action IS NOT NULL\r\nWHERE\r\n    l.action IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, voter_nft, proposal)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "governance", "silver__proposal_votes_marinade"], "unique_id": "model.solana_models.silver__proposal_votes_marinade", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\governance\\silver__proposal_votes_marinade.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.sql", "name": "silver__proposal_votes_marinade", "alias": "proposal_votes_marinade", "checksum": {"name": "sha256", "checksum": "2979735927f6fd988ce087a762b691731f35cacc032492d2051f1e5b601dc66a"}, "tags": [], "refs": [["silver__events"], ["silver__events"], ["silver__transactions"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address voting on the proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER_NFT": {"name": "VOTER_NFT", "description": "NFT mint used in this vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER_ACCOUNT": {"name": "VOTER_ACCOUNT", "description": "Account with locked tokens linked to the NFT (determines voting power)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL": {"name": "PROPOSAL", "description": "Address representing the proposal being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\governance\\silver__proposal_votes_marinade.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, voter_nft, proposal)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.783508, "compiled_sql": "\n\nWITH marinade_vote_txs AS (\n\n    SELECT\n        DISTINCT e.tx_id,\n        e.succeeded\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        LEFT OUTER JOIN TABLE(\n            FLATTEN(\n                input => inner_instruction :instructions,\n                outer => TRUE\n            )\n        ) ii\n    WHERE\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.proposal_votes_marinade\n)\n\nINTERSECT\nSELECT\n    DISTINCT e.tx_id,\n    e.succeeded\nFROM\n    SOLANA_DEV.silver.events\n    e\n    LEFT OUTER JOIN TABLE(\n        FLATTEN(\n            input => inner_instruction :instructions,\n            outer => TRUE\n        )\n    ) ii\nWHERE\n    (\n        program_id = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw' -- ignore votes\n        OR COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw'\n    )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.proposal_votes_marinade\n)\n\n),\nb AS (\n    SELECT\n        t.tx_id,\n        l.index,\n        l.value :: STRING AS log_message,\n        CASE\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\n            WHEN l.value :: STRING LIKE '%success' THEN -1\n            ELSE 0\n        END AS cnt,\n        SUM(cnt) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS event_cumsum\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN marinade_vote_txs d\n        ON t.tx_id = d.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n\n\nWHERE\n    t._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.proposal_votes_marinade\n    )\n\n),\nC AS (\n    SELECT\n        b.*,\n        LAG(\n            event_cumsum,\n            1\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS prev_event_cumsum\n    FROM\n        b\n),\ntx_logs AS (\n    SELECT\n        C.tx_id,\n        C.index AS log_index,\n        C.log_message,\n        CASE\n            WHEN C.log_message = 'Program log: Instruction: CastVote' THEN 'VOTE'\n            ELSE NULL\n        END AS action,\n        conditional_true_event(\n            prev_event_cumsum = 0\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS event_index\n    FROM\n        C\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    m.succeeded,\n    e.instruction :accounts [3] :: STRING AS voter,\n    e.instruction :accounts [1] :: STRING AS voter_nft,\n    e.instruction :accounts [5] :: STRING AS voter_account,\n    e.instruction :accounts [6] :: STRING AS proposal,\n    e._inserted_timestamp\nFROM\n    SOLANA_DEV.silver.events\n    e\n    INNER JOIN marinade_vote_txs m\n    ON m.tx_id = e.tx_id\n    LEFT OUTER JOIN tx_logs l\n    ON e.tx_id = l.tx_id\n    AND e.index = l.event_index\n    AND l.action IS NOT NULL\nWHERE\n    l.action IS NOT NULL\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.proposal_votes_marinade\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.proposal_votes_marinade"}, "model.solana_models.silver__nft_sales_magic_eden_v1": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"CONCAT_WS('-', tx_id, mint)\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH sales_inner_instructions AS (\r\n\r\n  SELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    t.succeeded,\r\n    e.program_id,\r\n    e.index,\r\n    COALESCE(\r\n      i.value :parsed :info :lamports :: NUMBER,\r\n      0\r\n    ) AS amount,\r\n    e.instruction :accounts [0] :: STRING AS purchaser,\r\n    e.instruction :accounts [1] :: STRING AS nft_account,\r\n    e.instruction :accounts [2] :: STRING AS nft_account_2,\r\n    e.instruction :accounts [4] :: STRING AS nft_account_3,\r\n    t.signers [0] :: STRING AS signer,\r\n    i.value :parsed :info :newAuthority :: STRING AS new_authority,\r\n    e.ingested_at,\r\n    e._inserted_timestamp\r\n  FROM\r\n    {{ ref('silver__events') }}\r\n    e\r\n    INNER JOIN {{ ref('silver__transactions') }}\r\n    t\r\n    ON t.tx_id = e.tx_id\r\n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n  WHERE\r\n    e.block_timestamp :: date >= '2021-09-07'\r\n    AND program_id = 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8' -- Magic Eden V1 Program ID\r\n    AND ARRAY_SIZE(\r\n      inner_instruction :instructions\r\n    ) > 2\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n  SELECT\r\n    MAX(_inserted_timestamp)\r\n  FROM\r\n    {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n  SELECT\r\n    MAX(_inserted_timestamp)\r\n  FROM\r\n    {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nsellers AS (\r\n  SELECT\r\n    tx_id,\r\n    index,\r\n    CASE\r\n      WHEN new_authority <> signer THEN signer\r\n      ELSE nft_account_2\r\n    END AS seller,\r\n    CASE\r\n      WHEN new_authority <> signer THEN nft_account\r\n      ELSE purchaser\r\n    END AS purchaser\r\n  FROM\r\n    sales_inner_instructions\r\n  WHERE\r\n    new_authority IS NOT NULL\r\n),\r\npost_token_balances AS (\r\n  SELECT\r\n    DISTINCT tx_id,\r\n    account,\r\n    mint\r\n  FROM\r\n    {{ ref('silver___post_token_balances') }}\r\n    p\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n  p._inserted_timestamp >= (\r\n    SELECT\r\n      MAX(_inserted_timestamp)\r\n    FROM\r\n      {{ this }}\r\n  )\r\n{% endif %}\r\n)\r\nSELECT\r\n  s.block_timestamp,\r\n  s.block_id,\r\n  s.tx_id,\r\n  s.succeeded,\r\n  s.program_id,\r\n  COALESCE(\r\n    p.mint,\r\n    p2.mint\r\n  ) AS mint,\r\n  ss.purchaser,\r\n  ss.seller,\r\n  SUM(\r\n    s.amount\r\n  ) / pow(\r\n    10,\r\n    9\r\n  ) AS sales_amount,\r\n  s.ingested_at,\r\n  s._inserted_timestamp\r\nFROM\r\n  sales_inner_instructions s\r\n  LEFT OUTER JOIN post_token_balances p\r\n  ON p.tx_id = s.tx_id\r\n  AND p.account = s.nft_account\r\n  LEFT OUTER JOIN post_token_balances p2\r\n  ON p2.tx_id = s.tx_id\r\n  AND p2.account = s.nft_account_2\r\n  LEFT OUTER JOIN sellers ss\r\n  ON ss.tx_id = s.tx_id\r\n  AND ss.index = s.index\r\nGROUP BY\r\n  s.block_timestamp,\r\n  s.block_id,\r\n  s.tx_id,\r\n  s.succeeded,\r\n  s.program_id,\r\n  COALESCE(\r\n    p.mint,\r\n    p2.mint\r\n  ),\r\n  ss.seller,\r\n  ss.purchaser,\r\n  s.ingested_at,\r\n  s._inserted_timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, mint)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_magic_eden_v1"], "unique_id": "model.solana_models.silver__nft_sales_magic_eden_v1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_magic_eden_v1.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.sql", "name": "silver__nft_sales_magic_eden_v1", "alias": "nft_sales_magic_eden_v1", "checksum": {"name": "sha256", "checksum": "acd9acec9cf28cb6639ef56e41a651bd9b71625ca7bba915a06572afe2ec7d22"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.8967612, "compiled_sql": "\n\nWITH sales_inner_instructions AS (\n\n  SELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    t.succeeded,\n    e.program_id,\n    e.index,\n    COALESCE(\n      i.value :parsed :info :lamports :: NUMBER,\n      0\n    ) AS amount,\n    e.instruction :accounts [0] :: STRING AS purchaser,\n    e.instruction :accounts [1] :: STRING AS nft_account,\n    e.instruction :accounts [2] :: STRING AS nft_account_2,\n    e.instruction :accounts [4] :: STRING AS nft_account_3,\n    t.signers [0] :: STRING AS signer,\n    i.value :parsed :info :newAuthority :: STRING AS new_authority,\n    e.ingested_at,\n    e._inserted_timestamp\n  FROM\n    SOLANA_DEV.silver.events\n    e\n    INNER JOIN SOLANA_DEV.silver.transactions\n    t\n    ON t.tx_id = e.tx_id\n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  WHERE\n    e.block_timestamp :: date >= '2021-09-07'\n    AND program_id = 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8' -- Magic Eden V1 Program ID\n    AND ARRAY_SIZE(\n      inner_instruction :instructions\n    ) > 2\n\n\nAND e._inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp)\n  FROM\n    SOLANA_DEV.silver.nft_sales_magic_eden_v1\n)\nAND t._inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp)\n  FROM\n    SOLANA_DEV.silver.nft_sales_magic_eden_v1\n)\n\n),\nsellers AS (\n  SELECT\n    tx_id,\n    index,\n    CASE\n      WHEN new_authority <> signer THEN signer\n      ELSE nft_account_2\n    END AS seller,\n    CASE\n      WHEN new_authority <> signer THEN nft_account\n      ELSE purchaser\n    END AS purchaser\n  FROM\n    sales_inner_instructions\n  WHERE\n    new_authority IS NOT NULL\n),\npost_token_balances AS (\n  SELECT\n    DISTINCT tx_id,\n    account,\n    mint\n  FROM\n    SOLANA_DEV.silver._post_token_balances\n    p\n\n\nWHERE\n  p._inserted_timestamp >= (\n    SELECT\n      MAX(_inserted_timestamp)\n    FROM\n      SOLANA_DEV.silver.nft_sales_magic_eden_v1\n  )\n\n)\nSELECT\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  COALESCE(\n    p.mint,\n    p2.mint\n  ) AS mint,\n  ss.purchaser,\n  ss.seller,\n  SUM(\n    s.amount\n  ) / pow(\n    10,\n    9\n  ) AS sales_amount,\n  s.ingested_at,\n  s._inserted_timestamp\nFROM\n  sales_inner_instructions s\n  LEFT OUTER JOIN post_token_balances p\n  ON p.tx_id = s.tx_id\n  AND p.account = s.nft_account\n  LEFT OUTER JOIN post_token_balances p2\n  ON p2.tx_id = s.tx_id\n  AND p2.account = s.nft_account_2\n  LEFT OUTER JOIN sellers ss\n  ON ss.tx_id = s.tx_id\n  AND ss.index = s.index\nGROUP BY\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  COALESCE(\n    p.mint,\n    p2.mint\n  ),\n  ss.seller,\n  ss.purchaser,\n  s.ingested_at,\n  s._inserted_timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_magic_eden_v1"}, "model.solana_models.silver__nft_sales_solanart": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, mint)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH sales_inner_instructions AS (\r\n\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.program_id,\r\n        e.index,\r\n        COALESCE(\r\n            i.value :parsed :info :lamports :: NUMBER,\r\n            0\r\n        ) AS amount,\r\n        e.instruction :accounts [0] :: STRING AS purchaser,\r\n        e.instruction :accounts [3] :: STRING AS seller,\r\n        e.instruction :accounts [1] :: STRING AS nft_account,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n    WHERE\r\n        e.block_timestamp :: date >= '2021-08-01'\r\n        AND e.program_id = 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz' -- Solanart Program ID\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\npost_token_balances AS (\r\n    SELECT\r\n        tx_id,\r\n        account,\r\n        mint\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n        p\r\n    WHERE\r\n        block_timestamp :: date >= '2021-08-01'\r\n        AND amount <> 0 -- Removes random account transfers with no NFT\r\n\r\n{% if is_incremental() %}\r\nAND p._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    s.block_timestamp,\r\n    s.block_id,\r\n    s.tx_id,\r\n    s.succeeded,\r\n    s.program_id,\r\n    p.mint AS mint,\r\n    s.purchaser,\r\n    s.seller, \r\n    SUM(\r\n        s.amount\r\n    ) / pow(\r\n        10,\r\n        9\r\n    ) AS sales_amount,\r\n    s.ingested_at,\r\n    s._inserted_timestamp\r\nFROM\r\n    sales_inner_instructions s\r\n    INNER JOIN post_token_balances p\r\n    ON s.tx_id = p.tx_id\r\n    AND s.nft_account = p.account\r\nGROUP BY\r\n    s.block_timestamp,\r\n    s.block_id,\r\n    s.tx_id,\r\n    s.succeeded,\r\n    s.program_id,\r\n    p.mint,\r\n    s.purchaser,\r\n    s.seller, \r\n    s.ingested_at,\r\n    s._inserted_timestamp\r\nHAVING\r\n    SUM(\r\n        s.amount\r\n    ) > 0 -- Removes transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, mint)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_solanart"], "unique_id": "model.solana_models.silver__nft_sales_solanart", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_solanart.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.sql", "name": "silver__nft_sales_solanart", "alias": "nft_sales_solanart", "checksum": {"name": "sha256", "checksum": "5e0e49ecbdb508d912cc4d07fbee7955dadc9a35653b5091924013f117d8e652"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_solanart.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.74253, "compiled_sql": "\n\nWITH sales_inner_instructions AS (\n\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        t.succeeded,\n        e.program_id,\n        e.index,\n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER,\n            0\n        ) AS amount,\n        e.instruction :accounts [0] :: STRING AS purchaser,\n        e.instruction :accounts [3] :: STRING AS seller,\n        e.instruction :accounts [1] :: STRING AS nft_account,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        e.block_timestamp :: date >= '2021-08-01'\n        AND e.program_id = 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz' -- Solanart Program ID\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_solanart\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_solanart\n)\n\n),\npost_token_balances AS (\n    SELECT\n        tx_id,\n        account,\n        mint\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n        p\n    WHERE\n        block_timestamp :: date >= '2021-08-01'\n        AND amount <> 0 -- Removes random account transfers with no NFT\n\n\nAND p._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_solanart\n)\n\n)\nSELECT\n    s.block_timestamp,\n    s.block_id,\n    s.tx_id,\n    s.succeeded,\n    s.program_id,\n    p.mint AS mint,\n    s.purchaser,\n    s.seller, \n    SUM(\n        s.amount\n    ) / pow(\n        10,\n        9\n    ) AS sales_amount,\n    s.ingested_at,\n    s._inserted_timestamp\nFROM\n    sales_inner_instructions s\n    INNER JOIN post_token_balances p\n    ON s.tx_id = p.tx_id\n    AND s.nft_account = p.account\nGROUP BY\n    s.block_timestamp,\n    s.block_id,\n    s.tx_id,\n    s.succeeded,\n    s.program_id,\n    p.mint,\n    s.purchaser,\n    s.seller, \n    s.ingested_at,\n    s._inserted_timestamp\nHAVING\n    SUM(\n        s.amount\n    ) > 0 -- Removes transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_solanart"}, "model.solana_models.silver__gauges_creates_marinade": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, index)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH create_validator_gauge_events AS (\r\n\r\n    SELECT\r\n        block_timestamp,\r\n        block_id,\r\n        tx_id,\r\n        INDEX,\r\n        instruction,\r\n        inner_instruction,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'va12L6Z9fa5aGJ7gxtJuQZ928nySAk5UetjcGPve3Nu' -- validator gauge creation program id\r\n        AND block_timestamp :: DATE >= '2022-05-17'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nb AS (\r\n    SELECT\r\n        t.tx_id,\r\n        t.succeeded,\r\n        l.index,\r\n        l.value :: STRING AS log_message,\r\n        CASE\r\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\r\n            WHEN l.value :: STRING LIKE '%success' THEN -1\r\n            ELSE 0\r\n        END AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS event_cumsum\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT tx_id\r\n            FROM\r\n                create_validator_gauge_events\r\n        ) g\r\n        ON t.tx_id = g.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n    WHERE\r\n        t.block_timestamp :: DATE >= '2022-05-17'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nC AS (\r\n    SELECT\r\n        b.*,\r\n        LAG(\r\n            event_cumsum,\r\n            1\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS prev_event_cumsum\r\n    FROM\r\n        b\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        C.tx_id,\r\n        C.succeeded,\r\n        C.index AS log_index,\r\n        C.log_message,\r\n        conditional_true_event(\r\n            prev_event_cumsum = 0\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS event_index\r\n    FROM\r\n        C\r\n),\r\ncreate_validator_logs AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        tx_logs\r\n    WHERE\r\n        log_message LIKE 'Program log: Instruction: CreateValidatorGauge%'\r\n)\r\nSELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    e.index,\r\n    l.succeeded,\r\n    e.instruction :accounts [0] :: STRING AS signer,\r\n    e.instruction :accounts [3] :: STRING AS gauge,\r\n    e.instruction :accounts [4] :: STRING AS gaugemeister,\r\n    d.data :validator_account :: STRING AS validator_account,\r\n    e._inserted_timestamp\r\nFROM\r\n    create_validator_gauge_events e\r\n    INNER JOIN create_validator_logs l\r\n    ON l.tx_id = e.tx_id\r\n    AND e.index = l.event_index\r\n    LEFT OUTER JOIN {{ ref('silver__decoded_instructions_data') }}\r\n    d\r\n    ON e.tx_id = d.tx_id\r\n    AND e.index = d.event_index\r\n    AND d.instruction_type = 'CreateValidatorGauge'\r\n    AND d.program_id = 'va12L6Z9fa5aGJ7gxtJuQZ928nySAk5UetjcGPve3Nu'\r\nWHERE\r\n    -- marinade tribeca programid\r\n    e.inner_instruction :instructions [0] :programId :: STRING = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__decoded_instructions_data"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "gauges", "silver__gauges_creates_marinade"], "unique_id": "model.solana_models.silver__gauges_creates_marinade", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\gauges\\silver__gauges_creates_marinade.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.sql", "name": "silver__gauges_creates_marinade", "alias": "gauges_creates_marinade", "checksum": {"name": "sha256", "checksum": "84e9c454294b8ee5e0e8fbf8e25a43b4b64fd144d61ac63806583c7c57c6c0ff"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__decoded_instructions_data"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Address that determines the rewards share to give to a liquidity pool, or in the case of Marinade, the amount of SOL that should be delegated to a given validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGEMEISTER": {"name": "GAUGEMEISTER", "description": "Address that manages the rewards shares of all gauges", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_ACCOUNT": {"name": "VALIDATOR_ACCOUNT", "description": "Validator vote key linked to a gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.6469724, "compiled_sql": "\n\nWITH create_validator_gauge_events AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        INDEX,\n        instruction,\n        inner_instruction,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'va12L6Z9fa5aGJ7gxtJuQZ928nySAk5UetjcGPve3Nu' -- validator gauge creation program id\n        AND block_timestamp :: DATE >= '2022-05-17'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gauges_creates_marinade\n)\n\n),\nb AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.index,\n        l.value :: STRING AS log_message,\n        CASE\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\n            WHEN l.value :: STRING LIKE '%success' THEN -1\n            ELSE 0\n        END AS cnt,\n        SUM(cnt) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS event_cumsum\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                create_validator_gauge_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        t.block_timestamp :: DATE >= '2022-05-17'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gauges_creates_marinade\n)\n\n),\nC AS (\n    SELECT\n        b.*,\n        LAG(\n            event_cumsum,\n            1\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS prev_event_cumsum\n    FROM\n        b\n),\ntx_logs AS (\n    SELECT\n        C.tx_id,\n        C.succeeded,\n        C.index AS log_index,\n        C.log_message,\n        conditional_true_event(\n            prev_event_cumsum = 0\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS event_index\n    FROM\n        C\n),\ncreate_validator_logs AS (\n    SELECT\n        *\n    FROM\n        tx_logs\n    WHERE\n        log_message LIKE 'Program log: Instruction: CreateValidatorGauge%'\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    e.index,\n    l.succeeded,\n    e.instruction :accounts [0] :: STRING AS signer,\n    e.instruction :accounts [3] :: STRING AS gauge,\n    e.instruction :accounts [4] :: STRING AS gaugemeister,\n    d.data :validator_account :: STRING AS validator_account,\n    e._inserted_timestamp\nFROM\n    create_validator_gauge_events e\n    INNER JOIN create_validator_logs l\n    ON l.tx_id = e.tx_id\n    AND e.index = l.event_index\n    LEFT OUTER JOIN SOLANA_DEV.silver.decoded_instructions_data\n    d\n    ON e.tx_id = d.tx_id\n    AND e.index = d.event_index\n    AND d.instruction_type = 'CreateValidatorGauge'\n    AND d.program_id = 'va12L6Z9fa5aGJ7gxtJuQZ928nySAk5UetjcGPve3Nu'\nWHERE\n    -- marinade tribeca programid\n    e.inner_instruction :instructions [0] :programId :: STRING = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.gauges_creates_marinade"}, "model.solana_models.silver__proposal_votes_realms": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"CONCAT_WS('-', tx_id, index)\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH vote_programs AS (\r\n    SELECT \r\n        address\r\n    FROM {{ source(\r\n        'crosschain',\r\n        'address_labels'\r\n    ) }} \r\n    WHERE \r\n        blockchain = 'solana'\r\n        AND project_name = 'realms'\r\n),  \r\nvote_txs AS (\r\n    SELECT\r\n        block_timestamp, \r\n        block_id, \r\n        tx_id,\r\n        succeeded, \r\n        e.index, \r\n        program_id, \r\n        instruction :accounts[0] :: STRING AS realms_id, \r\n        instruction :accounts[2] :: STRING AS proposal, \r\n        instruction :accounts[5] :: STRING AS voter, \r\n        instruction :accounts[6] :: STRING AS vote_account, \r\n        _inserted_timestamp\r\n    FROM \r\n        {{ ref('silver__events') }}  e \r\n  \r\n    INNER JOIN vote_programs v\r\n    ON e.program_id = v.address\r\n\r\n    WHERE \r\n        block_timestamp :: date >= '2022-04-28'\r\n        AND instruction :data :: STRING <> 'Q'\r\n    \r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nb AS (\r\n    SELECT\r\n        t.tx_id,\r\n        t.succeeded,\r\n        l.index,\r\n        l.value :: STRING AS log_message,\r\n        CASE\r\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\r\n            WHEN l.value :: STRING LIKE '%success' THEN -1\r\n            ELSE 0\r\n        END AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS event_cumsum\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT tx_id\r\n            FROM\r\n                vote_txs \r\n        ) v\r\n        ON t.tx_id = v.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n\r\n{% if is_incremental() %}\r\nWHERE _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\nWHERE \r\n    t.block_timestamp :: date >= '2022-04-28'\r\n{% endif %}\r\n),\r\nC AS (\r\n    SELECT\r\n        b.*,\r\n        LAG(\r\n            event_cumsum,\r\n            1\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS prev_event_cumsum\r\n    FROM\r\n        b\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        C.tx_id,\r\n        C.succeeded,\r\n        C.index AS log_index,\r\n        C.log_message,\r\n        conditional_true_event(\r\n            prev_event_cumsum = 0\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS event_index\r\n    FROM\r\n        C\r\n), \r\ncreate_vote_logs AS (\r\n    SELECT \r\n        * \r\n    FROM \r\n        tx_logs\r\n    WHERE \r\n        log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote %'\r\n)\r\n\r\nSELECT \r\n    v.block_timestamp, \r\n    v.block_id,\r\n    v.tx_id, \r\n    v.succeeded,\r\n    v.index, \r\n    v.program_id, \r\n    realms_id, \r\n    proposal, \r\n    voter, \r\n    vote_account, \r\n    CASE WHEN (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Deny }')\r\n    OR (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: No }') THEN \r\n        'NO'\r\n    WHEN (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Approve%') \r\n    OR (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Yes }') THEN \r\n        'YES'\r\n    ELSE \r\n        'ABSTAIN'\r\n    END AS vote_choice,\r\n    CASE WHEN log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Approve%' THEN \r\n        TRY_CAST(split_part(split_part(split_part(split_part(log_message :: STRING, '{', 3), '}', 1), ',', 1), ':', 2) AS INTEGER)\r\n    ELSE \r\n        0\r\n    END AS vote_rank, \r\n    CASE WHEN log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Approve%' THEN \r\n        TRY_CAST(split_part(split_part(split_part(split_part(log_message:: STRING, '{', 3), '}', 1), ',', 2), ':', 2) AS INTEGER)\r\n    WHEN log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Yes }' THEN \r\n        100\r\n    ELSE \r\n        0\r\n    END AS vote_weight,\r\n    _inserted_timestamp\r\nFROM vote_txs v \r\n\r\nINNER JOIN create_vote_logs l \r\nON l.tx_id = v.tx_id\r\nAND l.event_index = v.index", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.crosschain.address_labels", "model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, index)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "governance", "silver__proposal_votes_realms"], "unique_id": "model.solana_models.silver__proposal_votes_realms", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\governance\\silver__proposal_votes_realms.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.sql", "name": "silver__proposal_votes_realms", "alias": "proposal_votes_realms", "checksum": {"name": "sha256", "checksum": "a4831b3666220ebb34969e66c16bbed629b17ec29e591e963bc50b4a57a2a210"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"]], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "An EZ view of all vote transactions on Realms DAO governance spaces. A space serves as a voting group for an organization, dAPP, or DAO.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "A unique key that identifies the event's position within a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REALMS_ID": {"name": "REALMS_ID", "description": "An address that is unique to the space or voting group on Realms.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL": {"name": "PROPOSAL", "description": "Address representing the proposal being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address voting on the proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_ACCOUNT": {"name": "VOTE_ACCOUNT", "description": "An account belonging to the voting wallet that is opened on a vote. Used to transfer the voting tx fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_CHOICE": {"name": "VOTE_CHOICE", "description": "How the user voted on the proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_RANK": {"name": "VOTE_RANK", "description": "The order of a user's preferred choices when more than one vote option is available", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_WEIGHT": {"name": "VOTE_WEIGHT", "description": "The percent of voting power committed to the vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\governance\\silver__proposal_votes_realms.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575623.2660022, "compiled_sql": "\n\nWITH vote_programs AS (\n    SELECT \n        address\n    FROM flipside_prod_db.silver_crosschain.address_labels \n    WHERE \n        blockchain = 'solana'\n        AND project_name = 'realms'\n),  \nvote_txs AS (\n    SELECT\n        block_timestamp, \n        block_id, \n        tx_id,\n        succeeded, \n        e.index, \n        program_id, \n        instruction :accounts[0] :: STRING AS realms_id, \n        instruction :accounts[2] :: STRING AS proposal, \n        instruction :accounts[5] :: STRING AS voter, \n        instruction :accounts[6] :: STRING AS vote_account, \n        _inserted_timestamp\n    FROM \n        SOLANA_DEV.silver.events  e \n  \n    INNER JOIN vote_programs v\n    ON e.program_id = v.address\n\n    WHERE \n        block_timestamp :: date >= '2022-04-28'\n        AND instruction :data :: STRING <> 'Q'\n    \n    \n    AND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.proposal_votes_realms\n    )\n    \n), \nb AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.index,\n        l.value :: STRING AS log_message,\n        CASE\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\n            WHEN l.value :: STRING LIKE '%success' THEN -1\n            ELSE 0\n        END AS cnt,\n        SUM(cnt) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS event_cumsum\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                vote_txs \n        ) v\n        ON t.tx_id = v.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n\n\nWHERE _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.proposal_votes_realms\n)\n\n),\nC AS (\n    SELECT\n        b.*,\n        LAG(\n            event_cumsum,\n            1\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS prev_event_cumsum\n    FROM\n        b\n),\ntx_logs AS (\n    SELECT\n        C.tx_id,\n        C.succeeded,\n        C.index AS log_index,\n        C.log_message,\n        conditional_true_event(\n            prev_event_cumsum = 0\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS event_index\n    FROM\n        C\n), \ncreate_vote_logs AS (\n    SELECT \n        * \n    FROM \n        tx_logs\n    WHERE \n        log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote %'\n)\n\nSELECT \n    v.block_timestamp, \n    v.block_id,\n    v.tx_id, \n    v.succeeded,\n    v.index, \n    v.program_id, \n    realms_id, \n    proposal, \n    voter, \n    vote_account, \n    CASE WHEN (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Deny }')\n    OR (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: No }') THEN \n        'NO'\n    WHEN (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Approve%') \n    OR (log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Yes }') THEN \n        'YES'\n    ELSE \n        'ABSTAIN'\n    END AS vote_choice,\n    CASE WHEN log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Approve%' THEN \n        TRY_CAST(split_part(split_part(split_part(split_part(log_message :: STRING, '{', 3), '}', 1), ',', 1), ':', 2) AS INTEGER)\n    ELSE \n        0\n    END AS vote_rank, \n    CASE WHEN log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Approve%' THEN \n        TRY_CAST(split_part(split_part(split_part(split_part(log_message:: STRING, '{', 3), '}', 1), ',', 2), ':', 2) AS INTEGER)\n    WHEN log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CastVote { vote: Yes }' THEN \n        100\n    ELSE \n        0\n    END AS vote_weight,\n    _inserted_timestamp\nFROM vote_txs v \n\nINNER JOIN create_vote_logs l \nON l.tx_id = v.tx_id\nAND l.event_index = v.index", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.proposal_votes_realms"}, "model.solana_models.silver__gov_actions_marinade": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        DISTINCT locker_account AS locker_account\r\n    FROM\r\n        {{ ref ('silver__gov_actions_marinade_tmp') }}\r\n),\r\nmore_locks AS (\r\n    SELECT\r\n        DISTINCT tx_id\r\n    FROM\r\n        {{ ref ('silver__events') }}\r\n    WHERE\r\n        program_id = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\r\n        AND event_type IN (\r\n            'transfer',\r\n            'transferChecked'\r\n        )\r\n        AND instruction :parsed :info :destination IN (\r\n            SELECT\r\n                locker_account\r\n            FROM\r\n                base\r\n        )\r\n    EXCEPT\r\n    SELECT\r\n        tx_id\r\n    FROM\r\n        {{ ref ('silver__gov_actions_marinade_tmp') }}\r\n)\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    tx_id,\r\n    succeeded,\r\n    signer,\r\n    locker_account,\r\n    locker_nft,\r\n    mint,\r\n    action,\r\n    amount,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref ('silver__gov_actions_marinade_tmp') }}\r\nWHERE\r\n    succeeded\r\n    AND signer IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nUNION ALL\r\nSELECT\r\n    e.block_id,\r\n    e.block_timestamp,\r\n    e.tx_id,\r\n    t.succeeded,\r\n    e.instruction :parsed :info :authority :: STRING AS signer,\r\n    e.instruction :parsed :info :destination :: STRING AS locker_account,\r\n    NULL AS locker_nft,\r\n    'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey' AS mint,\r\n    'UPDATE LOCK' AS action,\r\n    (\r\n        e.instruction :parsed :info :tokenAmount :amount * pow(\r\n            10,\r\n            -9\r\n        )\r\n    ) :: FLOAT AS amount,\r\n    e._inserted_timestamp\r\nFROM\r\n    {{ ref ('silver__events') }}\r\n    e\r\n    INNER JOIN more_locks ml\r\n    ON ml.tx_id = e.tx_id\r\n    INNER JOIN {{ ref ('silver__transactions') }}\r\n    t\r\n    ON t.tx_id = e.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    e._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    AND t._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\nWHERE\r\n    e.block_timestamp :: DATE >= '2022-04-01'\r\n    AND t.block_timestamp :: date >= '2022-04-01'\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__events", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "governance", "silver__gov_actions_marinade"], "unique_id": "model.solana_models.silver__gov_actions_marinade", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\governance\\silver__gov_actions_marinade.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.sql", "name": "silver__gov_actions_marinade", "alias": "gov_actions_marinade", "checksum": {"name": "sha256", "checksum": "ef0b751b839efbe5856059c981cc94e916daa823202f9642f04e76d1dfda6dee"}, "tags": [], "refs": [["silver__gov_actions_marinade_tmp"], ["silver__events"], ["silver__gov_actions_marinade_tmp"], ["silver__gov_actions_marinade_tmp"], ["silver__events"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_ACCOUNT": {"name": "LOCKER_ACCOUNT", "description": "Account holding tokens for governance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_NFT": {"name": "LOCKER_NFT", "description": "NFT representing tokens for governance.  This is only available for certain types of governance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Mint being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "NFT mint associated with the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\governance\\silver__gov_actions_marinade.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575623.2289395, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        DISTINCT locker_account AS locker_account\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n),\nmore_locks AS (\n    SELECT\n        DISTINCT tx_id\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n        AND event_type IN (\n            'transfer',\n            'transferChecked'\n        )\n        AND instruction :parsed :info :destination IN (\n            SELECT\n                locker_account\n            FROM\n                base\n        )\n    EXCEPT\n    SELECT\n        tx_id\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    succeeded,\n    signer,\n    locker_account,\n    locker_nft,\n    mint,\n    action,\n    amount,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.gov_actions_marinade_tmp\nWHERE\n    succeeded\n    AND signer IS NOT NULL\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade\n)\n\nUNION ALL\nSELECT\n    e.block_id,\n    e.block_timestamp,\n    e.tx_id,\n    t.succeeded,\n    e.instruction :parsed :info :authority :: STRING AS signer,\n    e.instruction :parsed :info :destination :: STRING AS locker_account,\n    NULL AS locker_nft,\n    'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey' AS mint,\n    'UPDATE LOCK' AS action,\n    (\n        e.instruction :parsed :info :tokenAmount :amount * pow(\n            10,\n            -9\n        )\n    ) :: FLOAT AS amount,\n    e._inserted_timestamp\nFROM\n    SOLANA_DEV.silver.events\n    e\n    INNER JOIN more_locks ml\n    ON ml.tx_id = e.tx_id\n    INNER JOIN SOLANA_DEV.silver.transactions\n    t\n    ON t.tx_id = e.tx_id\n\n\nWHERE\n    e._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.gov_actions_marinade\n    )\n    AND t._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.gov_actions_marinade\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.gov_actions_marinade"}, "model.solana_models.silver__nft_mints_tmp": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, mint, mint_currency)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH mint_tx_tmp AS (\r\n\r\n    SELECT\r\n        t.tx_id,\r\n        t.signers [0] :: STRING AS signer,\r\n        CASE\r\n            WHEN ARRAY_SIZE(\r\n                t.signers\r\n            ) > 1 THEN t.signers [1] :: STRING\r\n            ELSE NULL\r\n        END AS potential_nft_mint,\r\n        t.succeeded,\r\n        silver.udf_get_all_inner_instruction_events(\r\n            inner_instruction :instructions\r\n        ) AS inner_instruction_events\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n    WHERE\r\n        (event_type IN ('mintTo', 'initializeMint')\r\n        OR (program_id = 'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb'\r\n        AND (ARRAY_CONTAINS('mintTo' :: variant, inner_instruction_events)\r\n        OR ARRAY_CONTAINS('initializeMint' :: variant, inner_instruction_events))))\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nmint_tx AS (\r\n    SELECT\r\n        DISTINCT tx_id,\r\n        signer,\r\n        potential_nft_mint,\r\n        succeeded\r\n    FROM\r\n        mint_tx_tmp\r\n),\r\ntxs_tmp AS (\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        t.tx_id,\r\n        t.succeeded AS succeeded,\r\n        t.signer,\r\n        t.potential_nft_mint,\r\n        program_id,\r\n        e.index,\r\n        i.index AS inner_index,\r\n        COALESCE(\r\n            i.value :parsed :info :lamports :: INTEGER,\r\n            i.value :parsed :info :amount :: INTEGER\r\n        ) AS sales_amount,\r\n        LAST_VALUE(\r\n            i.value :parsed :info :mint :: STRING ignore nulls\r\n        ) over (\r\n            PARTITION BY t.tx_id,\r\n            e.index\r\n            ORDER BY\r\n                inner_index\r\n        ) AS nft,\r\n        LAST_VALUE(\r\n            i.value :parsed :info :multisigAuthority :: STRING ignore nulls\r\n        ) over (\r\n            PARTITION BY t.tx_id,\r\n            e.index\r\n            ORDER BY\r\n                inner_index\r\n        ) AS wallet,\r\n        i.value :parsed :info :authority :: STRING AS authority,\r\n        i.value :parsed :info :source :: STRING AS source,\r\n        i.value: parsed :info :destination :: STRING AS destination,\r\n        CASE\r\n            -- marindate specific\r\n            WHEN e.inner_instruction :instructions [0] :programId :: STRING = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' THEN e.instruction :accounts [3] :: STRING\r\n            ELSE NULL\r\n        END AS update_authority,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN mint_tx t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n    WHERE\r\n        e.event_type IS NULL\r\n        AND (\r\n            ARRAY_CONTAINS(\r\n                'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' :: variant,\r\n                e.instruction :accounts :: ARRAY\r\n            )\r\n            OR e.inner_instruction :instructions [0] :programId :: STRING = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\r\n            OR e.program_id IN (\r\n                'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n                'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb'\r\n            )\r\n        )\r\n        AND t.succeeded = TRUE\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ntxs AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        txs_tmp\r\n    WHERE\r\n        (\r\n            program_id NOT IN (\r\n                '342zaQ1jgejKvPMqcnZejuZ845NtnfkpGvo9j15gDmEL',\r\n                'TTTi5K2DS4qD95yyvvWht53qFWT8ff1Hp3xKsrp1QQf'\r\n            )\r\n            OR (\r\n                program_id IN (\r\n                    '342zaQ1jgejKvPMqcnZejuZ845NtnfkpGvo9j15gDmEL',\r\n                    'TTTi5K2DS4qD95yyvvWht53qFWT8ff1Hp3xKsrp1QQf'\r\n                )\r\n                AND wallet IS NULL\r\n            )\r\n        )\r\n),\r\ntransfers AS (\r\n    SELECT\r\n        tr.*\r\n    FROM\r\n        {{ ref('silver__transfers') }}\r\n        tr\r\n        INNER JOIN mint_tx t\r\n        ON t.tx_id = tr.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    tr._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n),\r\nmint_currency AS (\r\n    SELECT\r\n        DISTINCT t.tx_id,\r\n        p.mint AS mint_paid,\r\n        p.account,\r\n        p.decimal\r\n    FROM\r\n        txs t\r\n        INNER JOIN {{ ref('silver___post_token_balances') }}\r\n        p\r\n        ON t.tx_id = p.tx_id\r\n    WHERE\r\n        source = p.account\r\n\r\n{% if is_incremental() %}\r\nAND p._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\npre_final AS (\r\n    SELECT\r\n        block_timestamp,\r\n        block_id,\r\n        t.tx_id,\r\n        succeeded,\r\n        program_id,\r\n        CASE\r\n            WHEN program_id = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' THEN COALESCE(\r\n                signer,\r\n                wallet\r\n            )\r\n            ELSE COALESCE(\r\n                wallet,\r\n                signer\r\n            )\r\n        END AS purchaser,\r\n        CASE\r\n            WHEN update_authority = '6jG2QcwaJPFS8Y9SzgH2kfKPj6ERhLi9RVtH8kRahj4j' THEN -- marinade nfts are \"free\"\r\n            0\r\n            ELSE SUM(sales_amount / pow(10, COALESCE(p.decimal, 9)))\r\n        END AS mint_price,\r\n        COALESCE(\r\n            p.mint_paid,\r\n            'So11111111111111111111111111111111111111111'\r\n        ) AS mint_currency,\r\n        COALESCE(\r\n            nft,\r\n            potential_nft_mint\r\n        ) AS mint,\r\n        ingested_at,\r\n        _inserted_timestamp\r\n    FROM\r\n        txs t\r\n        LEFT OUTER JOIN mint_currency p\r\n        ON p.tx_id = t.tx_id\r\n        AND p.account = t.source\r\n    WHERE\r\n        sales_amount IS NOT NULL\r\n        AND destination IS NOT NULL\r\n    GROUP BY\r\n        block_timestamp,\r\n        block_id,\r\n        t.tx_id,\r\n        program_id,\r\n        purchaser,\r\n        succeeded,\r\n        mint_currency,\r\n        mint,\r\n        update_authority,\r\n        ingested_at,\r\n        _inserted_timestamp\r\n),\r\npre_pre_final AS (\r\n    SELECT\r\n        pf.block_timestamp,\r\n        pf.block_id,\r\n        pf.tx_id,\r\n        pf.program_id,\r\n        pf.purchaser,\r\n        pf.succeeded,\r\n        CASE\r\n            WHEN tr.tx_id IS NOT NULL\r\n            AND mint_currency = 'So11111111111111111111111111111111111111111' THEN mint_price + tr.amount\r\n            ELSE mint_price\r\n        END AS mint_price,\r\n        pf.mint_currency,\r\n        pf.mint,\r\n        pf.ingested_at,\r\n        pf._inserted_timestamp\r\n    FROM\r\n        pre_final pf\r\n        LEFT OUTER JOIN transfers tr\r\n        ON tr.tx_id = pf.tx_id\r\n        AND tr.tx_from = pf.purchaser\r\n        AND pf.program_id = 'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb'\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    pre_pre_final\r\nWHERE\r\n    program_id <> 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\r\nUNION\r\nSELECT\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    program_id,\r\n    purchaser,\r\n    succeeded,\r\n    SUM(mint_price) over (\r\n        PARTITION BY tx_id,\r\n        purchaser,\r\n        mint,\r\n        mint_currency\r\n    ) AS mint_price,\r\n    mint_currency,\r\n    mint,\r\n    ingested_at,\r\n    _inserted_timestamp\r\nFROM\r\n    pre_pre_final\r\nWHERE\r\n    program_id = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\r\n    AND tx_id NOT IN (\r\n        SELECT\r\n            DISTINCT tx_id\r\n        FROM\r\n            pre_pre_final\r\n        WHERE\r\n            program_id <> 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\r\n    )\r\n    AND mint IS NOT NULL qualify(ROW_NUMBER() over (PARTITION BY tx_id, purchaser, mint, mint_currency\r\nORDER BY\r\n    block_id)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events", "model.solana_models.silver__transfers", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, mint, mint_currency)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_mints_tmp"], "unique_id": "model.solana_models.silver__nft_mints_tmp", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_mints_tmp.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.sql", "name": "silver__nft_mints_tmp", "alias": "nft_mints_tmp", "checksum": {"name": "sha256", "checksum": "9c9ab0c0abaecba54b4a63ec729ab5e1cddddacf3bbaf650940d5c0dcfb30cbc"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"], ["silver__transfers"], ["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_CURRENCY": {"name": "MINT_CURRENCY", "description": "Currency used to pay for the NFT mint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "Price that it cost to mint the NFT in SOL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_mints_tmp.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint, mint_currency)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.370327, "compiled_sql": "\n\nWITH mint_tx_tmp AS (\n\n    SELECT\n        t.tx_id,\n        t.signers [0] :: STRING AS signer,\n        CASE\n            WHEN ARRAY_SIZE(\n                t.signers\n            ) > 1 THEN t.signers [1] :: STRING\n            ELSE NULL\n        END AS potential_nft_mint,\n        t.succeeded,\n        silver.udf_get_all_inner_instruction_events(\n            inner_instruction :instructions\n        ) AS inner_instruction_events\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        (event_type IN ('mintTo', 'initializeMint')\n        OR (program_id = 'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb'\n        AND (ARRAY_CONTAINS('mintTo' :: variant, inner_instruction_events)\n        OR ARRAY_CONTAINS('initializeMint' :: variant, inner_instruction_events))))\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints_tmp\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints_tmp\n)\n\n),\nmint_tx AS (\n    SELECT\n        DISTINCT tx_id,\n        signer,\n        potential_nft_mint,\n        succeeded\n    FROM\n        mint_tx_tmp\n),\ntxs_tmp AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        t.tx_id,\n        t.succeeded AS succeeded,\n        t.signer,\n        t.potential_nft_mint,\n        program_id,\n        e.index,\n        i.index AS inner_index,\n        COALESCE(\n            i.value :parsed :info :lamports :: INTEGER,\n            i.value :parsed :info :amount :: INTEGER\n        ) AS sales_amount,\n        LAST_VALUE(\n            i.value :parsed :info :mint :: STRING ignore nulls\n        ) over (\n            PARTITION BY t.tx_id,\n            e.index\n            ORDER BY\n                inner_index\n        ) AS nft,\n        LAST_VALUE(\n            i.value :parsed :info :multisigAuthority :: STRING ignore nulls\n        ) over (\n            PARTITION BY t.tx_id,\n            e.index\n            ORDER BY\n                inner_index\n        ) AS wallet,\n        i.value :parsed :info :authority :: STRING AS authority,\n        i.value :parsed :info :source :: STRING AS source,\n        i.value: parsed :info :destination :: STRING AS destination,\n        CASE\n            -- marindate specific\n            WHEN e.inner_instruction :instructions [0] :programId :: STRING = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' THEN e.instruction :accounts [3] :: STRING\n            ELSE NULL\n        END AS update_authority,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN mint_tx t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        e.event_type IS NULL\n        AND (\n            ARRAY_CONTAINS(\n                'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' :: variant,\n                e.instruction :accounts :: ARRAY\n            )\n            OR e.inner_instruction :instructions [0] :programId :: STRING = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n            OR e.program_id IN (\n                'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n                'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb'\n            )\n        )\n        AND t.succeeded = TRUE\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints_tmp\n)\n\n),\ntxs AS (\n    SELECT\n        *\n    FROM\n        txs_tmp\n    WHERE\n        (\n            program_id NOT IN (\n                '342zaQ1jgejKvPMqcnZejuZ845NtnfkpGvo9j15gDmEL',\n                'TTTi5K2DS4qD95yyvvWht53qFWT8ff1Hp3xKsrp1QQf'\n            )\n            OR (\n                program_id IN (\n                    '342zaQ1jgejKvPMqcnZejuZ845NtnfkpGvo9j15gDmEL',\n                    'TTTi5K2DS4qD95yyvvWht53qFWT8ff1Hp3xKsrp1QQf'\n                )\n                AND wallet IS NULL\n            )\n        )\n),\ntransfers AS (\n    SELECT\n        tr.*\n    FROM\n        SOLANA_DEV.silver.transfers\n        tr\n        INNER JOIN mint_tx t\n        ON t.tx_id = tr.tx_id\n\n\nWHERE\n    tr._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.nft_mints_tmp\n    )\n\n),\nmint_currency AS (\n    SELECT\n        DISTINCT t.tx_id,\n        p.mint AS mint_paid,\n        p.account,\n        p.decimal\n    FROM\n        txs t\n        INNER JOIN SOLANA_DEV.silver._post_token_balances\n        p\n        ON t.tx_id = p.tx_id\n    WHERE\n        source = p.account\n\n\nAND p._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_mints_tmp\n)\n\n),\npre_final AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        t.tx_id,\n        succeeded,\n        program_id,\n        CASE\n            WHEN program_id = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' THEN COALESCE(\n                signer,\n                wallet\n            )\n            ELSE COALESCE(\n                wallet,\n                signer\n            )\n        END AS purchaser,\n        CASE\n            WHEN update_authority = '6jG2QcwaJPFS8Y9SzgH2kfKPj6ERhLi9RVtH8kRahj4j' THEN -- marinade nfts are \"free\"\n            0\n            ELSE SUM(sales_amount / pow(10, COALESCE(p.decimal, 9)))\n        END AS mint_price,\n        COALESCE(\n            p.mint_paid,\n            'So11111111111111111111111111111111111111111'\n        ) AS mint_currency,\n        COALESCE(\n            nft,\n            potential_nft_mint\n        ) AS mint,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        txs t\n        LEFT OUTER JOIN mint_currency p\n        ON p.tx_id = t.tx_id\n        AND p.account = t.source\n    WHERE\n        sales_amount IS NOT NULL\n        AND destination IS NOT NULL\n    GROUP BY\n        block_timestamp,\n        block_id,\n        t.tx_id,\n        program_id,\n        purchaser,\n        succeeded,\n        mint_currency,\n        mint,\n        update_authority,\n        ingested_at,\n        _inserted_timestamp\n),\npre_pre_final AS (\n    SELECT\n        pf.block_timestamp,\n        pf.block_id,\n        pf.tx_id,\n        pf.program_id,\n        pf.purchaser,\n        pf.succeeded,\n        CASE\n            WHEN tr.tx_id IS NOT NULL\n            AND mint_currency = 'So11111111111111111111111111111111111111111' THEN mint_price + tr.amount\n            ELSE mint_price\n        END AS mint_price,\n        pf.mint_currency,\n        pf.mint,\n        pf.ingested_at,\n        pf._inserted_timestamp\n    FROM\n        pre_final pf\n        LEFT OUTER JOIN transfers tr\n        ON tr.tx_id = pf.tx_id\n        AND tr.tx_from = pf.purchaser\n        AND pf.program_id = 'CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb'\n)\nSELECT\n    *\nFROM\n    pre_pre_final\nWHERE\n    program_id <> 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\nUNION\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    program_id,\n    purchaser,\n    succeeded,\n    SUM(mint_price) over (\n        PARTITION BY tx_id,\n        purchaser,\n        mint,\n        mint_currency\n    ) AS mint_price,\n    mint_currency,\n    mint,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    pre_pre_final\nWHERE\n    program_id = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n    AND tx_id NOT IN (\n        SELECT\n            DISTINCT tx_id\n        FROM\n            pre_pre_final\n        WHERE\n            program_id <> 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n    )\n    AND mint IS NOT NULL qualify(ROW_NUMBER() over (PARTITION BY tx_id, purchaser, mint, mint_currency\nORDER BY\n    block_id)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_mints_tmp"}, "model.solana_models.silver__gov_actions_saber": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH post_token_balances AS (\r\n\r\n    SELECT\r\n        tx_id,\r\n        account,\r\n        mint,\r\n        DECIMAL,\r\n        owner\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n    WHERE\r\n        mint = 'Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND block_timestamp :: DATE >= '2022-01-01' -- no saber gov before this date\r\n{% endif %}\r\n),\r\nthird_party_programs AS (\r\n    SELECT\r\n        DISTINCT tx_id\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e,\r\n        TABLE(FLATTEN(inner_instruction :instructions)) ii\r\n    WHERE\r\n        COALESCE(\r\n            ii.value :programId :: STRING,\r\n            ''\r\n        ) = 'LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND block_timestamp :: DATE >= '2022-01-14' -- no saber votes before this date\r\n{% endif %}\r\n),\r\nsaber_gov_lock_events AS (\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        e.tx_id,\r\n        e.index,\r\n        e.program_id,\r\n        e.instruction :accounts [3] :: STRING AS lock_signer,\r\n        e.instruction :accounts [2] :: STRING AS exit_signer,\r\n        ii.value :parsed :info :destination :: STRING AS destination,\r\n        ii.value :parsed :info :source :: STRING AS source,\r\n        ii.value :parsed :info :amount :: NUMBER AS amount,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e,\r\n        TABLE(FLATTEN(inner_instruction :instructions)) ii\r\n    WHERE\r\n        (\r\n            program_id = 'LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw'\r\n            OR e.tx_id IN (\r\n                SELECT\r\n                    tx_id\r\n                FROM\r\n                    third_party_programs\r\n            )\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-01-14' -- no saber votes before this date\r\n    AND ii.block_timestamp :: DATE >= '2022-01-14'\r\n{% endif %}\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        t.tx_id,\r\n        t.succeeded,\r\n        l.value :: STRING AS message,\r\n        signers,\r\n        CASE\r\n            WHEN l.value LIKE 'Program log: Instruction: Exit%' THEN 'EXIT'\r\n            WHEN l.value LIKE 'Program log: Instruction: Lock%'\r\n            OR l.value LIKE 'Program log: Instruction: RefreshLock%' THEN 'LOCK'\r\n            ELSE NULL\r\n        END AS action,\r\n        conditional_true_event(\r\n            l.value LIKE 'Program log: Instruction:%'\r\n        ) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index\r\n        ) - 1 AS event_index\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT tx_id\r\n            FROM\r\n                saber_gov_lock_events\r\n        ) g\r\n        ON t.tx_id = g.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n    WHERE\r\n        l.value :: STRING LIKE 'Program log: Instruction: %'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND t.block_timestamp :: DATE >= '2022-01-14' -- no saber votes before this date\r\n{% endif %}\r\n)\r\nSELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    l.succeeded,\r\n    CASE\r\n        WHEN e.program_id IN (\r\n            'DeLockyVe4ShduKranroxPUDLQYHxz4jgWnUqa1YpNTd',\r\n            'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw'\r\n        ) THEN l.signers [0] :: STRING\r\n        WHEN l.action = 'EXIT' THEN e.exit_signer\r\n        ELSE e.lock_signer\r\n    END AS signer,\r\n    CASE\r\n        WHEN l.action = 'EXIT' THEN e.source\r\n        ELSE e.destination\r\n    END AS locker_account,\r\n    p.owner AS escrow_account,\r\n    p.mint,\r\n    l.action,\r\n    e.amount / pow(\r\n        10,\r\n        p.decimal\r\n    ) AS amount,\r\n    e._inserted_timestamp\r\nFROM\r\n    saber_gov_lock_events e\r\n    INNER JOIN post_token_balances p\r\n    ON p.tx_id = e.tx_id\r\n    AND p.account = e.destination\r\n    LEFT OUTER JOIN tx_logs l\r\n    ON l.tx_id = e.tx_id\r\n    AND l.event_index = e.index\r\nWHERE\r\n    action IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "governance", "silver__gov_actions_saber"], "unique_id": "model.solana_models.silver__gov_actions_saber", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\governance\\silver__gov_actions_saber.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.sql", "name": "silver__gov_actions_saber", "alias": "gov_actions_saber", "checksum": {"name": "sha256", "checksum": "e472c4737c476cb4b17369af64d56dce878ef2edc41bb6b46353acbcf662e2ef"}, "tags": [], "refs": [["silver___post_token_balances"], ["silver__events"], ["silver__events"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_ACCOUNT": {"name": "LOCKER_ACCOUNT", "description": "Account holding tokens for governance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ESCROW_ACCOUNT": {"name": "ESCROW_ACCOUNT", "description": "Account owner of the locker account for governance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Mint being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "NFT mint associated with the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\governance\\silver__gov_actions_saber.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert"}, "created_at": 1662575623.038713, "compiled_sql": "\n\nWITH post_token_balances AS (\n\n    SELECT\n        tx_id,\n        account,\n        mint,\n        DECIMAL,\n        owner\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n    WHERE\n        mint = 'Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_saber\n)\n\n),\nthird_party_programs AS (\n    SELECT\n        DISTINCT tx_id\n    FROM\n        SOLANA_DEV.silver.events\n        e,\n        TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) = 'LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_saber\n)\n\n),\nsaber_gov_lock_events AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        e.index,\n        e.program_id,\n        e.instruction :accounts [3] :: STRING AS lock_signer,\n        e.instruction :accounts [2] :: STRING AS exit_signer,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount :: NUMBER AS amount,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e,\n        TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        (\n            program_id = 'LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw'\n            OR e.tx_id IN (\n                SELECT\n                    tx_id\n                FROM\n                    third_party_programs\n            )\n        )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_saber\n)\n\n),\ntx_logs AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.value :: STRING AS message,\n        signers,\n        CASE\n            WHEN l.value LIKE 'Program log: Instruction: Exit%' THEN 'EXIT'\n            WHEN l.value LIKE 'Program log: Instruction: Lock%'\n            OR l.value LIKE 'Program log: Instruction: RefreshLock%' THEN 'LOCK'\n            ELSE NULL\n        END AS action,\n        conditional_true_event(\n            l.value LIKE 'Program log: Instruction:%'\n        ) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index\n        ) - 1 AS event_index\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                saber_gov_lock_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        l.value :: STRING LIKE 'Program log: Instruction: %'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_saber\n)\n\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    CASE\n        WHEN e.program_id IN (\n            'DeLockyVe4ShduKranroxPUDLQYHxz4jgWnUqa1YpNTd',\n            'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw'\n        ) THEN l.signers [0] :: STRING\n        WHEN l.action = 'EXIT' THEN e.exit_signer\n        ELSE e.lock_signer\n    END AS signer,\n    CASE\n        WHEN l.action = 'EXIT' THEN e.source\n        ELSE e.destination\n    END AS locker_account,\n    p.owner AS escrow_account,\n    p.mint,\n    l.action,\n    e.amount / pow(\n        10,\n        p.decimal\n    ) AS amount,\n    e._inserted_timestamp\nFROM\n    saber_gov_lock_events e\n    INNER JOIN post_token_balances p\n    ON p.tx_id = e.tx_id\n    AND p.account = e.destination\n    LEFT OUTER JOIN tx_logs l\n    ON l.tx_id = e.tx_id\n    AND l.event_index = e.index\nWHERE\n    action IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.gov_actions_saber"}, "model.solana_models.silver__nft_sales_magic_eden_v2": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH txs AS (\r\n\r\n    SELECT\r\n        e.tx_id,\r\n        t.succeeded,\r\n        t.signers[0] :: STRING as signer, \r\n        MAX(INDEX) AS max_event_index\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n    WHERE\r\n        program_id = 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K' -- Magic Eden V2 Program ID\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-01-08' -- no ME V2 contract before this date\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2, \r\n    3\r\nHAVING\r\n    COUNT(\r\n        e.tx_id\r\n    ) >= 2\r\n),\r\nbase_tmp AS (\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.index AS event_index,\r\n        i.index AS inner_index,\r\n        e.program_id,\r\n        COALESCE(\r\n            i.value :parsed :info :lamports :: NUMBER,\r\n            0\r\n        ) AS amount,\r\n        instruction :accounts [7] :: STRING AS nft_account,\r\n        instruction :accounts [0] :: STRING AS purchaser,\r\n        i.value :parsed :type :: STRING AS inner_instruction_type,\r\n        LAG(inner_instruction_type) over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                inner_index\r\n        ) AS preceding_inner_instruction_type,\r\n        -- some mints do not map to a token account because of post purchase transfers within same transaction...need to use this when it is available\r\n        LAST_VALUE(\r\n            i.value :parsed :info :mint :: STRING ignore nulls\r\n        ) over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                inner_index\r\n        ) AS nft_account_mint,\r\n        ingested_at,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN txs t\r\n        ON t.tx_id = e.tx_id\r\n        AND t.max_event_index = e.index\r\n        AND ARRAY_SIZE(\r\n            e.inner_instruction :instructions\r\n        ) > 1\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n    WHERE\r\n        (\r\n            (\r\n                amount <> 0\r\n                AND inner_instruction_type = 'transfer'\r\n            )\r\n            OR inner_instruction_type = 'create'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-01-08' -- no ME V2 contract before this date\r\n{% endif %}\r\n),\r\nsellers AS (\r\n     SELECT\r\n        e.tx_id,\r\n        CASE WHEN signer <> instruction :accounts [1] :: STRING THEN \r\n            instruction :accounts [6] :: STRING\r\n        ELSE \r\n            instruction :accounts [1] :: STRING END AS seller\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN txs t\r\n        ON t.tx_id = e.tx_id\r\n        AND t.max_event_index = e.index\r\n        AND ARRAY_SIZE(\r\n            e.inner_instruction :instructions\r\n        ) > 1\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n    WHERE \r\n        i.value :program :: STRING = 'spl-token'\r\n    AND i.value :programId :: STRING = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\r\n    AND i.value :parsed :type :: STRING = 'transfer'\r\n\r\n{% if is_incremental() %}\r\nAND ingested_at :: DATE >= CURRENT_DATE - 2\r\n{% else %}\r\n    AND e.block_timestamp:: DATE >= '2022-01-08' -- no ME V2 contract before this date\r\n{% endif %}\r\n\r\n),\r\nbase AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        base_tmp\r\n    WHERE\r\n        inner_instruction_type = 'transfer'\r\n        AND COALESCE(\r\n            preceding_inner_instruction_type,\r\n            ''\r\n        ) <> 'create'\r\n),\r\npost_token_balances AS (\r\n    SELECT\r\n        DISTINCT tx_id,\r\n        account,\r\n        mint\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\n    WHERE block_timestamp :: DATE >= '2022-01-08' -- no ME V2 contract before this date\r\n{% endif %}\r\n)\r\nSELECT\r\n    b.block_timestamp,\r\n    b.block_id,\r\n    b.tx_id,\r\n    b.succeeded,\r\n    b.program_id,\r\n    COALESCE(\r\n        b.nft_account_mint,\r\n        p.mint\r\n    ) AS mint,\r\n    b.purchaser,\r\n    ss.seller, \r\n    SUM(\r\n        b.amount\r\n    ) / pow(\r\n        10,\r\n        9\r\n    ) AS sales_amount,\r\n    b.ingested_at,\r\n    b._inserted_timestamp\r\nFROM\r\n    base b\r\n    LEFT OUTER JOIN post_token_balances p\r\n    ON p.tx_id = b.tx_id\r\n    AND p.account = b.nft_account\r\n    LEFT OUTER JOIN sellers ss\r\n    ON ss.tx_id = b.tx_id\r\nGROUP BY\r\n    b.block_timestamp,\r\n    b.block_id,\r\n    b.tx_id,\r\n    b.succeeded,\r\n    b.program_id,\r\n    COALESCE(\r\n        b.nft_account_mint,\r\n        p.mint\r\n    ),\r\n    b.purchaser,\r\n    ss.seller, \r\n    b.ingested_at, \r\n    b._inserted_timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_magic_eden_v2"], "unique_id": "model.solana_models.silver__nft_sales_magic_eden_v2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_magic_eden_v2.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.sql", "name": "silver__nft_sales_magic_eden_v2", "alias": "nft_sales_magic_eden_v2", "checksum": {"name": "sha256", "checksum": "fe73b2e873dfda0d3a9bec80d47e4fb143bf2b59c633e2c4bc8c450091e71f57"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"], ["silver__events"], ["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.471895, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        e.tx_id,\n        t.succeeded,\n        t.signers[0] :: STRING as signer, \n        MAX(INDEX) AS max_event_index\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        program_id = 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K' -- Magic Eden V2 Program ID\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_magic_eden_v2\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_magic_eden_v2\n)\n\nGROUP BY\n    1,\n    2, \n    3\nHAVING\n    COUNT(\n        e.tx_id\n    ) >= 2\n),\nbase_tmp AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        t.succeeded,\n        e.index AS event_index,\n        i.index AS inner_index,\n        e.program_id,\n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER,\n            0\n        ) AS amount,\n        instruction :accounts [7] :: STRING AS nft_account,\n        instruction :accounts [0] :: STRING AS purchaser,\n        i.value :parsed :type :: STRING AS inner_instruction_type,\n        LAG(inner_instruction_type) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                inner_index\n        ) AS preceding_inner_instruction_type,\n        -- some mints do not map to a token account because of post purchase transfers within same transaction...need to use this when it is available\n        LAST_VALUE(\n            i.value :parsed :info :mint :: STRING ignore nulls\n        ) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                inner_index\n        ) AS nft_account_mint,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN txs t\n        ON t.tx_id = e.tx_id\n        AND t.max_event_index = e.index\n        AND ARRAY_SIZE(\n            e.inner_instruction :instructions\n        ) > 1\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        (\n            (\n                amount <> 0\n                AND inner_instruction_type = 'transfer'\n            )\n            OR inner_instruction_type = 'create'\n        )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_magic_eden_v2\n)\n\n),\nsellers AS (\n     SELECT\n        e.tx_id,\n        CASE WHEN signer <> instruction :accounts [1] :: STRING THEN \n            instruction :accounts [6] :: STRING\n        ELSE \n            instruction :accounts [1] :: STRING END AS seller\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN txs t\n        ON t.tx_id = e.tx_id\n        AND t.max_event_index = e.index\n        AND ARRAY_SIZE(\n            e.inner_instruction :instructions\n        ) > 1\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE \n        i.value :program :: STRING = 'spl-token'\n    AND i.value :programId :: STRING = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n    AND i.value :parsed :type :: STRING = 'transfer'\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n\n),\nbase AS (\n    SELECT\n        *\n    FROM\n        base_tmp\n    WHERE\n        inner_instruction_type = 'transfer'\n        AND COALESCE(\n            preceding_inner_instruction_type,\n            ''\n        ) <> 'create'\n),\npost_token_balances AS (\n    SELECT\n        DISTINCT tx_id,\n        account,\n        mint\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.nft_sales_magic_eden_v2\n    )\n\n)\nSELECT\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    COALESCE(\n        b.nft_account_mint,\n        p.mint\n    ) AS mint,\n    b.purchaser,\n    ss.seller, \n    SUM(\n        b.amount\n    ) / pow(\n        10,\n        9\n    ) AS sales_amount,\n    b.ingested_at,\n    b._inserted_timestamp\nFROM\n    base b\n    LEFT OUTER JOIN post_token_balances p\n    ON p.tx_id = b.tx_id\n    AND p.account = b.nft_account\n    LEFT OUTER JOIN sellers ss\n    ON ss.tx_id = b.tx_id\nGROUP BY\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    COALESCE(\n        b.nft_account_mint,\n        p.mint\n    ),\n    b.purchaser,\n    ss.seller, \n    b.ingested_at, \n    b._inserted_timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_magic_eden_v2"}, "model.solana_models.silver__swaps_saber_dex": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH saber_dex_txs AS (\r\n\r\n    SELECT\r\n        DISTINCT t.block_timestamp,\r\n        t.block_id,\r\n        t.tx_id,\r\n        t.succeeded,\r\n        t.signers,\r\n        e.program_id\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n    WHERE\r\n        t.block_timestamp :: date >= '2021-06-01'\r\n        AND program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nsigners AS (\r\n    SELECT\r\n        t.tx_id,\r\n        s.value :: STRING AS acct,\r\n        s.index\r\n    FROM\r\n        saber_dex_txs t,\r\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\r\n    ORDER BY\r\n        s.index)) = 1\r\n),\r\npost_balances_acct_map AS (\r\n    SELECT\r\n        b.tx_id,\r\n        b.account AS middle_acct,\r\n        b.owner,\r\n        b.mint,\r\n        b.decimal,\r\n        b.amount\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n        b\r\n        INNER JOIN saber_dex_txs t\r\n        ON t.tx_id = b.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    b._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\nWHERE \r\n    b.block_timestamp :: date >= '2021-06-01'\r\n{% endif %}\r\n),\r\ndestinations AS (\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.index,\r\n        ii.index AS inner_index,\r\n        ii.value :parsed :info :destination :: STRING AS destination,\r\n        ii.value :parsed :info :authority :: STRING AS authority,\r\n        ii.value :parsed :info :source :: STRING AS source,\r\n        ii.value :parsed :info :amount AS amount,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                e.index,\r\n                inner_index\r\n        ) AS rn,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN saber_dex_txs t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\r\n    WHERE\r\n        e.block_timestamp :: date >= '2021-06-01'\r\n        AND destination IS NOT NULL\r\n        AND e.program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ndestination_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        authority,\r\n        source\r\n    FROM\r\n        destinations\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3\r\n),\r\nswaps_tmp_1 AS (\r\n    SELECT\r\n        s.acct AS swapper,\r\n        COALESCE(\r\n            p1.owner,\r\n            d2.authority\r\n        ) AS destination_owner,\r\n        COALESCE(\r\n            p1.mint,\r\n            p2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            p1.decimal,\r\n            p2.decimal\r\n        ) AS DECIMAL,\r\n        d.*\r\n    FROM\r\n        destinations d\r\n        LEFT OUTER JOIN signers s\r\n        ON s.acct = d.authority\r\n        AND s.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p1\r\n        ON p1.middle_acct = d.destination\r\n        AND p1.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p2\r\n        ON p2.middle_acct = d.source\r\n        AND p2.tx_id = d.tx_id\r\n        LEFT OUTER JOIN destination_acct_map d2\r\n        ON d2.source = d.destination\r\n        AND d2.tx_id = d.tx_id\r\n),\r\nswapper_min_rn AS (\r\n    SELECT\r\n        DISTINCT s.tx_id,\r\n        MIN(rn) over (\r\n            PARTITION BY s.tx_id\r\n        ) AS min_swapper_rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n    WHERE\r\n        swapper IS NOT NULL\r\n),\r\nswaps_tmp AS (\r\n    SELECT\r\n        s.block_id,\r\n        s.block_timestamp,\r\n        s.tx_id,\r\n        s.succeeded,\r\n        s.swapper,\r\n        s.destination_owner,\r\n        s.mint,\r\n        s.decimal,\r\n        s.index,\r\n        s.inner_index,\r\n        s.destination,\r\n        s.authority,\r\n        s.source,\r\n        s.amount,\r\n        s._inserted_timestamp,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY s.tx_id\r\n            ORDER BY\r\n                s.index,\r\n                s.inner_index\r\n        ) AS rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n        INNER JOIN swapper_min_rn m\r\n        ON s.tx_id = m.tx_id\r\n    WHERE\r\n        s.rn >= m.min_swapper_rn\r\n),\r\nmint_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        source,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        swaps_tmp\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4\r\n),\r\nswap_actions AS (\r\n    SELECT\r\n        s1.block_id,\r\n        s1.block_timestamp,\r\n        s1.tx_id,\r\n        s1.succeeded,\r\n        s1.swapper,\r\n        s1.destination_owner,\r\n        s1.destination,\r\n        s1.source,\r\n        COALESCE(\r\n            s1.mint,\r\n            s2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            s1.decimal,\r\n            s2.decimal\r\n        ) AS DECIMAL,\r\n        s1.amount :: bigint AS amount,\r\n        s1.rn,\r\n        s1._inserted_timestamp\r\n    FROM\r\n        swaps_tmp s1\r\n        LEFT OUTER JOIN mint_acct_map s2\r\n        ON s1.destination = s2.source\r\n        AND s1.tx_id = s2.tx_id\r\n),\r\nswap_actions_with_refund AS (\r\n    SELECT\r\n        s1.*,\r\n        s3.mint AS originating_mint,\r\n        CASE\r\n            WHEN s2.amount < s1.amount THEN s2.amount\r\n            ELSE NULL\r\n        END AS refund,\r\n        MAX(refund) over (\r\n            PARTITION BY s1.tx_id\r\n        ) AS max_refund,\r\n        s1.amount - COALESCE(\r\n            refund,\r\n            0\r\n        ) AS final_amt\r\n    FROM\r\n        swap_actions s1\r\n        LEFT OUTER JOIN swap_actions s2\r\n        ON s1.tx_id = s2.tx_id\r\n        AND s1.swapper = s2.destination_owner\r\n        AND s1.mint = s2.mint\r\n        AND s1.rn = 1\r\n        LEFT OUTER JOIN swap_actions s3\r\n        ON s1.tx_id = s3.tx_id\r\n        AND s3.rn = 1\r\n),\r\nswap_actions_final AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        swap_actions_with_refund\r\n    WHERE\r\n        swapper IS NOT NULL\r\n        OR mint <> originating_mint\r\n        OR (\r\n            originating_mint = mint\r\n            AND max_refund IS NULL\r\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\r\n),\r\nagg_tmp AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        swapper,\r\n        mint,\r\n        DECIMAL,\r\n        _inserted_timestamp,\r\n        SUM(final_amt) AS amt,\r\n        MIN(rn) AS rn\r\n    FROM\r\n        swap_actions_final\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8\r\n),\r\nagg AS (\r\n    SELECT\r\n        *,\r\n        MAX(rn) over (\r\n            PARTITION BY tx_id\r\n        ) AS max_rn\r\n    FROM\r\n        agg_tmp\r\n    WHERE\r\n        amt <> 0\r\n)\r\nSELECT\r\n    a1.block_id,\r\n    a1.block_timestamp,\r\n    a1.tx_id,\r\n    a1.succeeded,\r\n    a1.swapper,\r\n    a1.mint AS from_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a1.amt * pow(\r\n            10,- a1.decimal\r\n        )\r\n        ELSE 0\r\n    END AS from_amt,\r\n    a2.mint AS to_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a2.amt * pow(\r\n            10,- a2.decimal\r\n        )\r\n        ELSE 0\r\n    END AS to_amt,\r\n    a1._inserted_timestamp\r\nFROM\r\n    agg a1\r\n    LEFT OUTER JOIN agg a2\r\n    ON a1.tx_id = a2.tx_id\r\n    AND a1.rn <> a2.rn\r\n    AND a2.rn = a2.max_rn\r\nWHERE\r\n    a1.rn = 1\r\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "swaps", "silver__swaps_saber_dex"], "unique_id": "model.solana_models.silver__swaps_saber_dex", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\swaps\\silver__swaps_saber_dex.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.sql", "name": "silver__swaps_saber_dex", "alias": "swaps_saber_dex", "checksum": {"name": "sha256", "checksum": "6ac5841575be20a46a4be7527e938636fbb029a6baa6bcc284a2be949dfb2c84"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\swaps\\silver__swaps_saber_dex.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.2810123, "compiled_sql": "\n\nWITH saber_dex_txs AS (\n\n    SELECT\n        DISTINCT t.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.succeeded,\n        t.signers,\n        e.program_id\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        t.block_timestamp :: date >= '2021-06-01'\n        AND program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_saber_dex\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_saber_dex\n)\n\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        saber_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n        b\n        INNER JOIN saber_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.swaps_saber_dex\n    )\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN saber_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        e.block_timestamp :: date >= '2021-06-01'\n        AND destination IS NOT NULL\n        AND e.program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_saber_dex\n)\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        s._inserted_timestamp,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn,\n        s1._inserted_timestamp\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        _inserted_timestamp,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt,\n    a1._inserted_timestamp\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.swaps_saber_dex"}, "model.solana_models.silver__nft_metadata": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', contract_address, token_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ source(\r\n            'legacy_bronze',\r\n            'prod_nft_metadata_uploads_1828572827'\r\n        ) }}\r\n    WHERE\r\n        SPLIT(\r\n            record_content :model :sinks [0] :destination :: STRING,\r\n            '.'\r\n        ) [2] :: STRING = 'nft_metadata'\r\n        AND record_content :model :blockchain :: STRING = 'solana'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    (\r\n        b.record_metadata :CreateTime :: INT / 1000\r\n    ) :: TIMESTAMP AS system_created_at,\r\n    record_content :model :blockchain :: STRING AS blockchain,\r\n    t.value :contract_address :: STRING AS contract_address,\r\n    t.value :contract_name :: STRING AS contract_name,\r\n    t.value :created_at_timestamp :: TIMESTAMP AS created_at_timestamp,\r\n    t.value :mint_address :: STRING AS mint,\r\n    t.value :creator_address :: STRING AS creator_address,\r\n    t.value :creator_name :: STRING AS creator_name,\r\n    t.value :image_url :: STRING AS image_url,\r\n    t.value :project_name :: STRING AS project_name,\r\n    t.value :token_id :: STRING AS token_id,\r\n    t.value :token_metadata :: OBJECT AS token_metadata,\r\n    t.value :token_metadata_uri :: STRING AS token_metadata_uri,\r\n    t.value :token_name :: STRING AS token_name,\r\n    b._inserted_timestamp\r\nFROM\r\n    base b,\r\n    LATERAL FLATTEN(\r\n        input => record_content: results\r\n    ) t\r\nWHERE t.value :mint_address :: STRING IS NOT NULL\r\nAND blockchain = 'solana' qualify(ROW_NUMBER() over(PARTITION BY contract_address, token_id\r\nORDER BY\r\n    created_at_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', contract_address, token_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_metadata"], "unique_id": "model.solana_models.silver__nft_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_metadata.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.sql", "name": "silver__nft_metadata", "alias": "nft_metadata", "checksum": {"name": "sha256", "checksum": "81b7617a919608636e0b31669c5b79f97c08241011c625729672b54cb4ddbffd"}, "tags": [], "refs": [], "sources": [["legacy_bronze", "prod_nft_metadata_uploads_1828572827"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Solana. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Address unique to an NFT series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "Name of the contract that identifies an NFT series. Example - tcgdragons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT_TIMESTAMP": {"name": "CREATED_AT_TIMESTAMP", "description": "timestamp in UTC that the NFT was minted at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "address provided by the creator of the project where mint payments and secondary market royalties are sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_NAME": {"name": "CREATOR_NAME", "description": "name of the project creator - this can be an individual or a company name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_URL": {"name": "IMAGE_URL", "description": "URL that links to the image on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the project the NFT token belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "Numeric value that identifies the NFT within it's series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "a block of json that describes the traits of an NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA_URI": {"name": "TOKEN_METADATA_URI", "description": "URL that links to the token metadata on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_NAME": {"name": "TOKEN_NAME", "description": "Name of the NFT token - this is unique to token. Example SMB #284", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_metadata.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', contract_address, token_id)", "incremental_strategy": "delete+insert"}, "created_at": 1662575623.1963575, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        flipside_prod_db.bronze.prod_nft_metadata_uploads_1828572827\n    WHERE\n        SPLIT(\n            record_content :model :sinks [0] :destination :: STRING,\n            '.'\n        ) [2] :: STRING = 'nft_metadata'\n        AND record_content :model :blockchain :: STRING = 'solana'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_metadata\n)\n\n)\nSELECT\n    (\n        b.record_metadata :CreateTime :: INT / 1000\n    ) :: TIMESTAMP AS system_created_at,\n    record_content :model :blockchain :: STRING AS blockchain,\n    t.value :contract_address :: STRING AS contract_address,\n    t.value :contract_name :: STRING AS contract_name,\n    t.value :created_at_timestamp :: TIMESTAMP AS created_at_timestamp,\n    t.value :mint_address :: STRING AS mint,\n    t.value :creator_address :: STRING AS creator_address,\n    t.value :creator_name :: STRING AS creator_name,\n    t.value :image_url :: STRING AS image_url,\n    t.value :project_name :: STRING AS project_name,\n    t.value :token_id :: STRING AS token_id,\n    t.value :token_metadata :: OBJECT AS token_metadata,\n    t.value :token_metadata_uri :: STRING AS token_metadata_uri,\n    t.value :token_name :: STRING AS token_name,\n    b._inserted_timestamp\nFROM\n    base b,\n    LATERAL FLATTEN(\n        input => record_content: results\n    ) t\nWHERE t.value :mint_address :: STRING IS NOT NULL\nAND blockchain = 'solana' qualify(ROW_NUMBER() over(PARTITION BY contract_address, token_id\nORDER BY\n    created_at_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_metadata"}, "model.solana_models.silver__swaps_orca_dex": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base_i AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('silver___instructions') }}\r\n        i\r\n    WHERE\r\n        i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\r\n\r\n{% if is_incremental() %}\r\nAND i._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\norca_dex_txs AS (\r\n    SELECT\r\n        DISTINCT i.block_id,\r\n        i.block_timestamp,\r\n        i.tx_id,\r\n        t.fee,\r\n        t.succeeded,\r\n        t.signers\r\n    FROM\r\n        base_i i\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = i.tx_id\r\n    WHERE\r\n        i.value :programId :: STRING IN (\r\n            -- unknown orca swaps version, seems related to v2\r\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\r\n            -- orca swaps v2\r\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\r\n            -- orca swaps v1\r\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ndelegates_map_tmp AS (\r\n    SELECT\r\n        i.tx_id,\r\n        VALUE :parsed :info :delegate :: STRING AS delegate,\r\n        VALUE :parsed :info :owner :: STRING AS owner\r\n    FROM\r\n        base_i i\r\n        INNER JOIN orca_dex_txs t\r\n        ON t.tx_id = i.tx_id\r\n    WHERE\r\n        delegate IS NOT NULL\r\n),\r\ndelegates_map AS (\r\n    SELECT\r\n        tx_id,\r\n        delegate,\r\n        owner\r\n    FROM\r\n        delegates_map_tmp\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3\r\n),\r\nsigners_tmp AS (\r\n    SELECT\r\n        t.tx_id,\r\n        s.value :: STRING AS acct,\r\n        s.index\r\n    FROM\r\n        orca_dex_txs t,\r\n        TABLE(FLATTEN(t.signers)) s\r\n),\r\nsigners AS (\r\n    SELECT\r\n        s.tx_id,\r\n        s.acct,\r\n        dm.owner AS delegate_owner\r\n    FROM\r\n        signers_tmp s\r\n        LEFT OUTER JOIN delegates_map dm\r\n        ON dm.tx_id = s.tx_id\r\n        AND s.acct = dm.delegate\r\n),\r\npost_balances_acct_map AS (\r\n    SELECT\r\n        b.tx_id,\r\n        b.account AS middle_acct,\r\n        b.owner,\r\n        b.mint,\r\n        b.decimal,\r\n        b.amount\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n        b\r\n        INNER JOIN orca_dex_txs t\r\n        ON t.tx_id = b.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    b._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n),\r\ndestinations AS (\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.index,\r\n        ii.index AS inner_index,\r\n        ii.value :parsed :info :destination :: STRING AS destination,\r\n        ii.value :parsed :info :authority :: STRING AS authority,\r\n        ii.value :parsed :info :source :: STRING AS source,\r\n        ii.value :parsed :info :amount AS amount,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                e.index,\r\n                inner_index\r\n        ) AS rn,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN orca_dex_txs t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\r\n    WHERE\r\n        destination IS NOT NULL\r\n        AND COALESCE(\r\n            ii.value :programId :: STRING,\r\n            ''\r\n        ) <> '11111111111111111111111111111111'\r\n        AND e.program_id IN (\r\n            -- unknown orca swaps version, seems related to v2\r\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\r\n            -- orca swaps v2\r\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\r\n            -- orca swaps v1\r\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ndestination_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        authority,\r\n        source\r\n    FROM\r\n        destinations\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3\r\n),\r\nswaps_tmp_1 AS (\r\n    SELECT\r\n        COALESCE(\r\n            s.delegate_owner,\r\n            s.acct\r\n        ) AS swapper,\r\n        COALESCE(\r\n            p1.owner,\r\n            d2.authority\r\n        ) AS destination_owner,\r\n        COALESCE(\r\n            p1.mint,\r\n            p2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            p1.decimal,\r\n            p2.decimal\r\n        ) AS DECIMAL,\r\n        d.*\r\n    FROM\r\n        destinations d\r\n        LEFT OUTER JOIN signers s\r\n        ON s.acct = d.authority\r\n        AND s.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p1\r\n        ON p1.middle_acct = d.destination\r\n        AND p1.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p2\r\n        ON p2.middle_acct = d.source\r\n        AND p2.tx_id = d.tx_id\r\n        LEFT OUTER JOIN destination_acct_map d2\r\n        ON d2.source = d.destination\r\n        AND d2.tx_id = d.tx_id\r\n),\r\nswapper_min_rn AS (\r\n    SELECT\r\n        DISTINCT s.tx_id,\r\n        MIN(rn) over (\r\n            PARTITION BY s.tx_id\r\n        ) AS min_swapper_rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n    WHERE\r\n        swapper IS NOT NULL\r\n),\r\nswaps_tmp AS (\r\n    SELECT\r\n        s.block_id,\r\n        s.block_timestamp,\r\n        s.tx_id,\r\n        s.succeeded,\r\n        s.swapper,\r\n        s.destination_owner,\r\n        s.mint,\r\n        s.decimal,\r\n        s.index,\r\n        s.inner_index,\r\n        s.destination,\r\n        s.authority,\r\n        s.source,\r\n        s.amount,\r\n        s._inserted_timestamp,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY s.tx_id\r\n            ORDER BY\r\n                s.index,\r\n                s.inner_index\r\n        ) AS rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n        INNER JOIN swapper_min_rn m\r\n        ON s.tx_id = m.tx_id\r\n    WHERE\r\n        s.rn >= m.min_swapper_rn\r\n),\r\nmint_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        source,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        swaps_tmp\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4\r\n),\r\nswap_actions AS (\r\n    SELECT\r\n        s1.block_id,\r\n        s1.block_timestamp,\r\n        s1.tx_id,\r\n        s1.succeeded,\r\n        s1.swapper,\r\n        s1.destination_owner,\r\n        s1.destination,\r\n        s1.source,\r\n        COALESCE(\r\n            s1.mint,\r\n            s2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            s1.decimal,\r\n            s2.decimal\r\n        ) AS DECIMAL,\r\n        s1.amount :: bigint AS amount,\r\n        s1.rn,\r\n        s1._inserted_timestamp\r\n    FROM\r\n        swaps_tmp s1\r\n        LEFT OUTER JOIN mint_acct_map s2\r\n        ON s1.destination = s2.source\r\n        AND s1.tx_id = s2.tx_id\r\n),\r\nswap_actions_with_refund AS (\r\n    SELECT\r\n        s1.*,\r\n        s3.mint AS originating_mint,\r\n        CASE\r\n            WHEN s2.amount < s1.amount THEN s2.amount\r\n            ELSE NULL\r\n        END AS refund,\r\n        MAX(refund) over (\r\n            PARTITION BY s1.tx_id\r\n        ) AS max_refund,\r\n        s1.amount - COALESCE(\r\n            refund,\r\n            0\r\n        ) AS final_amt\r\n    FROM\r\n        swap_actions s1\r\n        LEFT OUTER JOIN swap_actions s2\r\n        ON s1.tx_id = s2.tx_id\r\n        AND s1.swapper = s2.destination_owner\r\n        AND s1.mint = s2.mint\r\n        AND s1.rn = 1\r\n        LEFT OUTER JOIN swap_actions s3\r\n        ON s1.tx_id = s3.tx_id\r\n        AND s3.rn = 1\r\n),\r\nswap_actions_final AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        swap_actions_with_refund\r\n    WHERE\r\n        swapper IS NOT NULL\r\n        OR mint <> originating_mint\r\n        OR (\r\n            originating_mint = mint\r\n            AND max_refund IS NULL\r\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\r\n),\r\nagg_tmp AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        swapper,\r\n        mint,\r\n        DECIMAL,\r\n        _inserted_timestamp,\r\n        SUM(final_amt) AS amt,\r\n        MIN(rn) AS rn\r\n    FROM\r\n        swap_actions_final\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8\r\n),\r\nagg AS (\r\n    SELECT\r\n        *,\r\n        MAX(rn) over (\r\n            PARTITION BY tx_id\r\n        ) AS max_rn\r\n    FROM\r\n        agg_tmp\r\n    WHERE\r\n        amt <> 0\r\n)\r\nSELECT\r\n    a1.block_id,\r\n    a1.block_timestamp,\r\n    a1.tx_id,\r\n    a1.succeeded,\r\n    a1.swapper,\r\n    a1.mint AS from_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a1.amt * pow(\r\n            10,- a1.decimal\r\n        )\r\n        ELSE 0\r\n    END AS from_amt,\r\n    a2.mint AS to_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a2.amt * pow(\r\n            10,- a2.decimal\r\n        )\r\n        ELSE 0\r\n    END AS to_amt,\r\n    a1._inserted_timestamp\r\nFROM\r\n    agg a1\r\n    LEFT OUTER JOIN agg a2\r\n    ON a1.tx_id = a2.tx_id\r\n    AND a1.rn <> a2.rn\r\n    AND a2.rn = a2.max_rn\r\nWHERE\r\n    a1.rn = 1\r\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___instructions", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "swaps", "silver__swaps_orca_dex"], "unique_id": "model.solana_models.silver__swaps_orca_dex", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\swaps\\silver__swaps_orca_dex.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.sql", "name": "silver__swaps_orca_dex", "alias": "swaps_orca_dex", "checksum": {"name": "sha256", "checksum": "3a2b47870c39dab99a4697801feaa3463fe41198dab7174ee7a67a7e39d1a466"}, "tags": [], "refs": [["silver___instructions"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\swaps\\silver__swaps_orca_dex.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.525551, "compiled_sql": "\n\nWITH base_i AS (\n\n    SELECT\n        *\n    FROM\n        SOLANA_DEV.silver._instructions\n        i\n    WHERE\n        i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\n\n\nAND i._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_orca_dex\n)\n\n),\norca_dex_txs AS (\n    SELECT\n        DISTINCT i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        t.fee,\n        t.succeeded,\n        t.signers\n    FROM\n        base_i i\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = i.tx_id\n    WHERE\n        i.value :programId :: STRING IN (\n            -- unknown orca swaps version, seems related to v2\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\n            -- orca swaps v2\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\n            -- orca swaps v1\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\n        )\n\n\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_orca_dex\n)\n\n),\ndelegates_map_tmp AS (\n    SELECT\n        i.tx_id,\n        VALUE :parsed :info :delegate :: STRING AS delegate,\n        VALUE :parsed :info :owner :: STRING AS owner\n    FROM\n        base_i i\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = i.tx_id\n    WHERE\n        delegate IS NOT NULL\n),\ndelegates_map AS (\n    SELECT\n        tx_id,\n        delegate,\n        owner\n    FROM\n        delegates_map_tmp\n    GROUP BY\n        1,\n        2,\n        3\n),\nsigners_tmp AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        orca_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s\n),\nsigners AS (\n    SELECT\n        s.tx_id,\n        s.acct,\n        dm.owner AS delegate_owner\n    FROM\n        signers_tmp s\n        LEFT OUTER JOIN delegates_map dm\n        ON dm.tx_id = s.tx_id\n        AND s.acct = dm.delegate\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n        b\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.swaps_orca_dex\n    )\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) <> '11111111111111111111111111111111'\n        AND e.program_id IN (\n            -- unknown orca swaps version, seems related to v2\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\n            -- orca swaps v2\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\n            -- orca swaps v1\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\n        )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_orca_dex\n)\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        COALESCE(\n            s.delegate_owner,\n            s.acct\n        ) AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        s._inserted_timestamp,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn,\n        s1._inserted_timestamp\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        _inserted_timestamp,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt,\n    a1._inserted_timestamp\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.swaps_orca_dex"}, "model.solana_models.silver__nft_sales_solport": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"CONCAT_WS('-', tx_id, mint)\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH sales_inner_instructions AS (\r\n\r\n  SELECT\r\n    e.block_timestamp,\r\n    e.block_id,\r\n    e.tx_id,\r\n    t.succeeded,\r\n    e.program_id,\r\n    e.index,\r\n    COALESCE(\r\n      i.value :parsed :info :lamports :: NUMBER,\r\n      0\r\n    ) AS amount,\r\n    e.instruction :accounts [0] :: STRING AS purchaser,\r\n    e.instruction :accounts [2] :: STRING AS seller, \r\n    e.instruction :accounts [3] :: STRING AS nft_account,\r\n    e.ingested_at,\r\n    e._inserted_timestamp\r\n  FROM\r\n    {{ ref('silver__events') }}\r\n    e\r\n    INNER JOIN {{ ref('silver__transactions') }}\r\n    t\r\n    ON t.tx_id = e.tx_id\r\n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n  WHERE\r\n    e.block_timestamp :: date >= '2021-10-26'\r\n    AND program_id = 'SPf5WqNywtPrRXSU5enq5z9bPPhREaSYf2LhN5fUxcj' -- Solport Program ID\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n  SELECT\r\n    MAX(_inserted_timestamp)\r\n  FROM\r\n    {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n  SELECT\r\n    MAX(_inserted_timestamp)\r\n  FROM\r\n    {{ this }}\r\n)\r\n{% endif %}\r\n),\r\npost_token_balances AS (\r\n  SELECT\r\n    tx_id,\r\n    account,\r\n    amount,\r\n    mint\r\n  FROM\r\n    {{ ref('silver___post_token_balances') }}\r\n    p\r\n  WHERE\r\n    block_timestamp :: date >= '2021-10-26'\r\n    AND amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND p._inserted_timestamp >= (\r\n  SELECT\r\n    MAX(_inserted_timestamp)\r\n  FROM\r\n    {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n  s.block_timestamp,\r\n  s.block_id,\r\n  s.tx_id,\r\n  s.succeeded,\r\n  s.program_id,\r\n  p.mint AS mint,\r\n  s.purchaser,\r\n  s.seller, \r\n  SUM(\r\n    s.amount\r\n  ) / pow(\r\n    10,\r\n    9\r\n  ) AS sales_amount,\r\n  s.ingested_at,\r\n  s._inserted_timestamp\r\nFROM\r\n  sales_inner_instructions s\r\n  INNER JOIN post_token_balances p\r\n  ON s.tx_id = p.tx_id\r\n  AND s.nft_account = p.account\r\nGROUP BY\r\n  s.block_timestamp,\r\n  s.block_id,\r\n  s.tx_id,\r\n  s.succeeded,\r\n  s.program_id,\r\n  p.mint,\r\n  s.purchaser,\r\n  s.seller, \r\n  s.ingested_at,\r\n  s._inserted_timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, mint)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_solport"], "unique_id": "model.solana_models.silver__nft_sales_solport", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_solport.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.sql", "name": "silver__nft_sales_solport", "alias": "nft_sales_solport", "checksum": {"name": "sha256", "checksum": "c5825f692b9afea103f44d2965487be741ebcb829a59a9564c3d3a644416bfa8"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_solport.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575623.0130916, "compiled_sql": "\n\nWITH sales_inner_instructions AS (\n\n  SELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    t.succeeded,\n    e.program_id,\n    e.index,\n    COALESCE(\n      i.value :parsed :info :lamports :: NUMBER,\n      0\n    ) AS amount,\n    e.instruction :accounts [0] :: STRING AS purchaser,\n    e.instruction :accounts [2] :: STRING AS seller, \n    e.instruction :accounts [3] :: STRING AS nft_account,\n    e.ingested_at,\n    e._inserted_timestamp\n  FROM\n    SOLANA_DEV.silver.events\n    e\n    INNER JOIN SOLANA_DEV.silver.transactions\n    t\n    ON t.tx_id = e.tx_id\n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  WHERE\n    e.block_timestamp :: date >= '2021-10-26'\n    AND program_id = 'SPf5WqNywtPrRXSU5enq5z9bPPhREaSYf2LhN5fUxcj' -- Solport Program ID\n\n\nAND e._inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp)\n  FROM\n    SOLANA_DEV.silver.nft_sales_solport\n)\nAND t._inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp)\n  FROM\n    SOLANA_DEV.silver.nft_sales_solport\n)\n\n),\npost_token_balances AS (\n  SELECT\n    tx_id,\n    account,\n    amount,\n    mint\n  FROM\n    SOLANA_DEV.silver._post_token_balances\n    p\n  WHERE\n    block_timestamp :: date >= '2021-10-26'\n    AND amount > 0\n\n\nAND p._inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp)\n  FROM\n    SOLANA_DEV.silver.nft_sales_solport\n)\n\n)\nSELECT\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  p.mint AS mint,\n  s.purchaser,\n  s.seller, \n  SUM(\n    s.amount\n  ) / pow(\n    10,\n    9\n  ) AS sales_amount,\n  s.ingested_at,\n  s._inserted_timestamp\nFROM\n  sales_inner_instructions s\n  INNER JOIN post_token_balances p\n  ON s.tx_id = p.tx_id\n  AND s.nft_account = p.account\nGROUP BY\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  p.mint,\n  s.purchaser,\n  s.seller, \n  s.ingested_at,\n  s._inserted_timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_solport"}, "model.solana_models.silver__gov_actions_marinade_tmp": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nWITH token_balances AS (\r\n\r\n    SELECT\r\n        tx_id,\r\n        account,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n    WHERE\r\n        mint = 'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND block_timestamp :: DATE >= '2022-04-01' -- no marinade gov before this date\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    tx_id,\r\n    account,\r\n    mint,\r\n    DECIMAL\r\nFROM\r\n    {{ ref('silver___pre_token_balances') }}\r\nWHERE\r\n    mint = 'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND block_timestamp :: DATE >= '2022-04-01' -- no marinade gov before this date\r\n{% endif %}\r\n),\r\nmarinade_lock_txs AS (\r\n    SELECT\r\n        DISTINCT e.tx_id,\r\n        e.succeeded\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        LEFT OUTER JOIN TABLE(\r\n            FLATTEN(\r\n                input => inner_instruction :instructions,\r\n                outer => TRUE\r\n            )\r\n        ) ii\r\n    WHERE\r\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\nEXCEPT\r\nSELECT\r\n    DISTINCT e.tx_id,\r\n    e.succeeded\r\nFROM\r\n    {{ ref('silver__events') }}\r\n    e\r\n    LEFT OUTER JOIN TABLE(\r\n        FLATTEN(\r\n            input => inner_instruction :instructions,\r\n            outer => TRUE\r\n        )\r\n    ) ii\r\nWHERE\r\n    (\r\n        program_id = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw' -- ignore votes\r\n        OR COALESCE(\r\n            ii.value :programId :: STRING,\r\n            ''\r\n        ) = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw'\r\n    )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\n),\r\nb AS (\r\n    SELECT\r\n        t.tx_id,\r\n        l.index,\r\n        l.value :: STRING AS log_message,\r\n        CASE\r\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\r\n            WHEN l.value :: STRING LIKE '%success' THEN -1\r\n            ELSE 0\r\n        END AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS event_cumsum\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN marinade_lock_txs d\r\n        ON t.tx_id = d.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    t._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\nWHERE\r\n    t.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\n),\r\nC AS (\r\n    SELECT\r\n        b.*,\r\n        LAG(\r\n            event_cumsum,\r\n            1\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS prev_event_cumsum\r\n    FROM\r\n        b\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        C.tx_id,\r\n        C.index AS log_index,\r\n        C.log_message,\r\n        CASE\r\n            WHEN C.log_message = 'Program log: Instruction: CreateSimpleNftEscrow' THEN 'MINT LOCK'\r\n            WHEN C.log_message = 'Program log: Instruction: UpdateLockAmount' THEN 'UPDATE LOCK'\r\n            WHEN C.log_message = 'Program log: Instruction: StartUnlocking' THEN 'START UNLOCK'\r\n            WHEN C.log_message = 'Program log: Instruction: CancelUnlocking' THEN 'CANCEL UNLOCK'\r\n            WHEN C.log_message = 'Program log: Instruction: ExitEscrow' THEN 'EXIT'\r\n            ELSE NULL\r\n        END AS action,\r\n        conditional_true_event(\r\n            prev_event_cumsum = 0\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS event_index\r\n    FROM\r\n        C\r\n),\r\nactions_tmp AS (\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        e.tx_id,\r\n        m.succeeded,\r\n        e.index,\r\n        LAST_VALUE(\r\n            action ignore nulls\r\n        ) over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                e.index\r\n        ) AS main_action,\r\n        CASE\r\n            WHEN main_action LIKE '% LOCK' THEN e.instruction :parsed :info :amount * pow(\r\n                10,\r\n                -9\r\n            ) :: FLOAT\r\n            WHEN main_action = 'EXIT' THEN e.inner_instruction :instructions [0] :parsed :info :amount * pow(\r\n                10,\r\n                -9\r\n            ) :: FLOAT\r\n        END AS lock_amount,\r\n        CASE\r\n            WHEN main_action LIKE '% LOCK'\r\n            OR main_action = 'EXIT' THEN COALESCE(\r\n                e.instruction :accounts [5] :: STRING,\r\n                e.instruction :parsed :info :authority :: STRING\r\n            )\r\n            WHEN main_action IN (\r\n                'START UNLOCK',\r\n                'CANCEL UNLOCK'\r\n            ) THEN e.instruction :accounts [4] :: STRING\r\n        END AS locker,\r\n        CASE\r\n            WHEN main_action LIKE '% LOCK'\r\n            OR main_action = 'EXIT' THEN COALESCE(\r\n                e.instruction :accounts [6] :: STRING,\r\n                e.instruction :parsed :info :destination :: STRING\r\n            )\r\n            ELSE NULL\r\n        END AS locker_account_tmp,\r\n        MIN(\r\n            e.index\r\n        ) over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                e.index\r\n        ) AS min_index,\r\n        CASE\r\n            WHEN main_action IN (\r\n                'MINT LOCK',\r\n                'EXIT'\r\n            ) THEN e.instruction :accounts [2] :: STRING\r\n            WHEN main_action IN (\r\n                'START UNLOCK',\r\n                'CANCEL UNLOCK'\r\n            ) THEN e.instruction :accounts [1] :: STRING\r\n            ELSE NULL\r\n        END AS locker_nft,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN marinade_lock_txs m\r\n        ON m.tx_id = e.tx_id\r\n        LEFT OUTER JOIN tx_logs l\r\n        ON e.tx_id = l.tx_id\r\n        AND e.index = l.event_index\r\n        AND l.action IS NOT NULL\r\n    WHERE\r\n        (\r\n            e.event_type = 'transfer'\r\n            OR l.action IS NOT NULL\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-01'\r\n{% endif %}\r\n)\r\nSELECT\r\n    a1.block_timestamp,\r\n    a1.block_id,\r\n    a1.tx_id,\r\n    a1.succeeded,\r\n    COALESCE(\r\n        a1.locker,\r\n        a2.locker\r\n    ) AS signer,\r\n    COALESCE(\r\n        a1.locker_account_tmp,\r\n        a2.locker_account_tmp\r\n    ) AS locker_account,\r\n    COALESCE(\r\n        a1.locker_nft,\r\n        a2.locker_nft\r\n    ) AS locker_nft,\r\n    b.mint,\r\n    a1.main_action AS action,\r\n    COALESCE(\r\n        a1.lock_amount,\r\n        a2.lock_amount\r\n    ) AS amount,\r\n    a1.ingested_at,\r\n    a1._inserted_timestamp\r\nFROM\r\n    actions_tmp a1\r\n    LEFT OUTER JOIN actions_tmp a2\r\n    ON a1.tx_id = a2.tx_id\r\n    AND a1.index <> a2.index\r\n    LEFT OUTER JOIN token_balances b\r\n    ON a1.tx_id = b.tx_id\r\n    AND COALESCE(\r\n        a1.locker_account_tmp,\r\n        a2.locker_account_tmp\r\n    ) = b.account\r\nWHERE\r\n    a1.index = a1.min_index", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "governance", "silver__gov_actions_marinade_tmp"], "unique_id": "model.solana_models.silver__gov_actions_marinade_tmp", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\governance\\silver__gov_actions_marinade_tmp.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade_tmp.sql", "name": "silver__gov_actions_marinade_tmp", "alias": "gov_actions_marinade_tmp", "checksum": {"name": "sha256", "checksum": "f752cfbdc15e6f6df3ab93d8d0de5d9452e74b5392f5ffe0679a87e210214f3d"}, "tags": [], "refs": [["silver___post_token_balances"], ["silver___pre_token_balances"], ["silver__events"], ["silver__events"], ["silver__transactions"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1662575622.1073828, "compiled_sql": "\n\nWITH token_balances AS (\n\n    SELECT\n        tx_id,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n    WHERE\n        mint = 'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n)\n\nUNION\nSELECT\n    tx_id,\n    account,\n    mint,\n    DECIMAL\nFROM\n    SOLANA_DEV.silver._pre_token_balances\nWHERE\n    mint = 'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n)\n\n),\nmarinade_lock_txs AS (\n    SELECT\n        DISTINCT e.tx_id,\n        e.succeeded\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        LEFT OUTER JOIN TABLE(\n            FLATTEN(\n                input => inner_instruction :instructions,\n                outer => TRUE\n            )\n        ) ii\n    WHERE\n        program_id = 'tovt1VkTE2T4caWoeFP6a2xSFoew5mNpd7FWidyyMuk'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n)\n\nEXCEPT\nSELECT\n    DISTINCT e.tx_id,\n    e.succeeded\nFROM\n    SOLANA_DEV.silver.events\n    e\n    LEFT OUTER JOIN TABLE(\n        FLATTEN(\n            input => inner_instruction :instructions,\n            outer => TRUE\n        )\n    ) ii\nWHERE\n    (\n        program_id = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw' -- ignore votes\n        OR COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) = 'Govz1VyoyLD5BL6CSCxUJLVLsQHRwjfFj1prNsdNg5Jw'\n    )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n)\n\n),\nb AS (\n    SELECT\n        t.tx_id,\n        l.index,\n        l.value :: STRING AS log_message,\n        CASE\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\n            WHEN l.value :: STRING LIKE '%success' THEN -1\n            ELSE 0\n        END AS cnt,\n        SUM(cnt) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS event_cumsum\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN marinade_lock_txs d\n        ON t.tx_id = d.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n\n\nWHERE\n    t._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.gov_actions_marinade_tmp\n    )\n\n),\nC AS (\n    SELECT\n        b.*,\n        LAG(\n            event_cumsum,\n            1\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS prev_event_cumsum\n    FROM\n        b\n),\ntx_logs AS (\n    SELECT\n        C.tx_id,\n        C.index AS log_index,\n        C.log_message,\n        CASE\n            WHEN C.log_message = 'Program log: Instruction: CreateSimpleNftEscrow' THEN 'MINT LOCK'\n            WHEN C.log_message = 'Program log: Instruction: UpdateLockAmount' THEN 'UPDATE LOCK'\n            WHEN C.log_message = 'Program log: Instruction: StartUnlocking' THEN 'START UNLOCK'\n            WHEN C.log_message = 'Program log: Instruction: CancelUnlocking' THEN 'CANCEL UNLOCK'\n            WHEN C.log_message = 'Program log: Instruction: ExitEscrow' THEN 'EXIT'\n            ELSE NULL\n        END AS action,\n        conditional_true_event(\n            prev_event_cumsum = 0\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS event_index\n    FROM\n        C\n),\nactions_tmp AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        m.succeeded,\n        e.index,\n        LAST_VALUE(\n            action ignore nulls\n        ) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index\n        ) AS main_action,\n        CASE\n            WHEN main_action LIKE '% LOCK' THEN e.instruction :parsed :info :amount * pow(\n                10,\n                -9\n            ) :: FLOAT\n            WHEN main_action = 'EXIT' THEN e.inner_instruction :instructions [0] :parsed :info :amount * pow(\n                10,\n                -9\n            ) :: FLOAT\n        END AS lock_amount,\n        CASE\n            WHEN main_action LIKE '% LOCK'\n            OR main_action = 'EXIT' THEN COALESCE(\n                e.instruction :accounts [5] :: STRING,\n                e.instruction :parsed :info :authority :: STRING\n            )\n            WHEN main_action IN (\n                'START UNLOCK',\n                'CANCEL UNLOCK'\n            ) THEN e.instruction :accounts [4] :: STRING\n        END AS locker,\n        CASE\n            WHEN main_action LIKE '% LOCK'\n            OR main_action = 'EXIT' THEN COALESCE(\n                e.instruction :accounts [6] :: STRING,\n                e.instruction :parsed :info :destination :: STRING\n            )\n            ELSE NULL\n        END AS locker_account_tmp,\n        MIN(\n            e.index\n        ) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index\n        ) AS min_index,\n        CASE\n            WHEN main_action IN (\n                'MINT LOCK',\n                'EXIT'\n            ) THEN e.instruction :accounts [2] :: STRING\n            WHEN main_action IN (\n                'START UNLOCK',\n                'CANCEL UNLOCK'\n            ) THEN e.instruction :accounts [1] :: STRING\n            ELSE NULL\n        END AS locker_nft,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN marinade_lock_txs m\n        ON m.tx_id = e.tx_id\n        LEFT OUTER JOIN tx_logs l\n        ON e.tx_id = l.tx_id\n        AND e.index = l.event_index\n        AND l.action IS NOT NULL\n    WHERE\n        (\n            e.event_type = 'transfer'\n            OR l.action IS NOT NULL\n        )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.gov_actions_marinade_tmp\n)\n\n)\nSELECT\n    a1.block_timestamp,\n    a1.block_id,\n    a1.tx_id,\n    a1.succeeded,\n    COALESCE(\n        a1.locker,\n        a2.locker\n    ) AS signer,\n    COALESCE(\n        a1.locker_account_tmp,\n        a2.locker_account_tmp\n    ) AS locker_account,\n    COALESCE(\n        a1.locker_nft,\n        a2.locker_nft\n    ) AS locker_nft,\n    b.mint,\n    a1.main_action AS action,\n    COALESCE(\n        a1.lock_amount,\n        a2.lock_amount\n    ) AS amount,\n    a1.ingested_at,\n    a1._inserted_timestamp\nFROM\n    actions_tmp a1\n    LEFT OUTER JOIN actions_tmp a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.index <> a2.index\n    LEFT OUTER JOIN token_balances b\n    ON a1.tx_id = b.tx_id\n    AND COALESCE(\n        a1.locker_account_tmp,\n        a2.locker_account_tmp\n    ) = b.account\nWHERE\n    a1.index = a1.min_index", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.gov_actions_marinade_tmp"}, "model.solana_models.bronze__blocks2": {"raw_sql": "{{ config (\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    value, \r\n    _inserted_date, \r\n    metadata, \r\n    block_id, \r\n    data, \r\n    error,\r\n    TO_TIMESTAMP_NTZ(\r\n        SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n        0\r\n    ) as _inserted_timestamp\r\nFROM \r\n    {{ source(\r\n        'solana_external', \r\n        'blocks_api'\r\n    )}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.solana_external.blocks_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "bronze", "fqn": ["solana_models", "bronze", "bronze__blocks2"], "unique_id": "model.solana_models.bronze__blocks2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "bronze\\bronze__blocks2.sql", "original_file_path": "models\\bronze\\bronze__blocks2.sql", "name": "bronze__blocks2", "alias": "blocks2", "checksum": {"name": "sha256", "checksum": "c5a9071e01e7f851a862096f048a36491e76ab90c77138f9f4135c8bb392b6a8"}, "tags": [], "refs": [], "sources": [["solana_external", "blocks_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\bronze\\bronze__blocks2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662575622.121781, "compiled_sql": "\n\nSELECT \n    value, \n    _inserted_date, \n    metadata, \n    block_id, \n    data, \n    error,\n    TO_TIMESTAMP_NTZ(\n        SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n        0\n    ) as _inserted_timestamp\nFROM \n    SOLANA_DEV.bronze.blocks_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.bronze.blocks2"}, "model.solana_models.silver__proposal_creation_realms": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"tx_id\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH vote_programs AS (\r\n    SELECT \r\n        address \r\n    FROM \r\n        {{ source(\r\n            'crosschain',\r\n            'address_labels'\r\n        ) }} \r\n    WHERE \r\n        blockchain = 'solana'\r\n        AND project_name = 'realms'\r\n), \r\nprop_txs AS (\r\n    SELECT \r\n        block_timestamp, \r\n        block_id, \r\n        tx_id, \r\n        succeeded, \r\n        e.index, \r\n        program_id, \r\n        instruction :accounts[0] :: STRING AS realms_id, \r\n        instruction :accounts[1] :: STRING AS proposal, \r\n        instruction :accounts[5] :: STRING AS proposal_writer,\r\n        _inserted_timestamp \r\n    FROM \r\n        {{ ref('silver__events') }} e\r\n  \r\n    INNER JOIN vote_programs v \r\n    ON e.program_id = v.address\r\n    \r\n    WHERE \r\n        block_timestamp :: date >= '2022-04-28'\r\n        AND instruction :data :: STRING <> 'Q'\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nb AS (\r\n    SELECT\r\n        t.tx_id,\r\n        t.succeeded,\r\n        l.index,\r\n        l.value :: STRING AS log_message,\r\n        CASE\r\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\r\n            WHEN l.value :: STRING LIKE '%success' THEN -1\r\n            ELSE 0\r\n        END AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY t.tx_id\r\n            ORDER BY\r\n                l.index rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS event_cumsum\r\n    FROM\r\n        {{ ref('silver__transactions') }}\r\n        t\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT tx_id\r\n            FROM\r\n                prop_txs \r\n        ) v\r\n        ON t.tx_id = v.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\r\n\r\n        {% if is_incremental() %}\r\n        WHERE _inserted_timestamp >= (\r\n            SELECT\r\n                MAX(_inserted_timestamp)\r\n            FROM\r\n                {{ this }}\r\n        )\r\n        {% else %}\r\n        WHERE \r\n            t.block_timestamp :: date >= '2022-04-28'\r\n        {% endif %}\r\n),\r\nC AS (\r\n    SELECT\r\n        b.*,\r\n        LAG(\r\n            event_cumsum,\r\n            1\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS prev_event_cumsum\r\n    FROM\r\n        b\r\n),\r\ntx_logs AS (\r\n    SELECT\r\n        C.tx_id,\r\n        C.succeeded,\r\n        C.index AS log_index,\r\n        C.log_message,\r\n        conditional_true_event(\r\n            prev_event_cumsum = 0\r\n        ) over (\r\n            PARTITION BY tx_id\r\n            ORDER BY\r\n                INDEX\r\n        ) AS event_index\r\n    FROM\r\n        C\r\n),  \r\ncreate_vote_logs AS (\r\n    SELECT \r\n        * \r\n    FROM \r\n        tx_logs\r\n    WHERE \r\n        log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CreateProposal %'\r\n)\r\nSELECT \r\n    p.block_timestamp, \r\n    p.block_id, \r\n    p.tx_id, \r\n    p.succeeded, \r\n    p.index, \r\n    p.program_id, \r\n    realms_id, \r\n    proposal, \r\n    proposal_writer, \r\n    SPLIT_PART(SPLIT_PART(log_message, 'name:', 2), ', description_link:', 0) AS proposal_name, \r\n    SPLIT_PART(SPLIT_PART(log_message, 'vote_type:', 2), ', options:', 0) AS vote_type,\r\n    SPLIT_PART(SPLIT_PART(log_message, 'options: ', 2), ', use_deny_option:', 0) AS vote_options,\r\n    _inserted_timestamp\r\nFROM prop_txs p\r\n\r\nINNER JOIN create_vote_logs l \r\nON l.tx_id = p.tx_id \r\nAND l.event_index = p.index", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.crosschain.address_labels", "model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "governance", "silver__proposal_creation_realms"], "unique_id": "model.solana_models.silver__proposal_creation_realms", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\governance\\silver__proposal_creation_realms.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.sql", "name": "silver__proposal_creation_realms", "alias": "proposal_creation_realms", "checksum": {"name": "sha256", "checksum": "fd7cbaedb4c5cb9b9bed1b4254d7a11f1a3d507dbba32a4154a983a8869e2670"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"]], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "An EZ view of all proposal creations on Realms DAO governance spaces. A space serves as a voting group for an organization, dAPP, or DAO.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "A unique key that identifies the event's position within a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REALMS_ID": {"name": "REALMS_ID", "description": "An address that is unique to the space or voting group on Realms.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL": {"name": "PROPOSAL", "description": "Address representing the proposal being voted on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_WRITER": {"name": "PROPOSAL_WRITER", "description": "Address of the user who is submitting the proposal for voting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_NAME": {"name": "PROPOSAL_NAME", "description": "The name of the proposal that is being submitted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_TYPE": {"name": "VOTE_TYPE", "description": "The type of voting strategy that will be used for voting on the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_OPTIONS": {"name": "VOTE_OPTIONS", "description": "The options that will be available to users who are voting on the proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\governance\\silver__proposal_creation_realms.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.9688914, "compiled_sql": "\n\nWITH vote_programs AS (\n    SELECT \n        address \n    FROM \n        flipside_prod_db.silver_crosschain.address_labels \n    WHERE \n        blockchain = 'solana'\n        AND project_name = 'realms'\n), \nprop_txs AS (\n    SELECT \n        block_timestamp, \n        block_id, \n        tx_id, \n        succeeded, \n        e.index, \n        program_id, \n        instruction :accounts[0] :: STRING AS realms_id, \n        instruction :accounts[1] :: STRING AS proposal, \n        instruction :accounts[5] :: STRING AS proposal_writer,\n        _inserted_timestamp \n    FROM \n        SOLANA_DEV.silver.events e\n  \n    INNER JOIN vote_programs v \n    ON e.program_id = v.address\n    \n    WHERE \n        block_timestamp :: date >= '2022-04-28'\n        AND instruction :data :: STRING <> 'Q'\n\n    \n    AND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.proposal_creation_realms\n    )\n    \n), \nb AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.index,\n        l.value :: STRING AS log_message,\n        CASE\n            WHEN l.value :: STRING LIKE '%invoke%' THEN 1\n            WHEN l.value :: STRING LIKE '%success' THEN -1\n            ELSE 0\n        END AS cnt,\n        SUM(cnt) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS event_cumsum\n    FROM\n        SOLANA_DEV.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                prop_txs \n        ) v\n        ON t.tx_id = v.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n\n        \n        WHERE _inserted_timestamp >= (\n            SELECT\n                MAX(_inserted_timestamp)\n            FROM\n                SOLANA_DEV.silver.proposal_creation_realms\n        )\n        \n),\nC AS (\n    SELECT\n        b.*,\n        LAG(\n            event_cumsum,\n            1\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS prev_event_cumsum\n    FROM\n        b\n),\ntx_logs AS (\n    SELECT\n        C.tx_id,\n        C.succeeded,\n        C.index AS log_index,\n        C.log_message,\n        conditional_true_event(\n            prev_event_cumsum = 0\n        ) over (\n            PARTITION BY tx_id\n            ORDER BY\n                INDEX\n        ) AS event_index\n    FROM\n        C\n),  \ncreate_vote_logs AS (\n    SELECT \n        * \n    FROM \n        tx_logs\n    WHERE \n        log_message LIKE 'Program log: GOVERNANCE-INSTRUCTION: CreateProposal %'\n)\nSELECT \n    p.block_timestamp, \n    p.block_id, \n    p.tx_id, \n    p.succeeded, \n    p.index, \n    p.program_id, \n    realms_id, \n    proposal, \n    proposal_writer, \n    SPLIT_PART(SPLIT_PART(log_message, 'name:', 2), ', description_link:', 0) AS proposal_name, \n    SPLIT_PART(SPLIT_PART(log_message, 'vote_type:', 2), ', options:', 0) AS vote_type,\n    SPLIT_PART(SPLIT_PART(log_message, 'options: ', 2), ', use_deny_option:', 0) AS vote_options,\n    _inserted_timestamp\nFROM prop_txs p\n\nINNER JOIN create_vote_logs l \nON l.tx_id = p.tx_id \nAND l.event_index = p.index", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.proposal_creation_realms"}, "model.solana_models.silver__swaps_raydium_dex": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH raydium_dex_txs AS (\r\n\r\n    SELECT\r\n        DISTINCT t.block_timestamp,\r\n        t.block_id,\r\n        t.tx_id,\r\n        t.succeeded,\r\n        t.signers,\r\n        e.program_id\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n    WHERE\r\n        (\r\n            (\r\n                program_id = '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'\r\n                AND instruction :accounts [2] :: STRING = '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'\r\n            )\r\n            OR (\r\n                program_id = '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h'\r\n                AND instruction :accounts [1] :: STRING = '2EXiumdi14E9b8Fy62QcA5Uh6WdHS2b38wtSxp72Mibj'\r\n            )\r\n            OR program_id IN (\r\n                '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\r\n                'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\r\n            )\r\n        )\r\n        AND t.block_timestamp :: date >= '2021-02-21'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nsigners AS (\r\n    SELECT\r\n        t.tx_id,\r\n        s.value :: STRING AS acct,\r\n        s.index\r\n    FROM\r\n        raydium_dex_txs t,\r\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\r\n    ORDER BY\r\n        s.index)) = 1\r\n),\r\npost_balances_acct_map AS (\r\n    SELECT\r\n        b.tx_id,\r\n        b.account AS middle_acct,\r\n        b.owner,\r\n        b.mint,\r\n        b.decimal,\r\n        b.amount\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n        b\r\n        INNER JOIN raydium_dex_txs t\r\n        ON t.tx_id = b.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    b._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\nWHERE \r\n    b.block_timestamp :: date >= '2021-02-21'\r\n{% endif %}\r\n),\r\ndestinations AS (\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.index,\r\n        ii.index AS inner_index,\r\n        ii.value :parsed :info :destination :: STRING AS destination,\r\n        ii.value :parsed :info :authority :: STRING AS authority,\r\n        ii.value :parsed :info :source :: STRING AS source,\r\n        ii.value :parsed :info :amount AS amount,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                e.index,\r\n                inner_index\r\n        ) AS rn,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN raydium_dex_txs t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\r\n    WHERE\r\n        destination IS NOT NULL\r\n        AND e.program_id IN (\r\n            '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',\r\n            '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h',\r\n            '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\r\n            'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\nAND \r\n    e.block_timestamp :: date >= '2021-02-21'\r\n{% endif %}\r\n),\r\ndestination_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        authority,\r\n        source\r\n    FROM\r\n        destinations\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3\r\n),\r\nswaps_tmp_1 AS (\r\n    SELECT\r\n        s.acct AS swapper,\r\n        COALESCE(\r\n            p1.owner,\r\n            d2.authority\r\n        ) AS destination_owner,\r\n        COALESCE(\r\n            p1.mint,\r\n            p2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            p1.decimal,\r\n            p2.decimal\r\n        ) AS DECIMAL,\r\n        d.*\r\n    FROM\r\n        destinations d\r\n        LEFT OUTER JOIN signers s\r\n        ON s.acct = d.authority\r\n        AND s.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p1\r\n        ON p1.middle_acct = d.destination\r\n        AND p1.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p2\r\n        ON p2.middle_acct = d.source\r\n        AND p2.tx_id = d.tx_id\r\n        LEFT OUTER JOIN destination_acct_map d2\r\n        ON d2.source = d.destination\r\n        AND d2.tx_id = d.tx_id\r\n),\r\nswapper_min_rn AS (\r\n    SELECT\r\n        DISTINCT s.tx_id,\r\n        MIN(rn) over (\r\n            PARTITION BY s.tx_id\r\n        ) AS min_swapper_rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n    WHERE\r\n        swapper IS NOT NULL\r\n),\r\nswaps_tmp AS (\r\n    SELECT\r\n        s.block_id,\r\n        s.block_timestamp,\r\n        s.tx_id,\r\n        s.succeeded,\r\n        s.swapper,\r\n        s.destination_owner,\r\n        s.mint,\r\n        s.decimal,\r\n        s.index,\r\n        s.inner_index,\r\n        s.destination,\r\n        s.authority,\r\n        s.source,\r\n        s.amount,\r\n        s._inserted_timestamp,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY s.tx_id\r\n            ORDER BY\r\n                s.index,\r\n                s.inner_index\r\n        ) AS rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n        INNER JOIN swapper_min_rn m\r\n        ON s.tx_id = m.tx_id\r\n    WHERE\r\n        s.rn >= m.min_swapper_rn\r\n),\r\nmint_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        source,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        swaps_tmp\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4\r\n),\r\nswap_actions AS (\r\n    SELECT\r\n        s1.block_id,\r\n        s1.block_timestamp,\r\n        s1.tx_id,\r\n        s1.succeeded,\r\n        s1.swapper,\r\n        s1.destination_owner,\r\n        s1.destination,\r\n        s1.source,\r\n        COALESCE(\r\n            s1.mint,\r\n            s2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            s1.decimal,\r\n            s2.decimal\r\n        ) AS DECIMAL,\r\n        s1.amount :: bigint AS amount,\r\n        s1.rn,\r\n        s1._inserted_timestamp\r\n    FROM\r\n        swaps_tmp s1\r\n        LEFT OUTER JOIN mint_acct_map s2\r\n        ON s1.destination = s2.source\r\n        AND s1.tx_id = s2.tx_id\r\n),\r\nswap_actions_with_refund AS (\r\n    SELECT\r\n        s1.*,\r\n        s3.mint AS originating_mint,\r\n        CASE\r\n            WHEN s2.amount < s1.amount THEN s2.amount\r\n            ELSE NULL\r\n        END AS refund,\r\n        MAX(refund) over (\r\n            PARTITION BY s1.tx_id\r\n        ) AS max_refund,\r\n        s1.amount - COALESCE(\r\n            refund,\r\n            0\r\n        ) AS final_amt\r\n    FROM\r\n        swap_actions s1\r\n        LEFT OUTER JOIN swap_actions s2\r\n        ON s1.tx_id = s2.tx_id\r\n        AND s1.swapper = s2.destination_owner\r\n        AND s1.mint = s2.mint\r\n        AND s1.rn = 1\r\n        LEFT OUTER JOIN swap_actions s3\r\n        ON s1.tx_id = s3.tx_id\r\n        AND s3.rn = 1\r\n),\r\nswap_actions_final AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        swap_actions_with_refund\r\n    WHERE\r\n        swapper IS NOT NULL\r\n        OR mint <> originating_mint\r\n        OR (\r\n            originating_mint = mint\r\n            AND max_refund IS NULL\r\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\r\n),\r\nagg_tmp AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        swapper,\r\n        mint,\r\n        DECIMAL,\r\n        _inserted_timestamp,\r\n        SUM(final_amt) AS amt,\r\n        MIN(rn) AS rn\r\n    FROM\r\n        swap_actions_final\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8\r\n),\r\nagg AS (\r\n    SELECT\r\n        *,\r\n        MAX(rn) over (\r\n            PARTITION BY tx_id\r\n        ) AS max_rn\r\n    FROM\r\n        agg_tmp\r\n    WHERE\r\n        amt <> 0\r\n)\r\nSELECT\r\n    a1.block_id,\r\n    a1.block_timestamp,\r\n    a1.tx_id,\r\n    a1.succeeded,\r\n    a1.swapper,\r\n    a1.mint AS from_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a1.amt * pow(\r\n            10,- a1.decimal\r\n        )\r\n        ELSE 0\r\n    END AS from_amt,\r\n    a2.mint AS to_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a2.amt * pow(\r\n            10,- a2.decimal\r\n        )\r\n        ELSE 0\r\n    END AS to_amt,\r\n    a1._inserted_timestamp\r\nFROM\r\n    agg a1\r\n    LEFT OUTER JOIN agg a2\r\n    ON a1.tx_id = a2.tx_id\r\n    AND a1.rn <> a2.rn\r\n    AND a2.rn = a2.max_rn\r\nWHERE\r\n    a1.rn = 1\r\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "swaps", "silver__swaps_raydium_dex"], "unique_id": "model.solana_models.silver__swaps_raydium_dex", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\swaps\\silver__swaps_raydium_dex.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.sql", "name": "silver__swaps_raydium_dex", "alias": "swaps_raydium_dex", "checksum": {"name": "sha256", "checksum": "d394dad8553b7bdefd1621c2ee5d71edf34f8434f06815988603c81747aa2658"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.5648243, "compiled_sql": "\n\nWITH raydium_dex_txs AS (\n\n    SELECT\n        DISTINCT t.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.succeeded,\n        t.signers,\n        e.program_id\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        (\n            (\n                program_id = '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'\n                AND instruction :accounts [2] :: STRING = '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'\n            )\n            OR (\n                program_id = '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h'\n                AND instruction :accounts [1] :: STRING = '2EXiumdi14E9b8Fy62QcA5Uh6WdHS2b38wtSxp72Mibj'\n            )\n            OR program_id IN (\n                '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\n                'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\n            )\n        )\n        AND t.block_timestamp :: date >= '2021-02-21'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_raydium_dex\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_raydium_dex\n)\n\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        raydium_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n        b\n        INNER JOIN raydium_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.swaps_raydium_dex\n    )\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN raydium_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND e.program_id IN (\n            '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',\n            '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h',\n            '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\n            'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\n        )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_raydium_dex\n)\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        s._inserted_timestamp,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn,\n        s1._inserted_timestamp\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        _inserted_timestamp,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt,\n    a1._inserted_timestamp\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.swaps_raydium_dex"}, "model.solana_models.silver__nft_bids_yawww": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH yawww_txs AS (\r\n\r\n    SELECT\r\n        DISTINCT tx_id\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n    WHERE\r\n        block_timestamp :: date >= '2022-07-12'\r\n        AND program_id = '5SKmrbAxnHV2sgqyDXkGrLrokZYtWWVEEk5Soed7VLVN'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    t.block_id,\r\n    t.block_timestamp,\r\n    t.tx_id,\r\n    t.succeeded,\r\n    t.signers [0] :: STRING AS bidder,\r\n    instructions [0] :accounts [2] :: STRING AS acct_2,\r\n    i.value :parsed :info :lamports / pow(\r\n        10,\r\n        9\r\n    ) AS bid_amount,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('silver__transactions') }}\r\n    t\r\n    INNER JOIN yawww_txs y\r\n    ON t.tx_id = y.tx_id\r\n    LEFT JOIN TABLE(FLATTEN(inner_instructions [0] :instructions)) i\r\n    LEFT JOIN TABLE(FLATTEN(t.log_messages)) l\r\nWHERE\r\n    l.value :: STRING LIKE 'Program log: Instruction: Bid on listing'\r\n    AND i.index = 3\r\n    AND i.value :parsed :type :: STRING = 'transfer'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over (PARTITION BY t.tx_id\r\nORDER BY\r\n    bid_amount DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_bids_yawww"], "unique_id": "model.solana_models.silver__nft_bids_yawww", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_bids_yawww.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.sql", "name": "silver__nft_bids_yawww", "alias": "nft_bids_yawww", "checksum": {"name": "sha256", "checksum": "8a1ba0facd21f0fcafa23b247d4f1444ff740ad7838f4d68c4c8a65c7a3992e7"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BIDDER": {"name": "BIDDER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCT_2": {"name": "ACCT_2", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BID_AMOUNT": {"name": "BID_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_bids_yawww.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.859082, "compiled_sql": "\n\nWITH yawww_txs AS (\n\n    SELECT\n        DISTINCT tx_id\n    FROM\n        SOLANA_DEV.silver.events\n        e\n    WHERE\n        block_timestamp :: date >= '2022-07-12'\n        AND program_id = '5SKmrbAxnHV2sgqyDXkGrLrokZYtWWVEEk5Soed7VLVN'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_bids_yawww\n)\n\n)\nSELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.succeeded,\n    t.signers [0] :: STRING AS bidder,\n    instructions [0] :accounts [2] :: STRING AS acct_2,\n    i.value :parsed :info :lamports / pow(\n        10,\n        9\n    ) AS bid_amount,\n    _inserted_timestamp\nFROM\n    SOLANA_DEV.silver.transactions\n    t\n    INNER JOIN yawww_txs y\n    ON t.tx_id = y.tx_id\n    LEFT JOIN TABLE(FLATTEN(inner_instructions [0] :instructions)) i\n    LEFT JOIN TABLE(FLATTEN(t.log_messages)) l\nWHERE\n    l.value :: STRING LIKE 'Program log: Instruction: Bid on listing'\n    AND i.index = 3\n    AND i.value :parsed :type :: STRING = 'transfer'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_bids_yawww\n)\n\n\nqualify(ROW_NUMBER() over (PARTITION BY t.tx_id\nORDER BY\n    bid_amount DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_bids_yawww"}, "model.solana_models.silver__swaps_jupiter_dex": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH jupiter_dex_txs AS (\r\n\r\n    SELECT\r\n        DISTINCT i.block_id,\r\n        i.block_timestamp,\r\n        i.tx_id,\r\n        t.fee,\r\n        t.succeeded,\r\n        t.signers\r\n    FROM\r\n        {{ ref('silver___instructions') }}\r\n        i\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = i.tx_id\r\n    WHERE\r\n        i.value :programId :: STRING = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo' -- jupiter aggregator v2\r\n        AND i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\r\n\r\n{% if is_incremental() %}\r\nAND i._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nsigners AS (\r\n    SELECT\r\n        t.tx_id,\r\n        s.value :: STRING AS acct,\r\n        s.index\r\n    FROM\r\n        jupiter_dex_txs t,\r\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\r\n    ORDER BY\r\n        s.index DESC)) = 1\r\n),\r\npost_balances_acct_map AS (\r\n    SELECT\r\n        b.tx_id,\r\n        b.account AS middle_acct,\r\n        b.owner,\r\n        b.mint,\r\n        b.decimal,\r\n        b.amount\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n        b\r\n        INNER JOIN jupiter_dex_txs t\r\n        ON t.tx_id = b.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    b._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n),\r\ndestinations AS (\r\n    SELECT\r\n        e.block_id,\r\n        e.block_timestamp,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.index,\r\n        ii.index AS inner_index,\r\n        ii.value :parsed :info :destination :: STRING AS destination,\r\n        ii.value :parsed :info :authority :: STRING AS authority,\r\n        ii.value :parsed :info :source :: STRING AS source,\r\n        ii.value :parsed :info :amount AS amount,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY e.tx_id\r\n            ORDER BY\r\n                e.index,\r\n                inner_index\r\n        ) AS rn,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN jupiter_dex_txs t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\r\n    WHERE\r\n        destination IS NOT NULL\r\n        AND COALESCE(\r\n            ii.value :programId :: STRING,\r\n            ''\r\n        ) <> '11111111111111111111111111111111'\r\n        AND e.program_id = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ndestination_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        authority,\r\n        source\r\n    FROM\r\n        destinations\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3\r\n),\r\nswaps_tmp_1 AS (\r\n    SELECT\r\n        s.acct AS swapper,\r\n        COALESCE(\r\n            p1.owner,\r\n            d2.authority\r\n        ) AS destination_owner,\r\n        COALESCE(\r\n            p1.mint,\r\n            p2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            p1.decimal,\r\n            p2.decimal\r\n        ) AS DECIMAL,\r\n        d.*\r\n    FROM\r\n        destinations d\r\n        LEFT OUTER JOIN signers s\r\n        ON s.acct = d.authority\r\n        AND s.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p1\r\n        ON p1.middle_acct = d.destination\r\n        AND p1.tx_id = d.tx_id\r\n        LEFT OUTER JOIN post_balances_acct_map p2\r\n        ON p2.middle_acct = d.source\r\n        AND p2.tx_id = d.tx_id\r\n        LEFT OUTER JOIN destination_acct_map d2\r\n        ON d2.source = d.destination\r\n        AND d2.tx_id = d.tx_id\r\n),\r\nswapper_min_rn AS (\r\n    SELECT\r\n        DISTINCT s.tx_id,\r\n        MIN(rn) over (\r\n            PARTITION BY s.tx_id\r\n        ) AS min_swapper_rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n    WHERE\r\n        swapper IS NOT NULL\r\n),\r\nswaps_tmp AS (\r\n    SELECT\r\n        s.block_id,\r\n        s.block_timestamp,\r\n        s.tx_id,\r\n        s.succeeded,\r\n        s.swapper,\r\n        s.destination_owner,\r\n        s.mint,\r\n        s.decimal,\r\n        s.index,\r\n        s.inner_index,\r\n        s.destination,\r\n        s.authority,\r\n        s.source,\r\n        s.amount,\r\n        s._inserted_timestamp,\r\n        ROW_NUMBER() over (\r\n            PARTITION BY s.tx_id\r\n            ORDER BY\r\n                s.index,\r\n                s.inner_index\r\n        ) AS rn\r\n    FROM\r\n        swaps_tmp_1 s\r\n        INNER JOIN swapper_min_rn m\r\n        ON s.tx_id = m.tx_id\r\n    WHERE\r\n        s.rn >= m.min_swapper_rn\r\n),\r\nmint_acct_map AS (\r\n    SELECT\r\n        tx_id,\r\n        source,\r\n        mint,\r\n        DECIMAL\r\n    FROM\r\n        swaps_tmp\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4\r\n),\r\nswap_actions AS (\r\n    SELECT\r\n        s1.block_id,\r\n        s1.block_timestamp,\r\n        s1.tx_id,\r\n        s1.index,\r\n        s1.succeeded,\r\n        s1.swapper,\r\n        s1.destination_owner,\r\n        s1.destination,\r\n        s1.source,\r\n        COALESCE(\r\n            s1.mint,\r\n            s2.mint\r\n        ) AS mint,\r\n        COALESCE(\r\n            s1.decimal,\r\n            s2.decimal\r\n        ) AS DECIMAL,\r\n        s1.amount :: bigint AS amount,\r\n        s1.rn,\r\n        s1._inserted_timestamp\r\n    FROM\r\n        swaps_tmp s1\r\n        LEFT OUTER JOIN mint_acct_map s2\r\n        ON s1.destination = s2.source\r\n        AND s1.tx_id = s2.tx_id\r\n),\r\nswap_actions_with_refund AS (\r\n    SELECT\r\n        s1.*,\r\n        s3.mint AS originating_mint,\r\n        CASE\r\n            WHEN s2.amount < s1.amount THEN s2.amount\r\n            ELSE NULL\r\n        END AS refund,\r\n        MAX(refund) over (\r\n            PARTITION BY s1.tx_id\r\n        ) AS max_refund,\r\n        s1.amount - COALESCE(\r\n            refund,\r\n            0\r\n        ) AS final_amt\r\n    FROM\r\n        swap_actions s1\r\n        LEFT OUTER JOIN swap_actions s2\r\n        ON s1.tx_id = s2.tx_id\r\n        AND s1.swapper = s2.destination_owner\r\n        AND s1.mint = s2.mint\r\n        AND s1.rn = 1\r\n        LEFT OUTER JOIN swap_actions s3\r\n        ON s1.tx_id = s3.tx_id\r\n        AND s3.rn = 1\r\n),\r\nlifinity_swap_extra_fee AS (\r\n    SELECT\r\n        tx_id,\r\n        INDEX,\r\n        instruction :accounts [14] :: STRING AS fee_collector,\r\n        instruction :accounts [15] :: STRING AS fee_collector2\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n    WHERE\r\n        program_id = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo'\r\n        AND instruction :accounts [0] :: STRING = 'EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S'\r\n        AND (\r\n            instruction :data :: STRING LIKE '1M6zJqvfqkr%'\r\n            OR instruction :data :: STRING LIKE '1UEN8S1i2c%'\r\n        )\r\n        AND ARRAY_SIZE(\r\n            instruction :accounts\r\n        ) > 14\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nswap_actions_final AS (\r\n    SELECT\r\n        s.*,\r\n        f.fee_collector,\r\n        f2.fee_collector2\r\n    FROM\r\n        swap_actions_with_refund s\r\n        LEFT OUTER JOIN lifinity_swap_extra_fee f\r\n        ON s.tx_id = f.tx_id\r\n        AND s.index = f.index\r\n        AND s.destination = f.fee_collector\r\n        LEFT OUTER JOIN lifinity_swap_extra_fee f2\r\n        ON s.tx_id = f2.tx_id\r\n        AND s.index = f2.index\r\n        AND s.destination = f2.fee_collector2\r\n    WHERE\r\n        (\r\n            swapper IS NOT NULL\r\n            OR mint <> originating_mint\r\n            OR (\r\n                originating_mint = mint\r\n                AND max_refund IS NULL\r\n            ) -- need to do this for situations where it appears the user swaps back to the same mint...\r\n        )\r\n        AND f.fee_collector IS NULL\r\n        AND f2.fee_collector2 IS NULL\r\n),\r\nagg_tmp AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        tx_id,\r\n        succeeded,\r\n        swapper,\r\n        mint,\r\n        DECIMAL,\r\n        _inserted_timestamp,\r\n        SUM(final_amt) AS amt,\r\n        MIN(rn) AS rn\r\n    FROM\r\n        swap_actions_final\r\n    GROUP BY\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8\r\n),\r\nagg AS (\r\n    SELECT\r\n        *,\r\n        MAX(rn) over (\r\n            PARTITION BY tx_id\r\n        ) AS max_rn\r\n    FROM\r\n        agg_tmp\r\n    WHERE\r\n        amt <> 0\r\n)\r\nSELECT\r\n    a1.block_id,\r\n    a1.block_timestamp,\r\n    a1.tx_id,\r\n    a1.succeeded,\r\n    a1.swapper,\r\n    a1.mint AS from_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a1.amt * pow(\r\n            10,- a1.decimal\r\n        )\r\n        ELSE 0\r\n    END AS from_amt,\r\n    a2.mint AS to_mint,\r\n    CASE\r\n        WHEN a1.succeeded THEN a2.amt * pow(\r\n            10,- a2.decimal\r\n        )\r\n        ELSE 0\r\n    END AS to_amt,\r\n    a1._inserted_timestamp\r\nFROM\r\n    agg a1\r\n    LEFT OUTER JOIN agg a2\r\n    ON a1.tx_id = a2.tx_id\r\n    AND a1.rn <> a2.rn\r\n    AND a2.rn = a2.max_rn\r\nWHERE\r\n    a1.rn = 1\r\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___instructions", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', block_id, tx_id)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "swaps", "silver__swaps_jupiter_dex"], "unique_id": "model.solana_models.silver__swaps_jupiter_dex", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\swaps\\silver__swaps_jupiter_dex.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.sql", "name": "silver__swaps_jupiter_dex", "alias": "swaps_jupiter_dex", "checksum": {"name": "sha256", "checksum": "76dd7eef7f4adc3e39d784be3694d306a2f8c7b359b526942cf4a9d22e5d4a2e"}, "tags": [], "refs": [["silver___instructions"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.6986055, "compiled_sql": "\n\nWITH jupiter_dex_txs AS (\n\n    SELECT\n        DISTINCT i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        t.fee,\n        t.succeeded,\n        t.signers\n    FROM\n        SOLANA_DEV.silver._instructions\n        i\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = i.tx_id\n    WHERE\n        i.value :programId :: STRING = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo' -- jupiter aggregator v2\n        AND i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\n\n\nAND i._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_jupiter_dex\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_jupiter_dex\n)\n\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        jupiter_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index DESC)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n        b\n        INNER JOIN jupiter_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.swaps_jupiter_dex\n    )\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN jupiter_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) <> '11111111111111111111111111111111'\n        AND e.program_id = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_jupiter_dex\n)\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        s._inserted_timestamp,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.index,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn,\n        s1._inserted_timestamp\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nlifinity_swap_extra_fee AS (\n    SELECT\n        tx_id,\n        INDEX,\n        instruction :accounts [14] :: STRING AS fee_collector,\n        instruction :accounts [15] :: STRING AS fee_collector2\n    FROM\n        SOLANA_DEV.silver.events\n    WHERE\n        program_id = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo'\n        AND instruction :accounts [0] :: STRING = 'EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S'\n        AND (\n            instruction :data :: STRING LIKE '1M6zJqvfqkr%'\n            OR instruction :data :: STRING LIKE '1UEN8S1i2c%'\n        )\n        AND ARRAY_SIZE(\n            instruction :accounts\n        ) > 14\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.swaps_jupiter_dex\n)\n\n),\nswap_actions_final AS (\n    SELECT\n        s.*,\n        f.fee_collector,\n        f2.fee_collector2\n    FROM\n        swap_actions_with_refund s\n        LEFT OUTER JOIN lifinity_swap_extra_fee f\n        ON s.tx_id = f.tx_id\n        AND s.index = f.index\n        AND s.destination = f.fee_collector\n        LEFT OUTER JOIN lifinity_swap_extra_fee f2\n        ON s.tx_id = f2.tx_id\n        AND s.index = f2.index\n        AND s.destination = f2.fee_collector2\n    WHERE\n        (\n            swapper IS NOT NULL\n            OR mint <> originating_mint\n            OR (\n                originating_mint = mint\n                AND max_refund IS NULL\n            ) -- need to do this for situations where it appears the user swaps back to the same mint...\n        )\n        AND f.fee_collector IS NULL\n        AND f2.fee_collector2 IS NULL\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        _inserted_timestamp,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt,\n    a1._inserted_timestamp\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.swaps_jupiter_dex"}, "model.solana_models.silver__nft_sales_opensea": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', tx_id, mint)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH sales_inner_instructions AS (\r\n\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.program_id,\r\n        e.index,\r\n        COALESCE(\r\n            i.value :parsed :info :lamports :: NUMBER,\r\n            0\r\n        ) AS amount,\r\n        e.instruction :accounts [0] :: STRING AS purchaser,\r\n        e.instruction :accounts [1] :: STRING AS seller,\r\n        e.instruction :accounts [2] :: STRING AS nft_account,\r\n        e.ingested_at,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n    WHERE\r\n        program_id = 'hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk' -- Programid used by OpenSea to execute sale, other non-opensea markets also use this\r\n        AND instruction :data :: STRING LIKE '63LNsZWnP5%'\r\n        AND e.instruction :accounts [10] :: STRING = '3o9d13qUvEuuauhFrVom1vuCzgNsJifeaBYDPquaT73Y'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% else %}\r\n    AND e.block_timestamp :: DATE >= '2022-04-03' -- no Opensea sales before this date\r\n{% endif %}\r\n),\r\npost_token_balances AS (\r\n    SELECT\r\n        DISTINCT tx_id,\r\n        account,\r\n        mint\r\n    FROM\r\n        {{ ref('silver___post_token_balances') }}\r\n        p\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    p._inserted_timestamp >= (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\n    WHERE block_timestamp :: DATE >= '2022-04-03' -- no Opensea sales before this date\r\n{% endif %}\r\n),\r\npre_final AS (\r\n    SELECT\r\n        s.block_timestamp,\r\n        s.block_id,\r\n        s.tx_id,\r\n        s.succeeded,\r\n        s.program_id,\r\n        p.mint,\r\n        s.purchaser,\r\n        s.seller,\r\n        SUM(\r\n            s.amount\r\n        ) / pow(\r\n            10,\r\n            9\r\n        ) AS sales_amount,\r\n        s.ingested_at,\r\n        s._inserted_timestamp\r\n    FROM\r\n        sales_inner_instructions s\r\n        LEFT OUTER JOIN post_token_balances p\r\n        ON p.tx_id = s.tx_id\r\n        AND p.account = s.nft_account\r\n    WHERE\r\n        s.block_timestamp :: DATE >= '2022-04-03' -- transactions before this time are not opensea\r\n    GROUP BY\r\n        s.block_timestamp,\r\n        s.block_id,\r\n        s.tx_id,\r\n        s.succeeded,\r\n        s.program_id,\r\n        p.mint,\r\n        s.purchaser,\r\n        s.seller,\r\n        s.ingested_at,\r\n        s._inserted_timestamp\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    pre_final\r\nWHERE\r\n    sales_amount > 0 -- ignore very small amount of txs are actual 0 sales or not sold in SOL (~100 out of >360k)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, mint)", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_opensea"], "unique_id": "model.solana_models.silver__nft_sales_opensea", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_opensea.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.sql", "name": "silver__nft_sales_opensea", "alias": "nft_sales_opensea", "checksum": {"name": "sha256", "checksum": "9091300642c5dbd446b8ebdf3e46a70b23dea19f9b0573a8e53329c560f35a72"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_opensea.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.8151486, "compiled_sql": "\n\nWITH sales_inner_instructions AS (\n\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        t.succeeded,\n        e.program_id,\n        e.index,\n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER,\n            0\n        ) AS amount,\n        e.instruction :accounts [0] :: STRING AS purchaser,\n        e.instruction :accounts [1] :: STRING AS seller,\n        e.instruction :accounts [2] :: STRING AS nft_account,\n        e.ingested_at,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        program_id = 'hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk' -- Programid used by OpenSea to execute sale, other non-opensea markets also use this\n        AND instruction :data :: STRING LIKE '63LNsZWnP5%'\n        AND e.instruction :accounts [10] :: STRING = '3o9d13qUvEuuauhFrVom1vuCzgNsJifeaBYDPquaT73Y'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_opensea\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_opensea\n)\n\n),\npost_token_balances AS (\n    SELECT\n        DISTINCT tx_id,\n        account,\n        mint\n    FROM\n        SOLANA_DEV.silver._post_token_balances\n        p\n\n\nWHERE\n    p._inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            SOLANA_DEV.silver.nft_sales_opensea\n    )\n\n),\npre_final AS (\n    SELECT\n        s.block_timestamp,\n        s.block_id,\n        s.tx_id,\n        s.succeeded,\n        s.program_id,\n        p.mint,\n        s.purchaser,\n        s.seller,\n        SUM(\n            s.amount\n        ) / pow(\n            10,\n            9\n        ) AS sales_amount,\n        s.ingested_at,\n        s._inserted_timestamp\n    FROM\n        sales_inner_instructions s\n        LEFT OUTER JOIN post_token_balances p\n        ON p.tx_id = s.tx_id\n        AND p.account = s.nft_account\n    WHERE\n        s.block_timestamp :: DATE >= '2022-04-03' -- transactions before this time are not opensea\n    GROUP BY\n        s.block_timestamp,\n        s.block_id,\n        s.tx_id,\n        s.succeeded,\n        s.program_id,\n        p.mint,\n        s.purchaser,\n        s.seller,\n        s.ingested_at,\n        s._inserted_timestamp\n)\nSELECT\n    *\nFROM\n    pre_final\nWHERE\n    sales_amount > 0 -- ignore very small amount of txs are actual 0 sales or not sold in SOL (~100 out of >360k)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_opensea"}, "model.solana_models.silver__nft_sales_smb": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base_table AS (\r\n    SELECT \r\n        e.block_timestamp, \r\n        e.block_id, \r\n        e.tx_id, \r\n        t.succeeded, \r\n        e.program_id, \r\n        instruction :accounts[0] :: STRING AS acct_1, \r\n        instruction :accounts[3] :: STRING AS seller, \r\n        instruction :accounts[1] :: STRING AS mint, \r\n        e.ingested_at, \r\n        e._inserted_timestamp\r\n    FROM {{ ref('silver__events') }} e\r\n    \r\n    INNER JOIN {{ ref('silver__transactions') }} t\r\n    ON t.tx_id = e.tx_id \r\n  \r\n    WHERE \r\n        e.block_timestamp :: date >= '2022-08-17'\r\n        AND program_id = 'J7RagMKwSD5zJSbRQZU56ypHUtux8LRDkUpAPSKH4WPp' -- solana monke business marketplace\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nprice AS (\r\n    SELECT\r\n        b.tx_id,\r\n        e.instruction :parsed :info :lamports :: NUMBER AS amount\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN base_table b\r\n        ON e.tx_id = b.tx_id\r\n    WHERE\r\n        e.event_type = 'transfer'\r\n\r\n   {% if is_incremental() %}\r\nAND b._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n) \r\n\r\nSELECT \r\n     b.block_timestamp, \r\n     b.block_id, \r\n     b.tx_id, \r\n     b.succeeded, \r\n     b.program_id, \r\n     b.mint, \r\n     b.acct_1 AS purchaser, \r\n     b.seller, \r\n     p.amount / POW(10,9) AS sales_amount, \r\n     b.ingested_at, \r\n     b._inserted_timestamp\r\nFROM base_table b\r\n\r\nINNER JOIN price p\r\nON b.tx_id = p.tx_id\r\n\r\nWHERE p.amount <> 0 -- To ignore internal wallet transfers on the marketplace\r\nAND b.mint <> 'So11111111111111111111111111111111111111112'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_smb"], "unique_id": "model.solana_models.silver__nft_sales_smb", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_smb.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.sql", "name": "silver__nft_sales_smb", "alias": "nft_sales_smb", "checksum": {"name": "sha256", "checksum": "f5012146cf3a2c750ccab8ae498401bac0aa60d79e7bc01b511925439ae3c673"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_smb.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575622.4396775, "compiled_sql": "\n\nWITH base_table AS (\n    SELECT \n        e.block_timestamp, \n        e.block_id, \n        e.tx_id, \n        t.succeeded, \n        e.program_id, \n        instruction :accounts[0] :: STRING AS acct_1, \n        instruction :accounts[3] :: STRING AS seller, \n        instruction :accounts[1] :: STRING AS mint, \n        e.ingested_at, \n        e._inserted_timestamp\n    FROM SOLANA_DEV.silver.events e\n    \n    INNER JOIN SOLANA_DEV.silver.transactions t\n    ON t.tx_id = e.tx_id \n  \n    WHERE \n        e.block_timestamp :: date >= '2022-08-17'\n        AND program_id = 'J7RagMKwSD5zJSbRQZU56ypHUtux8LRDkUpAPSKH4WPp' -- solana monke business marketplace\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_smb\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_smb\n)\n\n),\nprice AS (\n    SELECT\n        b.tx_id,\n        e.instruction :parsed :info :lamports :: NUMBER AS amount\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN base_table b\n        ON e.tx_id = b.tx_id\n    WHERE\n        e.event_type = 'transfer'\n\n   \nAND b._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_smb\n)\n\n) \n\nSELECT \n     b.block_timestamp, \n     b.block_id, \n     b.tx_id, \n     b.succeeded, \n     b.program_id, \n     b.mint, \n     b.acct_1 AS purchaser, \n     b.seller, \n     p.amount / POW(10,9) AS sales_amount, \n     b.ingested_at, \n     b._inserted_timestamp\nFROM base_table b\n\nINNER JOIN price p\nON b.tx_id = p.tx_id\n\nWHERE p.amount <> 0 -- To ignore internal wallet transfers on the marketplace\nAND b.mint <> 'So11111111111111111111111111111111111111112'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_smb"}, "model.solana_models.silver__blocks2": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"block_id\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE','_inserted_timestamp::date']\r\n) }}\r\n\r\nWITH next_date_to_load AS (\r\n\r\n  SELECT\r\n    MIN(_inserted_timestamp) AS load_timestamp,\r\n    MIN(_inserted_date) as load_date\r\n  FROM\r\n    {{ ref('bronze__blocks2') }}\r\n  WHERE\r\n    _inserted_timestamp > (\r\n      SELECT\r\n        COALESCE(MAX(_inserted_timestamp), '2022-08-12T00:00:00' :: timestamp_ntz)\r\n      FROM\r\n        {{ this }}\r\n    )\r\n),\r\npre_final AS (\r\n  SELECT\r\n    VALUE :block_id :: INTEGER AS block_id,\r\n    TO_TIMESTAMP_NTZ(\r\n      DATA :blockTime\r\n    ) AS block_timestamp,\r\n    'mainnet' AS network,\r\n    'solana' AS chain_id,\r\n    DATA :blockHeight AS block_height,\r\n    DATA :blockhash :: STRING AS block_hash,\r\n    DATA :parentSlot AS previous_block_id,\r\n    DATA :previousBlockhash :: STRING AS previous_block_hash,\r\n    _inserted_date,\r\n    _inserted_timestamp\r\n  FROM\r\n    {{ ref('bronze__blocks2') }}\r\n  WHERE\r\n    block_id IS NOT NULL\r\n    AND error IS NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_date = (\r\n  SELECT\r\n    load_date\r\n  FROM\r\n    next_date_to_load\r\n  LIMIT\r\n    1\r\n)\r\nAND _inserted_timestamp >= (\r\n  SELECT\r\n    load_timestamp\r\n  FROM\r\n    next_date_to_load\r\n  LIMIT\r\n    1\r\n)\r\n{% else %}\r\n  AND _inserted_date = '2022-08-12'\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY block_id\r\nORDER BY\r\n  _inserted_date DESC)) = 1\r\n)\r\nSELECT\r\n  block_id,\r\n  CASE\r\n    WHEN block_timestamp IS NULL THEN DATEADD('millisecond', 500, LAST_VALUE(block_timestamp) ignore nulls over (\r\n    ORDER BY\r\n      block_id rows unbounded preceding))\r\n      ELSE block_timestamp\r\n  END AS block_timestamp,\r\n  network,\r\n  chain_id,\r\n  block_height,\r\n  block_hash,\r\n  previous_block_id,\r\n  previous_block_hash,\r\n  _inserted_date,\r\n  _inserted_timestamp\r\nFROM\r\n  pre_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__blocks2", "model.solana_models.bronze__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::date"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "silver__blocks2"], "unique_id": "model.solana_models.silver__blocks2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\silver__blocks2.sql", "original_file_path": "models\\silver\\silver__blocks2.sql", "name": "silver__blocks2", "alias": "blocks2", "checksum": {"name": "sha256", "checksum": "a33d4d8c3a99fc4bdc12050a93c9604d6150ab75338f1da85e87efcfceb48854"}, "tags": [], "refs": [["bronze__blocks2"], ["bronze__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "solana network name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "chain identifier, this will always be solana.  Field is used in joins with crosschain tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "heigh of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "hash of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_ID": {"name": "PREVIOUS_BLOCK_ID", "description": "previous slot value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_HASH": {"name": "PREVIOUS_BLOCK_HASH", "description": "previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_DATE": {"name": "_INSERTED_DATE", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\silver__blocks2.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::date"]}, "created_at": 1662575622.9390624, "compiled_sql": "\n\nWITH next_date_to_load AS (\n\n  SELECT\n    MIN(_inserted_timestamp) AS load_timestamp,\n    MIN(_inserted_date) as load_date\n  FROM\n    SOLANA_DEV.bronze.blocks2\n  WHERE\n    _inserted_timestamp > (\n      SELECT\n        COALESCE(MAX(_inserted_timestamp), '2022-08-12T00:00:00' :: timestamp_ntz)\n      FROM\n        SOLANA_DEV.silver.blocks2\n    )\n),\npre_final AS (\n  SELECT\n    VALUE :block_id :: INTEGER AS block_id,\n    TO_TIMESTAMP_NTZ(\n      DATA :blockTime\n    ) AS block_timestamp,\n    'mainnet' AS network,\n    'solana' AS chain_id,\n    DATA :blockHeight AS block_height,\n    DATA :blockhash :: STRING AS block_hash,\n    DATA :parentSlot AS previous_block_id,\n    DATA :previousBlockhash :: STRING AS previous_block_hash,\n    _inserted_date,\n    _inserted_timestamp\n  FROM\n    SOLANA_DEV.bronze.blocks2\n  WHERE\n    block_id IS NOT NULL\n    AND error IS NULL\n\n\nAND _inserted_date = (\n  SELECT\n    load_date\n  FROM\n    next_date_to_load\n  LIMIT\n    1\n)\nAND _inserted_timestamp >= (\n  SELECT\n    load_timestamp\n  FROM\n    next_date_to_load\n  LIMIT\n    1\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n  _inserted_date DESC)) = 1\n)\nSELECT\n  block_id,\n  CASE\n    WHEN block_timestamp IS NULL THEN DATEADD('millisecond', 500, LAST_VALUE(block_timestamp) ignore nulls over (\n    ORDER BY\n      block_id rows unbounded preceding))\n      ELSE block_timestamp\n  END AS block_timestamp,\n  network,\n  chain_id,\n  block_height,\n  block_hash,\n  previous_block_id,\n  previous_block_hash,\n  _inserted_date,\n  _inserted_timestamp\nFROM\n  pre_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.blocks2"}, "model.solana_models.silver__nft_sales_yawww": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base_table AS (\r\n\r\n    SELECT\r\n        e.block_timestamp,\r\n        e.block_id,\r\n        e.tx_id,\r\n        t.succeeded,\r\n        e.program_id,\r\n        CASE\r\n            WHEN t.log_messages [1] :: STRING LIKE 'Program log: Instruction: Accept bid' THEN 'bid'\r\n            ELSE 'direct buy'\r\n        END AS sale_type,\r\n        CASE\r\n            WHEN sale_type = 'bid' THEN instruction :accounts [1] :: STRING\r\n            ELSE instruction :accounts [0] :: STRING\r\n        END AS purchaser,\r\n        CASE\r\n            WHEN sale_type = 'bid' THEN instruction :accounts [0] :: STRING\r\n            ELSE instruction :accounts [1] :: STRING\r\n        END AS seller,\r\n        CASE\r\n            WHEN sale_type = 'bid' THEN instruction :accounts [10] :: STRING\r\n            ELSE instruction :accounts [9] :: STRING\r\n        END AS acct_1,\r\n        instruction :accounts [2] :: STRING AS acct_2,\r\n        CASE\r\n            WHEN sale_type = 'bid' THEN instruction :accounts [8] :: STRING\r\n            ELSE instruction :accounts [7] :: STRING\r\n        END AS mint,\r\n        l.value :: STRING AS log_messages,\r\n        e._inserted_timestamp\r\n    FROM\r\n        {{ ref('silver__events') }}\r\n        e\r\n        INNER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON t.tx_id = e.tx_id\r\n        LEFT JOIN TABLE(FLATTEN(t.log_messages)) l\r\n    WHERE\r\n        e.block_timestamp :: date >= '2022-07-12'\r\n        AND program_id = '5SKmrbAxnHV2sgqyDXkGrLrokZYtWWVEEk5Soed7VLVN' -- yawww program ID\r\n        AND (\r\n            l.value :: STRING ILIKE 'Program log: Instruction: Accept bid'\r\n            OR l.value :: STRING ILIKE 'Program log: Instruction: Buy listed item'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\nAND t._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nprice_buys AS (\r\n    SELECT\r\n        b.tx_id,\r\n        SUM(\r\n            i.value :parsed :info :lamports\r\n        ) / pow(\r\n            10,\r\n            9\r\n        ) :: NUMBER AS sales_amount -- sales amount, but only for buys\r\n    FROM\r\n        base_table b\r\n        INNER JOIN {{ ref('silver__events') }}\r\n        e\r\n        ON e.tx_id = b.tx_id\r\n        LEFT JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\r\n    WHERE\r\n        i.value :parsed :type :: STRING = 'transfer'\r\n        AND i.value :program :: STRING = 'system'\r\n\r\n{% if is_incremental() %}\r\nAND e._inserted_timestamp >= (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    b.tx_id\r\n),\r\nprice_bids AS (\r\n    SELECT\r\n        bidder,\r\n        acct_2,\r\n        bid_amount\r\n    FROM\r\n        {{ ref('silver__nft_bids_yawww') }}\r\n        qualify(ROW_NUMBER() over (PARTITION BY bidder, acct_2\r\n    ORDER BY\r\n        block_timestamp DESC)) = 1\r\n)\r\nSELECT\r\n    b.block_timestamp,\r\n    b.block_id,\r\n    b.tx_id,\r\n    b.succeeded,\r\n    b.program_id,\r\n    b.mint,\r\n    b.purchaser,\r\n    b.seller,\r\n    COALESCE(\r\n        sales_amount,\r\n        bid_amount\r\n    ) AS sales_amount,\r\n    sale_type,\r\n    b._inserted_timestamp\r\nFROM\r\n    base_table b\r\n    LEFT OUTER JOIN price_buys p\r\n    ON b.tx_id = p.tx_id\r\n    LEFT OUTER JOIN price_bids bd\r\n    ON b.acct_2 = bd.acct_2\r\n    AND b.purchaser = bd.bidder", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events", "model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "silver", "fqn": ["solana_models", "silver", "nfts", "silver__nft_sales_yawww"], "unique_id": "model.solana_models.silver__nft_sales_yawww", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "silver\\nfts\\silver__nft_sales_yawww.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.sql", "name": "silver__nft_sales_yawww", "alias": "nft_sales_yawww", "checksum": {"name": "sha256", "checksum": "d6ca155ee2278e41024e1c0a5bea062f6330297b6febc362d3f82e7ecd9bf1ae"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"], ["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALE_TYPE": {"name": "SALE_TYPE", "description": "Whether the NFT was purchased directly or using a bid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\silver\\nfts\\silver__nft_sales_yawww.yml", "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1662575623.3039916, "compiled_sql": "\n\nWITH base_table AS (\n\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        t.succeeded,\n        e.program_id,\n        CASE\n            WHEN t.log_messages [1] :: STRING LIKE 'Program log: Instruction: Accept bid' THEN 'bid'\n            ELSE 'direct buy'\n        END AS sale_type,\n        CASE\n            WHEN sale_type = 'bid' THEN instruction :accounts [1] :: STRING\n            ELSE instruction :accounts [0] :: STRING\n        END AS purchaser,\n        CASE\n            WHEN sale_type = 'bid' THEN instruction :accounts [0] :: STRING\n            ELSE instruction :accounts [1] :: STRING\n        END AS seller,\n        CASE\n            WHEN sale_type = 'bid' THEN instruction :accounts [10] :: STRING\n            ELSE instruction :accounts [9] :: STRING\n        END AS acct_1,\n        instruction :accounts [2] :: STRING AS acct_2,\n        CASE\n            WHEN sale_type = 'bid' THEN instruction :accounts [8] :: STRING\n            ELSE instruction :accounts [7] :: STRING\n        END AS mint,\n        l.value :: STRING AS log_messages,\n        e._inserted_timestamp\n    FROM\n        SOLANA_DEV.silver.events\n        e\n        INNER JOIN SOLANA_DEV.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n        LEFT JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        e.block_timestamp :: date >= '2022-07-12'\n        AND program_id = '5SKmrbAxnHV2sgqyDXkGrLrokZYtWWVEEk5Soed7VLVN' -- yawww program ID\n        AND (\n            l.value :: STRING ILIKE 'Program log: Instruction: Accept bid'\n            OR l.value :: STRING ILIKE 'Program log: Instruction: Buy listed item'\n        )\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_yawww\n)\nAND t._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_yawww\n)\n\n),\nprice_buys AS (\n    SELECT\n        b.tx_id,\n        SUM(\n            i.value :parsed :info :lamports\n        ) / pow(\n            10,\n            9\n        ) :: NUMBER AS sales_amount -- sales amount, but only for buys\n    FROM\n        base_table b\n        INNER JOIN SOLANA_DEV.silver.events\n        e\n        ON e.tx_id = b.tx_id\n        LEFT JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        i.value :parsed :type :: STRING = 'transfer'\n        AND i.value :program :: STRING = 'system'\n\n\nAND e._inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA_DEV.silver.nft_sales_yawww\n)\n\nGROUP BY\n    b.tx_id\n),\nprice_bids AS (\n    SELECT\n        bidder,\n        acct_2,\n        bid_amount\n    FROM\n        SOLANA_DEV.silver.nft_bids_yawww\n        qualify(ROW_NUMBER() over (PARTITION BY bidder, acct_2\n    ORDER BY\n        block_timestamp DESC)) = 1\n)\nSELECT\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    b.mint,\n    b.purchaser,\n    b.seller,\n    COALESCE(\n        sales_amount,\n        bid_amount\n    ) AS sales_amount,\n    sale_type,\n    b._inserted_timestamp\nFROM\n    base_table b\n    LEFT OUTER JOIN price_buys p\n    ON b.tx_id = p.tx_id\n    LEFT OUTER JOIN price_bids bd\n    ON b.acct_2 = bd.acct_2\n    AND b.purchaser = bd.bidder", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.silver.nft_sales_yawww"}, "model.solana_models.solana_share__fact_nft_sales": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    marketplace,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM {{ref('core__fact_nft_sales')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_nft_sales"], "unique_id": "model.solana_models.solana_share__fact_nft_sales", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_nft_sales.sql", "original_file_path": "models\\solana_share\\solana_share__fact_nft_sales.sql", "name": "solana_share__fact_nft_sales", "alias": "fact_nft_sales", "checksum": {"name": "sha256", "checksum": "408733594609adc02e0b7d1790ba9473533198ef58ea88effe53fec7c606516f"}, "tags": ["share"], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2012055, "compiled_sql": "\n\n  SELECT \n    marketplace,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM SOLANA_DEV.core.fact_nft_sales\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_nft_sales"}, "model.solana_models.solana_share__dim_nft_metadata": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"contract_address\",\r\n    cluster_by = ['contract_address'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    blockchain,\r\n    contract_address,\r\n    contract_name,\r\n    created_at_timestamp,\r\n    mint,\r\n    creator_address,\r\n    creator_name,\r\n    image_url,\r\n    project_name,\r\n    token_id,\r\n    token_metadata,\r\n    token_metadata_uri,\r\n    token_name\r\nFROM {{ref('core__dim_nft_metadata')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contract_address", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["contract_address"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__dim_nft_metadata"], "unique_id": "model.solana_models.solana_share__dim_nft_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__dim_nft_metadata.sql", "original_file_path": "models\\solana_share\\solana_share__dim_nft_metadata.sql", "name": "solana_share__dim_nft_metadata", "alias": "dim_nft_metadata", "checksum": {"name": "sha256", "checksum": "e0aabca6c38aafec03036798679a8a46a41dd64cad3a161c0c5d738d164a6f93"}, "tags": ["share"], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__dim_nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "contract_address", "cluster_by": ["contract_address"], "tags": ["share"]}, "created_at": 1662575622.2082045, "compiled_sql": "\n\n  SELECT \n    blockchain,\n    contract_address,\n    contract_name,\n    created_at_timestamp,\n    mint,\n    creator_address,\n    creator_name,\n    image_url,\n    project_name,\n    token_id,\n    token_metadata,\n    token_metadata_uri,\n    token_name\nFROM SOLANA_DEV.core.dim_nft_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.dim_nft_metadata"}, "model.solana_models.solana_share__fact_nft_mints": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    block_timestamp, \r\n    block_id, \r\n    tx_id, \r\n    succeeded, \r\n    program_id,\r\n    purchaser,  \r\n    mint_price,\r\n    mint_currency, \r\n    mint \r\nFROM {{ref('core__fact_nft_mints')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_nft_mints"], "unique_id": "model.solana_models.solana_share__fact_nft_mints", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_nft_mints.sql", "original_file_path": "models\\solana_share\\solana_share__fact_nft_mints.sql", "name": "solana_share__fact_nft_mints", "alias": "fact_nft_mints", "checksum": {"name": "sha256", "checksum": "2c4051bb81088822b26ed8f0288d70ba1432f526069bb573f5b8bcaa9583bc13"}, "tags": ["share"], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2165558, "compiled_sql": "\n\n  SELECT \n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded, \n    program_id,\n    purchaser,  \n    mint_price,\n    mint_currency, \n    mint \nFROM SOLANA_DEV.core.fact_nft_mints\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_nft_mints"}, "model.solana_models.solana_share__fact_gauges_votes": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    voter,\r\n    voter_nft,\r\n    gauge,\r\n    power,\r\n    delegated_shares\r\nFROM {{ref('core__fact_gauges_votes')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_gauges_votes"], "unique_id": "model.solana_models.solana_share__fact_gauges_votes", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_gauges_votes.sql", "original_file_path": "models\\solana_share\\solana_share__fact_gauges_votes.sql", "name": "solana_share__fact_gauges_votes", "alias": "fact_gauges_votes", "checksum": {"name": "sha256", "checksum": "c8d9db79354858acc356d0f993a7a05b689590140cf27b1375cdf49397ecfbd1"}, "tags": ["share"], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_gauges_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2226396, "compiled_sql": "\n\n  SELECT \n    program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    voter_nft,\n    gauge,\n    power,\n    delegated_shares\nFROM SOLANA_DEV.core.fact_gauges_votes\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_gauges_votes"}, "model.solana_models.solana_share__fact_swaps": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    swap_program,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    swapper,\r\n    swap_from_amount,\r\n    swap_from_mint,\r\n    swap_to_amount,\r\n    swap_to_mint\r\nFROM {{ref('core__fact_swaps')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_swaps"], "unique_id": "model.solana_models.solana_share__fact_swaps", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_swaps.sql", "original_file_path": "models\\solana_share\\solana_share__fact_swaps.sql", "name": "solana_share__fact_swaps", "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "f13ff5dde0a0bd70acdc11ac16f0533366ed484b65dc5eca3dafc2f6bf74a417"}, "tags": ["share"], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2276313, "compiled_sql": "\n\n  SELECT \n    swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    swap_from_amount,\n    swap_from_mint,\n    swap_to_amount,\n    swap_to_mint\nFROM SOLANA_DEV.core.fact_swaps\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_swaps"}, "model.solana_models.solana_share__fact_proposal_votes": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    governance_platform, \r\n    program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    voter,\r\n    voter_account,\r\n    voter_nft,\r\n    proposal, \r\n    realms_id, \r\n    vote_choice, \r\n    vote_rank, \r\n    vote_weight\r\nFROM {{ref('core__fact_proposal_votes')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_proposal_votes"], "unique_id": "model.solana_models.solana_share__fact_proposal_votes", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_proposal_votes.sql", "original_file_path": "models\\solana_share\\solana_share__fact_proposal_votes.sql", "name": "solana_share__fact_proposal_votes", "alias": "fact_proposal_votes", "checksum": {"name": "sha256", "checksum": "b4e0b34ffbec832ff5056f37ec7362e50aabf83c3423cef6a72124cb4fb6e6a4"}, "tags": ["share"], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_proposal_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2362247, "compiled_sql": "\n\n  SELECT \n    governance_platform, \n    program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    voter_account,\n    voter_nft,\n    proposal, \n    realms_id, \n    vote_choice, \n    vote_rank, \n    vote_weight\nFROM SOLANA_DEV.core.fact_proposal_votes\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_proposal_votes"}, "model.solana_models.core__fact_proposal_creation": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    'realms' as governance_platform, \r\n    program_id as program_name, \r\n    block_timestamp, \r\n    block_id, \r\n    tx_id, \r\n    succeeded,  \r\n    realms_id, \r\n    proposal, \r\n    proposal_writer, \r\n    proposal_name, \r\n    vote_type, \r\n    vote_options\r\nFROM \r\n    {{ ref('silver__proposal_creation_realms') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_proposal_creation"], "unique_id": "model.solana_models.core__fact_proposal_creation", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_proposal_creation.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.sql", "name": "core__fact_proposal_creation", "alias": "fact_proposal_creation", "checksum": {"name": "sha256", "checksum": "484ac357ee44b80c6a8567eb28240ef41487fc7ab52243fb9c758dfe2daff0fe"}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "An EZ view of all proposal creations. Currently, this table is limited to only proposal creations on Realms DAO governance spaces. A space serves as a voting group for an organization, dAPP, or DAO.", "columns": {"GOVERNANCE_PLATFORM": {"name": "GOVERNANCE_PLATFORM", "description": "platform used for governance space", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REALMS_ID": {"name": "REALMS_ID", "description": "An address that is unique to the space or voting group on Realms.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL": {"name": "PROPOSAL", "description": "Address representing the proposal being voted on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_WRITER": {"name": "PROPOSAL_WRITER", "description": "Address of the user who is submitting the proposal for voting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_NAME": {"name": "PROPOSAL_NAME", "description": "The name of the proposal that is being submitted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_TYPE": {"name": "VOTE_TYPE", "description": "The type of voting strategy that will be used for voting on the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_OPTIONS": {"name": "VOTE_OPTIONS", "description": "The options that will be available to users who are voting on the proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_proposal_creation.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662575623.6728506, "compiled_sql": "\n\nSELECT \n    'realms' as governance_platform, \n    program_id as program_name, \n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded,  \n    realms_id, \n    proposal, \n    proposal_writer, \n    proposal_name, \n    vote_type, \n    vote_options\nFROM \n    SOLANA_DEV.silver.proposal_creation_realms", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_proposal_creation"}, "model.solana_models.solana_share__fact_gov_actions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    signer,\r\n    locker_account,\r\n    locker_nft,\r\n    mint,\r\n    action,\r\n    amount\r\nFROM {{ref('core__fact_gov_actions')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_gov_actions"], "unique_id": "model.solana_models.solana_share__fact_gov_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_gov_actions.sql", "original_file_path": "models\\solana_share\\solana_share__fact_gov_actions.sql", "name": "solana_share__fact_gov_actions", "alias": "fact_gov_actions", "checksum": {"name": "sha256", "checksum": "e289b5fd78f3a54f96c14d0c9ce2c169c2f7a446b5f21126eb4bd9ab3125dd2d"}, "tags": ["share"], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_gov_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2473707, "compiled_sql": "\n\n  SELECT \n    program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    locker_account,\n    locker_nft,\n    mint,\n    action,\n    amount\nFROM SOLANA_DEV.core.fact_gov_actions\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_gov_actions"}, "model.solana_models.solana_share__fact_gauges_creates": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    cluster_by = ['block_timestamp::date'],\r\n    tags = ['share']\r\n) }}\r\n\r\n  SELECT \r\n    program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    signer,\r\n    gauge,\r\n    gaugemeister,\r\n    validator_account\r\nFROM {{ref('core__fact_gauges_creates')}}\r\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["share"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::date"], "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "solana_share", "fqn": ["solana_models", "solana_share", "solana_share__fact_gauges_creates"], "unique_id": "model.solana_models.solana_share__fact_gauges_creates", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "solana_share\\solana_share__fact_gauges_creates.sql", "original_file_path": "models\\solana_share\\solana_share__fact_gauges_creates.sql", "name": "solana_share__fact_gauges_creates", "alias": "fact_gauges_creates", "checksum": {"name": "sha256", "checksum": "2f3fa0a96c4f8586081f7d299d7fae6158b93a893eef244b01235949f74e9f90"}, "tags": ["share"], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\solana_share\\solana_share__fact_gauges_creates.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "cluster_by": ["block_timestamp::date"], "tags": ["share"]}, "created_at": 1662575622.2541988, "compiled_sql": "\n\n  SELECT \n    program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    gauge,\n    gaugemeister,\n    validator_account\nFROM SOLANA_DEV.core.fact_gauges_creates\nwhere block_timestamp::date between '2021-12-01' and '2021-12-31'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.solana_share.fact_gauges_creates"}, "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP", "alias": "swaps_saber_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.289602, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_saber_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec"}, "created_at": 1662575622.292438, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.swaps_saber_dex\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.swaps_saber_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_BLOCK_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_BLOCK_ID", "alias": "swaps_saber_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3205557, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_TX_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_TX_ID", "alias": "swaps_saber_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3241248, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_SUCCEEDED.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_SUCCEEDED", "alias": "swaps_saber_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.327363, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_SWAPPER.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_SWAPPER", "alias": "swaps_saber_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.329376, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_SWAPPER", "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_FROM_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_FROM_AMT", "alias": "swaps_saber_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3313699, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_FROM_AMT", "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_FROM_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_FROM_MINT", "alias": "swaps_saber_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3346186, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_FROM_MINT", "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_TO_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_TO_AMT", "alias": "swaps_saber_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3385375, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_TO_AMT", "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex_TO_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_TO_MINT", "alias": "swaps_saber_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.341538, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_saber_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex_TO_MINT", "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.79c65c21c1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.79c65c21c1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP", "alias": "swaps_saber_dex", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3452718, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_saber_dex\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_saber_dex", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_saber_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID", "alias": "swaps_saber_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_saber_dex.yml\\dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673"}, "created_at": 1662575622.348604, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA_DEV.silver.swaps_saber_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.swaps_saber_dex_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.4ec41b30bd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.4ec41b30bd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP", "alias": "nft_mints_tmp_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.37333, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3.7de993f66d": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8d1f8f8868f981d123da9424bbce992d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8d1f8f8868f981d123da9424bbce992d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3.7de993f66d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_8d1f8f8868f981d123da9424bbce992d.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3", "alias": "nft_mints_tmp_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\dbt_expectations_expect_row_va_8d1f8f8868f981d123da9424bbce992d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_8d1f8f8868f981d123da9424bbce992d"}, "created_at": 1662575622.377986, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_mints_tmp\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -3,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_mints_tmp_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_ID.93eddb7cca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_ID.93eddb7cca", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_BLOCK_ID", "alias": "nft_mints_tmp_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.3886054, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_TX_ID.c543ca264b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_TX_ID.c543ca264b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_TX_ID", "alias": "nft_mints_tmp_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.390625, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED.7cd7a32618": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6d696f1c67bce791b049213852102e7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b6d696f1c67bce791b049213852102e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED.7cd7a32618", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b6d696f1c67bce791b049213852102e7.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED", "alias": "nft_mints_tmp_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\dbt_expectations_expect_column_b6d696f1c67bce791b049213852102e7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b6d696f1c67bce791b049213852102e7"}, "created_at": 1662575622.394549, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_silver.nft_mints_tmp_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_PROGRAM_ID.251c1182a5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_PROGRAM_ID.251c1182a5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_PROGRAM_ID", "alias": "nft_mints_tmp_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4123626, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_PURCHASER.1373f0dad2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_PURCHASER.1373f0dad2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_PURCHASER", "alias": "nft_mints_tmp_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.414965, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_MINT_CURRENCY.49faeb06ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_CURRENCY", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_MINT_CURRENCY"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_MINT_CURRENCY.49faeb06ef", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_MINT_CURRENCY.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_MINT_CURRENCY", "alias": "nft_mints_tmp_MINT_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_MINT_CURRENCY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4169748, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere MINT_CURRENCY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_MINT_CURRENCY", "column_name": "MINT_CURRENCY", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_MINT.404b1612e5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_MINT.404b1612e5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_MINT", "alias": "nft_mints_tmp_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4206614, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_MINT_PRICE.7fdc3b7df1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_MINT_PRICE"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_MINT_PRICE.7fdc3b7df1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_MINT_PRICE.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_MINT_PRICE", "alias": "nft_mints_tmp_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_MINT_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4221866, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere MINT_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_MINT_PRICE", "column_name": "MINT_PRICE", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp_INGESTED_AT.566cc3cbdd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp_INGESTED_AT.566cc3cbdd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp_INGESTED_AT", "alias": "nft_mints_tmp_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4241633, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.aac460b351": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.aac460b351", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP", "alias": "nft_mints_tmp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4261796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints_tmp\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_tmp", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY.77b1adc497": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7f1d1aaf4bc3769239bd6f92d3cf44b2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT", "MINT_CURRENCY"], "model": "{{ get_where_subquery(ref('silver__nft_mints_tmp')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints_tmp"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7f1d1aaf4bc3769239bd6f92d3cf44b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY.77b1adc497", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_7f1d1aaf4bc3769239bd6f92d3cf44b2.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints_tmp.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY", "alias": "nft_mints_tmp_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints_tmp.yml\\dbt_utils_unique_combination_o_7f1d1aaf4bc3769239bd6f92d3cf44b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_7f1d1aaf4bc3769239bd6f92d3cf44b2"}, "created_at": 1662575622.4281678, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT, MINT_CURRENCY\n    from SOLANA_DEV.silver.nft_mints_tmp\n    group by TX_ID, MINT, MINT_CURRENCY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_mints_tmp_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_mints_tmp"}, "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP", "alias": "nft_sales_smb_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4406812, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_BLOCK_ID", "alias": "nft_sales_smb_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4426603, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_TX_ID", "alias": "nft_sales_smb_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.444662, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_SUCCEEDED", "alias": "nft_sales_smb_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4467397, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_PROGRAM_ID", "alias": "nft_sales_smb_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4487567, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_PURCHASER", "alias": "nft_sales_smb_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4497569, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_SELLER.ecc06c8686": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_SELLER.ecc06c8686", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_SELLER", "alias": "nft_sales_smb_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.45224, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_MINT", "alias": "nft_sales_smb_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.4542398, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_smb where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_SALES_AMOUNT", "alias": "nft_sales_smb_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.45624, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_INGESTED_AT", "alias": "nft_sales_smb_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4582412, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.7a007575a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.7a007575a1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP", "alias": "nft_sales_smb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4602404, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_smb\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_smb", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_smb.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID", "alias": "nft_sales_smb_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_smb.yml\\dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af"}, "created_at": 1662575622.4628544, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.nft_sales_smb\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_smb_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "alias": "nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4739153, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0"}, "created_at": 1662575622.4774468, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_sales_magic_eden_v2\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID", "alias": "nft_sales_magic_eden_v2_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4897783, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_TX_ID", "alias": "nft_sales_magic_eden_v2_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.491792, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED", "alias": "nft_sales_magic_eden_v2_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4940865, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID", "alias": "nft_sales_magic_eden_v2_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4961035, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_PURCHASER", "alias": "nft_sales_magic_eden_v2_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.4980886, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SELLER.102d39d9f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SELLER.102d39d9f7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_SELLER", "alias": "nft_sales_magic_eden_v2_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.5000873, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_magic_eden_v2 where succeeded = TRUE) dbt_subquery\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_MINT", "alias": "nft_sales_magic_eden_v2_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.5040874, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_magic_eden_v2 where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT", "alias": "nft_sales_magic_eden_v2_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5061038, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT", "alias": "nft_sales_magic_eden_v2_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5071034, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.5fe9a32b3a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.5fe9a32b3a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP", "alias": "nft_sales_magic_eden_v2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5099308, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v2\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v2", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID", "alias": "nft_sales_magic_eden_v2_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v2.yml\\dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277"}, "created_at": 1662575622.5119498, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.nft_sales_magic_eden_v2\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_magic_eden_v2_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP", "alias": "swaps_orca_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5265493, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_orca_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628"}, "created_at": 1662575622.528549, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.swaps_orca_dex\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.swaps_orca_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_BLOCK_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_BLOCK_ID", "alias": "swaps_orca_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5346115, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_TX_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_TX_ID", "alias": "swaps_orca_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.536574, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_SUCCEEDED.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_SUCCEEDED", "alias": "swaps_orca_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5386176, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_SWAPPER.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_SWAPPER", "alias": "swaps_orca_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5401587, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_SWAPPER", "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_FROM_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_FROM_AMT", "alias": "swaps_orca_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5422196, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_FROM_AMT", "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_FROM_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_FROM_MINT", "alias": "swaps_orca_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.544277, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_FROM_MINT", "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_TO_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_TO_AMT", "alias": "swaps_orca_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5482883, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_TO_AMT", "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex_TO_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_TO_MINT", "alias": "swaps_orca_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.552277, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_orca_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex_TO_MINT", "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.85a960973a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.85a960973a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP", "alias": "swaps_orca_dex", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.55428, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_orca_dex\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_orca_dex", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_orca_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID", "alias": "swaps_orca_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_orca_dex.yml\\dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417"}, "created_at": 1662575622.5560951, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA_DEV.silver.swaps_orca_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.swaps_orca_dex_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP", "alias": "swaps_raydium_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5655055, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_raydium_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc"}, "created_at": 1662575622.5673437, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.swaps_raydium_dex\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.swaps_raydium_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_BLOCK_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_BLOCK_ID", "alias": "swaps_raydium_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5773125, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_TX_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_TX_ID", "alias": "swaps_raydium_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.583377, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_SUCCEEDED.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_SUCCEEDED", "alias": "swaps_raydium_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.585301, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_SWAPPER.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_SWAPPER", "alias": "swaps_raydium_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.5875063, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_SWAPPER", "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_FROM_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_FROM_AMT", "alias": "swaps_raydium_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.589867, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_FROM_AMT", "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_FROM_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_FROM_MINT", "alias": "swaps_raydium_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.591862, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_FROM_MINT", "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_TO_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_TO_AMT", "alias": "swaps_raydium_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.593778, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_TO_AMT", "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex_TO_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_TO_MINT", "alias": "swaps_raydium_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.5957801, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_raydium_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex_TO_MINT", "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.3c1c88424c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.3c1c88424c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP", "alias": "swaps_raydium_dex", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.596857, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_raydium_dex\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_raydium_dex", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_raydium_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID", "alias": "swaps_raydium_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_raydium_dex.yml\\dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f"}, "created_at": 1662575622.5988715, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA_DEV.silver.swaps_raydium_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.swaps_raydium_dex_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__transactions2_BLOCK_TIMESTAMP.1260483cfb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transactions2_BLOCK_TIMESTAMP.1260483cfb", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_BLOCK_TIMESTAMP", "alias": "transactions2_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.613094, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2_BLOCK_ID.331c02cf61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__transactions2_BLOCK_ID.331c02cf61", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_BLOCK_ID", "alias": "transactions2_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6151507, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2_RECENT_BLOCK_HASH.c2f764c258": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__transactions2_RECENT_BLOCK_HASH.c2f764c258", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_RECENT_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_RECENT_BLOCK_HASH", "alias": "transactions2_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_RECENT_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6173306, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere RECENT_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_RECENT_BLOCK_HASH", "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2_TX_ID.d2b387ef86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_TX_ID"], "unique_id": "test.solana_models.not_null_silver__transactions2_TX_ID.d2b387ef86", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_TX_ID.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_TX_ID", "alias": "transactions2_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6194787, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transactions2"}, "test.solana_models.null_threshold_silver__transactions2_FEE__0_99.e15c21b151": {"raw_sql": "{{ test_null_threshold(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "null_threshold", "kwargs": {"threshold_percent": 0.99, "column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.solana_models.test_null_threshold", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "null_threshold_silver", "fqn": ["solana_models", "silver", "null_threshold_silver__transactions2_FEE__0_99"], "unique_id": "test.solana_models.null_threshold_silver__transactions2_FEE__0_99.e15c21b151", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "null_threshold_silver__transactions2_FEE__0_99.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "null_threshold_silver__transactions2_FEE__0_99", "alias": "transactions2_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\null_threshold_silver__transactions2_FEE__0_99.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6214914, "compiled_sql": "\n    -- threshold_percent: decimal representing percent of values that should NOT be null\n    WITH t AS (\n        SELECT\n            COUNT(*) * 0.99 AS threshold_num\n        FROM\n            SOLANA_DEV.silver.transactions2\n    ),\n    C AS (\n        SELECT\n            COUNT(*) AS cnt\n        FROM\n            SOLANA_DEV.silver.transactions2\n        WHERE\n            FEE IS NOT NULL\n    )\nSELECT\n    *\nFROM\n    C\nWHERE\n    C.cnt <= (\n        SELECT\n            MAX(threshold_num)\n        FROM\n            t\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.null_threshold_silver.transactions2_FEE", "column_name": "FEE", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2_FEE.e974692c87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_FEE"], "unique_id": "test.solana_models.not_null_silver__transactions2_FEE.e974692c87", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_FEE.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_FEE", "alias": "transactions2_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6264796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_FEE", "column_name": "FEE", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2_SUCCEEDED.535abe8018": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__transactions2_SUCCEEDED.535abe8018", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_SUCCEEDED", "alias": "transactions2_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6284745, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2_ACCOUNT_KEYS.add83fddb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2_ACCOUNT_KEYS"], "unique_id": "test.solana_models.not_null_silver__transactions2_ACCOUNT_KEYS.add83fddb9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2_ACCOUNT_KEYS.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2_ACCOUNT_KEYS", "alias": "transactions2_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2_ACCOUNT_KEYS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6294756, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere ACCOUNT_KEYS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2_ACCOUNT_KEYS", "column_name": "ACCOUNT_KEYS", "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__transactions2__INSERTED_TIMESTAMP.104a002c55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions2__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transactions2__INSERTED_TIMESTAMP.104a002c55", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__transactions2__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "not_null_silver__transactions2__INSERTED_TIMESTAMP", "alias": "transactions2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\not_null_silver__transactions2__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6314769, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.transactions2\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.transactions2", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transactions2"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID.8e06686cba": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8f8841541450498764d5353ffb063071\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions2')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions2"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8f8841541450498764d5353ffb063071", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID.8e06686cba", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_8f8841541450498764d5353ffb063071.sql", "original_file_path": "models\\silver\\silver__transactions2.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID", "alias": "transactions2_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__transactions2.yml\\dbt_utils_unique_combination_o_8f8841541450498764d5353ffb063071.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8f8841541450498764d5353ffb063071"}, "created_at": 1662575622.6335258, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.transactions2\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.transactions2_TX_ID", "column_name": null, "file_key_name": "models.silver__transactions2"}, "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.73635d54bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.73635d54bc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP", "alias": "gauges_creates_marinade_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6488495, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_ID.4179d75cc4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_ID.4179d75cc4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_BLOCK_ID.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_BLOCK_ID", "alias": "gauges_creates_marinade_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6502967, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_TX_ID.f400687b92": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_TX_ID"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_TX_ID.f400687b92", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_TX_ID.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_TX_ID", "alias": "gauges_creates_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6534166, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_SUCCEEDED.95f0be96de": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_SUCCEEDED.95f0be96de", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_SUCCEEDED.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_SUCCEEDED", "alias": "gauges_creates_marinade_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6544175, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_SIGNER.98e89e2d0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_SIGNER"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_SIGNER.98e89e2d0b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_SIGNER.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_SIGNER", "alias": "gauges_creates_marinade_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.655421, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_SIGNER", "column_name": "SIGNER", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGE.cfc7f756b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_GAUGE"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGE.cfc7f756b7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_GAUGE.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_GAUGE", "alias": "gauges_creates_marinade_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_GAUGE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6564248, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere GAUGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_GAUGE", "column_name": "GAUGE", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGEMEISTER.ed4b5d8c4d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGEMEISTER", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_GAUGEMEISTER"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGEMEISTER.ed4b5d8c4d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_GAUGEMEISTER.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_GAUGEMEISTER", "alias": "gauges_creates_marinade_GAUGEMEISTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_GAUGEMEISTER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.658499, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere GAUGEMEISTER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_GAUGEMEISTER", "column_name": "GAUGEMEISTER", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.6f35428b8b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.6f35428b8b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT", "alias": "gauges_creates_marinade_VALIDATOR_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6594949, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere VALIDATOR_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade_VALIDATOR_ACCOUNT", "column_name": "VALIDATOR_ACCOUNT", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.40fbd696a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.40fbd696a6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP", "alias": "gauges_creates_marinade", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6605015, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_creates_marinade\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_creates_marinade", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX.386c43511b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8cdf96c4ab2e1c33796728d3cc72dfb8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__gauges_creates_marinade')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8cdf96c4ab2e1c33796728d3cc72dfb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "gauges", "dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX.386c43511b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_8cdf96c4ab2e1c33796728d3cc72dfb8.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_creates_marinade.yml", "name": "dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX", "alias": "gauges_creates_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_creates_marinade.yml\\dbt_utils_unique_combination_o_8cdf96c4ab2e1c33796728d3cc72dfb8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8cdf96c4ab2e1c33796728d3cc72dfb8"}, "created_at": 1662575622.6615024, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, INDEX\n    from SOLANA_DEV.silver.gauges_creates_marinade\n    group by TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.gauges_creates_marinade_TX_ID", "column_name": null, "file_key_name": "models.silver__gauges_creates_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.bb22dfbbe8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.bb22dfbbe8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP", "alias": "gauges_votes_marinade_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6733115, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2.605b04d87d": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_145696596413021653bed716836155fc\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_145696596413021653bed716836155fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "gauges", "dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2.605b04d87d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_145696596413021653bed716836155fc.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2", "alias": "gauges_votes_marinade_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\dbt_expectations_expect_row_va_145696596413021653bed716836155fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_145696596413021653bed716836155fc"}, "created_at": 1662575622.676309, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.gauges_votes_marinade\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.gauges_votes_marinade_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_ID.f0cfc232c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_ID.f0cfc232c7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_BLOCK_ID.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_BLOCK_ID", "alias": "gauges_votes_marinade_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6795912, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_TX_ID.8d6976c3ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_TX_ID"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_TX_ID.8d6976c3ef", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_TX_ID.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_TX_ID", "alias": "gauges_votes_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6817677, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_SUCCEEDED.832007203b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_SUCCEEDED.832007203b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_SUCCEEDED.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_SUCCEEDED", "alias": "gauges_votes_marinade_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6827762, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER.2d4a3e4541": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_VOTER"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER.2d4a3e4541", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_VOTER.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_VOTER", "alias": "gauges_votes_marinade_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_VOTER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6836958, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere VOTER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_VOTER", "column_name": "VOTER", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER_NFT.7dd18f071d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER_NFT", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_VOTER_NFT"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER_NFT.7dd18f071d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_VOTER_NFT.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_VOTER_NFT", "alias": "gauges_votes_marinade_VOTER_NFT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_VOTER_NFT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6857882, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere VOTER_NFT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_VOTER_NFT", "column_name": "VOTER_NFT", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_GAUGE.715793551e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_GAUGE"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_GAUGE.715793551e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_GAUGE.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_GAUGE", "alias": "gauges_votes_marinade_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_GAUGE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6867392, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere GAUGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_GAUGE", "column_name": "GAUGE", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.bf9e028fad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATED_SHARES", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade_DELEGATED_SHARES"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.bf9e028fad", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade_DELEGATED_SHARES", "alias": "gauges_votes_marinade_DELEGATED_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6887517, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere DELEGATED_SHARES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade_DELEGATED_SHARES", "column_name": "DELEGATED_SHARES", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.b715e87e8a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.b715e87e8a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP", "alias": "gauges_votes_marinade", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.689689, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_marinade\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_marinade", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE.c078bd8801": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d53741fc7cdbda751c07d26194afa3b2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "VOTER", "VOTER_NFT", "GAUGE"], "model": "{{ get_where_subquery(ref('silver__gauges_votes_marinade')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d53741fc7cdbda751c07d26194afa3b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "gauges", "dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE.c078bd8801", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_d53741fc7cdbda751c07d26194afa3b2.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_marinade.yml", "name": "dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE", "alias": "gauges_votes_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_marinade.yml\\dbt_utils_unique_combination_o_d53741fc7cdbda751c07d26194afa3b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_d53741fc7cdbda751c07d26194afa3b2"}, "created_at": 1662575622.6907692, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, VOTER, VOTER_NFT, GAUGE\n    from SOLANA_DEV.silver.gauges_votes_marinade\n    group by TX_ID, VOTER, VOTER_NFT, GAUGE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.gauges_votes_marinade_TX_ID", "column_name": null, "file_key_name": "models.silver__gauges_votes_marinade"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP", "alias": "swaps_jupiter_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.6986055, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_jupiter_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_jupiter_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6"}, "created_at": 1662575622.7005975, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.swaps_jupiter_dex\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.swaps_jupiter_dex_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_BLOCK_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_BLOCK_ID", "alias": "swaps_jupiter_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7096698, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_jupiter_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_TX_ID.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_TX_ID", "alias": "swaps_jupiter_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7119184, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_jupiter_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_SUCCEEDED.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_SUCCEEDED", "alias": "swaps_jupiter_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7139301, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_jupiter_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_SWAPPER.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_SWAPPER", "alias": "swaps_jupiter_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7159302, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_jupiter_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_SWAPPER", "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_FROM_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_FROM_AMT", "alias": "swaps_jupiter_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.7179303, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_FROM_AMT", "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_FROM_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_FROM_MINT", "alias": "swaps_jupiter_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.7209306, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_FROM_MINT", "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_TO_AMT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_TO_AMT", "alias": "swaps_jupiter_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.72293, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_TO_AMT", "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex_TO_MINT.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_TO_MINT", "alias": "swaps_jupiter_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.7249305, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex_TO_MINT", "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.651303cb9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "swaps", "not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.651303cb9e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP", "alias": "swaps_jupiter_dex", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7271166, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.swaps_jupiter_dex\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.swaps_jupiter_dex", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "swaps", "dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154.sql", "original_file_path": "models\\silver\\swaps\\silver__swaps_jupiter_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID", "alias": "swaps_jupiter_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\swaps\\silver__swaps_jupiter_dex.yml\\dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154"}, "created_at": 1662575622.7291684, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA_DEV.silver.swaps_jupiter_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.swaps_jupiter_dex_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP", "alias": "nft_sales_solanart_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7435188, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_solanart_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b"}, "created_at": 1662575622.745433, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_sales_solanart\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_sales_solanart_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_BLOCK_ID", "alias": "nft_sales_solanart_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7504342, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_TX_ID", "alias": "nft_sales_solanart_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7524333, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_SUCCEEDED", "alias": "nft_sales_solanart_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7544327, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_PROGRAM_ID", "alias": "nft_sales_solanart_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7567399, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_PURCHASER", "alias": "nft_sales_solanart_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7587597, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_SELLER.28a7c2d0f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_SELLER.28a7c2d0f9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_SELLER", "alias": "nft_sales_solanart_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.760764, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_MINT", "alias": "nft_sales_solanart_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.7628438, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_solanart where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_SALES_AMOUNT", "alias": "nft_sales_solanart_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7687597, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_INGESTED_AT", "alias": "nft_sales_solanart_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.770762, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.60da42023e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.60da42023e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP", "alias": "nft_sales_solanart", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7734964, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solanart\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solanart", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT"], "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solanart.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT", "alias": "nft_sales_solanart_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solanart.yml\\dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7"}, "created_at": 1662575622.7754965, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT\n    from SOLANA_DEV.silver.nft_sales_solanart\n    group by TX_ID, MINT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_solanart_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.7f4fb1df77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.7f4fb1df77", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP", "alias": "proposal_votes_marinade_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.784498, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_ID.dc4c5b7cec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_ID.dc4c5b7cec", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_BLOCK_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_BLOCK_ID", "alias": "proposal_votes_marinade_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7879121, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_TX_ID.bdbe3e6473": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_TX_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_TX_ID.bdbe3e6473", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_TX_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_TX_ID", "alias": "proposal_votes_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7914374, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_SUCCEEDED.c699ebcd91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_SUCCEEDED.c699ebcd91", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_SUCCEEDED.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_SUCCEEDED", "alias": "proposal_votes_marinade_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.7954686, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER.3cadae8696": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_VOTER"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER.3cadae8696", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_VOTER.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_VOTER", "alias": "proposal_votes_marinade_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_VOTER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.800439, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere VOTER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_VOTER", "column_name": "VOTER", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_NFT.4e7b99e8f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER_NFT", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_VOTER_NFT"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_NFT.4e7b99e8f3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_VOTER_NFT.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_VOTER_NFT", "alias": "proposal_votes_marinade_VOTER_NFT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_VOTER_NFT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8024378, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere VOTER_NFT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_VOTER_NFT", "column_name": "VOTER_NFT", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.0bfe7a95f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.0bfe7a95f4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT", "alias": "proposal_votes_marinade_VOTER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.80405, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere VOTER_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_VOTER_ACCOUNT", "column_name": "VOTER_ACCOUNT", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade_PROPOSAL.df80e9426f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade_PROPOSAL"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade_PROPOSAL.df80e9426f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade_PROPOSAL.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade_PROPOSAL", "alias": "proposal_votes_marinade_PROPOSAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade_PROPOSAL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8060756, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere PROPOSAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade_PROPOSAL", "column_name": "PROPOSAL", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.aa308c1b21": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.aa308c1b21", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP", "alias": "proposal_votes_marinade", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8070812, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_marinade\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_marinade", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL.cd45ca087d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a9da0da5e41c625cd94af8384fd5f8e1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "VOTER_NFT", "PROPOSAL"], "model": "{{ get_where_subquery(ref('silver__proposal_votes_marinade')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_marinade"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a9da0da5e41c625cd94af8384fd5f8e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "governance", "dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL.cd45ca087d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_a9da0da5e41c625cd94af8384fd5f8e1.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_marinade.yml", "name": "dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL", "alias": "proposal_votes_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_marinade.yml\\dbt_utils_unique_combination_o_a9da0da5e41c625cd94af8384fd5f8e1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_a9da0da5e41c625cd94af8384fd5f8e1"}, "created_at": 1662575622.8081164, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, VOTER_NFT, PROPOSAL\n    from SOLANA_DEV.silver.proposal_votes_marinade\n    group by TX_ID, VOTER_NFT, PROPOSAL\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.proposal_votes_marinade_TX_ID", "column_name": null, "file_key_name": "models.silver__proposal_votes_marinade"}, "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.e71af9ab43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.e71af9ab43", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP", "alias": "nft_sales_opensea_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8151486, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2.c9762e9bdf": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_00d0a06a0a487eafc654f884fac730a5\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_00d0a06a0a487eafc654f884fac730a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2.c9762e9bdf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_00d0a06a0a487eafc654f884fac730a5.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_opensea_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\dbt_expectations_expect_row_va_00d0a06a0a487eafc654f884fac730a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_00d0a06a0a487eafc654f884fac730a5"}, "created_at": 1662575622.8170607, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_sales_opensea\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_sales_opensea_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_ID.2caa773a25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_ID.2caa773a25", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_BLOCK_ID", "alias": "nft_sales_opensea_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8242264, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_TX_ID.c5ba3432cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_TX_ID.c5ba3432cb", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_TX_ID", "alias": "nft_sales_opensea_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.830222, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_SUCCEEDED.31a296fb81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_SUCCEEDED.31a296fb81", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_SUCCEEDED", "alias": "nft_sales_opensea_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8323371, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_PROGRAM_ID.88c3057bb1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_PROGRAM_ID.88c3057bb1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_PROGRAM_ID", "alias": "nft_sales_opensea_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8348062, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_PURCHASER.81d8b51f25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_PURCHASER.81d8b51f25", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_PURCHASER", "alias": "nft_sales_opensea_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8368244, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_SELLER.d0749d4bee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_SELLER.d0749d4bee", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_SELLER", "alias": "nft_sales_opensea_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8389096, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_MINT.e1669a6bae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_MINT.e1669a6bae", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_MINT", "alias": "nft_sales_opensea_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.8409033, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_opensea where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_SALES_AMOUNT.7bf01bc93a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_SALES_AMOUNT.7bf01bc93a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_SALES_AMOUNT", "alias": "nft_sales_opensea_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8428185, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea_INGESTED_AT.fafe37ae35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea_INGESTED_AT.fafe37ae35", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea_INGESTED_AT", "alias": "nft_sales_opensea_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8449078, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.06c60c6c37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.06c60c6c37", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP", "alias": "nft_sales_opensea", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8459032, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_opensea\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_opensea", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT.f66dcb74ec": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_479aaf14829f1b3d475a3520f61980f9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT"], "model": "{{ get_where_subquery(ref('silver__nft_sales_opensea')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_opensea"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_479aaf14829f1b3d475a3520f61980f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT.f66dcb74ec", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_479aaf14829f1b3d475a3520f61980f9.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_opensea.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT", "alias": "nft_sales_opensea_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_opensea"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_opensea.yml\\dbt_utils_unique_combination_o_479aaf14829f1b3d475a3520f61980f9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_479aaf14829f1b3d475a3520f61980f9"}, "created_at": 1662575622.8479025, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT\n    from SOLANA_DEV.silver.nft_sales_opensea\n    group by TX_ID, MINT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_opensea_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_opensea"}, "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.7882aa9704": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.7882aa9704", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP", "alias": "nft_bids_yawww_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.860985, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2.a84b7c01df": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ea3f458e9d93a7ad1bbec65ef6211079\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ea3f458e9d93a7ad1bbec65ef6211079", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2.a84b7c01df", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_ea3f458e9d93a7ad1bbec65ef6211079.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2", "alias": "nft_bids_yawww_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\dbt_expectations_expect_row_va_ea3f458e9d93a7ad1bbec65ef6211079.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_ea3f458e9d93a7ad1bbec65ef6211079"}, "created_at": 1662575622.863062, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_bids_yawww\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_bids_yawww_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_ID.9749097c5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_ID.9749097c5b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_BLOCK_ID", "alias": "nft_bids_yawww_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8693004, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww_TX_ID.6ef944c5f0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_TX_ID.6ef944c5f0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_TX_ID", "alias": "nft_bids_yawww_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8713355, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww_SUCCEEDED.673964be11": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_SUCCEEDED.673964be11", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_SUCCEEDED", "alias": "nft_bids_yawww_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8733408, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww_BIDDER.9dd9d8dff8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BIDDER", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_BIDDER"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_BIDDER.9dd9d8dff8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_BIDDER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_BIDDER", "alias": "nft_bids_yawww_BIDDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_BIDDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8752449, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere BIDDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_BIDDER", "column_name": "BIDDER", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww_ACCT_2.c4062e4e6f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCT_2", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_ACCT_2"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_ACCT_2.c4062e4e6f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_ACCT_2.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_ACCT_2", "alias": "nft_bids_yawww_ACCT_2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_ACCT_2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8762424, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere ACCT_2 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_ACCT_2", "column_name": "ACCT_2", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww_BID_AMOUNT.9b0ba7707e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BID_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww_BID_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww_BID_AMOUNT.9b0ba7707e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww_BID_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww_BID_AMOUNT", "alias": "nft_bids_yawww_BID_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww_BID_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8782673, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere BID_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww_BID_AMOUNT", "column_name": "BID_AMOUNT", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.779932a52b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.779932a52b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP", "alias": "nft_bids_yawww", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8792796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_bids_yawww\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_bids_yawww", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID.2c013394c9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3413a77c62063addb0201c739a587983\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__nft_bids_yawww')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_bids_yawww"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3413a77c62063addb0201c739a587983", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID.2c013394c9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_3413a77c62063addb0201c739a587983.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_bids_yawww.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID", "alias": "nft_bids_yawww_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_bids_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_bids_yawww.yml\\dbt_utils_unique_combination_o_3413a77c62063addb0201c739a587983.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_3413a77c62063addb0201c739a587983"}, "created_at": 1662575622.881661, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.nft_bids_yawww\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_bids_yawww_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_bids_yawww"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "alias": "nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.8978882, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3"}, "created_at": 1662575622.8999066, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_sales_magic_eden_v1\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID", "alias": "nft_sales_magic_eden_v1_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9058845, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_TX_ID", "alias": "nft_sales_magic_eden_v1_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9078124, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED", "alias": "nft_sales_magic_eden_v1_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9088864, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID", "alias": "nft_sales_magic_eden_v1_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9108849, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_PURCHASER", "alias": "nft_sales_magic_eden_v1_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.9130948, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_magic_eden_v1 where succeeded = TRUE) dbt_subquery\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SELLER.95475fb609": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SELLER.95475fb609", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_SELLER", "alias": "nft_sales_magic_eden_v1_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.9161868, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_magic_eden_v1 where succeeded = TRUE) dbt_subquery\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_MINT", "alias": "nft_sales_magic_eden_v1_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575622.9200737, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_magic_eden_v1 where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT", "alias": "nft_sales_magic_eden_v1_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9220982, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT", "alias": "nft_sales_magic_eden_v1_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.927537, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.868714bef2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.868714bef2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP", "alias": "nft_sales_magic_eden_v1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9296927, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_magic_eden_v1\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_magic_eden_v1", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER.85066a3a10": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9ce2916b6ef80abd4473022af07b9d22\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT", "SELLER"], "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9ce2916b6ef80abd4473022af07b9d22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER.85066a3a10", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_9ce2916b6ef80abd4473022af07b9d22.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER", "alias": "nft_sales_magic_eden_v1_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_magic_eden_v1.yml\\dbt_utils_unique_combination_o_9ce2916b6ef80abd4473022af07b9d22.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_9ce2916b6ef80abd4473022af07b9d22"}, "created_at": 1662575622.9306269, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT, SELLER\n    from SOLANA_DEV.silver.nft_sales_magic_eden_v1\n    group by TX_ID, MINT, SELLER\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_magic_eden_v1_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__blocks2_BLOCK_ID.1b57625e49": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__blocks2_BLOCK_ID.1b57625e49", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_BLOCK_ID", "alias": "blocks2_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9400623, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2_BLOCK_TIMESTAMP.d27eb04036": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__blocks2_BLOCK_TIMESTAMP.d27eb04036", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_BLOCK_TIMESTAMP", "alias": "blocks2_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9410634, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2_NETWORK.fecf39aef5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_NETWORK"], "unique_id": "test.solana_models.not_null_silver__blocks2_NETWORK.fecf39aef5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_NETWORK.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_NETWORK", "alias": "blocks2_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9420624, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_NETWORK", "column_name": "NETWORK", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2_CHAIN_ID.665f1e1503": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_CHAIN_ID"], "unique_id": "test.solana_models.not_null_silver__blocks2_CHAIN_ID.665f1e1503", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_CHAIN_ID", "alias": "blocks2_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9446146, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2_BLOCK_HASH.cd38b2ffa4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__blocks2_BLOCK_HASH.cd38b2ffa4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_BLOCK_HASH", "alias": "blocks2_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9516246, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_ID.3f8f35b7af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_PREVIOUS_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_ID.3f8f35b7af", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_PREVIOUS_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_PREVIOUS_BLOCK_ID", "alias": "blocks2_PREVIOUS_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_PREVIOUS_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.953661, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere PREVIOUS_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_PREVIOUS_BLOCK_ID", "column_name": "PREVIOUS_BLOCK_ID", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.ae3035b946": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_PREVIOUS_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.ae3035b946", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_PREVIOUS_BLOCK_HASH", "alias": "blocks2_PREVIOUS_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.955578, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere PREVIOUS_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2_PREVIOUS_BLOCK_HASH", "column_name": "PREVIOUS_BLOCK_HASH", "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__blocks2__INSERTED_DATE.d069b97c64": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_DATE", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2__INSERTED_DATE"], "unique_id": "test.solana_models.not_null_silver__blocks2__INSERTED_DATE.d069b97c64", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2__INSERTED_DATE.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2__INSERTED_DATE", "alias": "blocks2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\not_null_silver__blocks2__INSERTED_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9576561, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.blocks2\nwhere _INSERTED_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.blocks2", "column_name": "_INSERTED_DATE", "file_key_name": "models.silver__blocks2"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID.600f932e22": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_634486bc83301ac2f957d24bb3f5de7f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks2"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_634486bc83301ac2f957d24bb3f5de7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID.600f932e22", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_634486bc83301ac2f957d24bb3f5de7f.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID", "alias": "blocks2_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\silver__blocks2.yml\\dbt_utils_unique_combination_o_634486bc83301ac2f957d24bb3f5de7f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_634486bc83301ac2f957d24bb3f5de7f"}, "created_at": 1662575622.9589531, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from SOLANA_DEV.silver.blocks2\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.blocks2_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__blocks2"}, "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.8e473b0a82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.8e473b0a82", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP", "alias": "proposal_creation_realms_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.97188, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5.f018e56096": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_926d43a6780fa6ee8054f9a23f3d7df6\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 5, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_926d43a6780fa6ee8054f9a23f3d7df6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "governance", "dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5.f018e56096", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_926d43a6780fa6ee8054f9a23f3d7df6.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5", "alias": "proposal_creation_realms_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\dbt_expectations_expect_row_va_926d43a6780fa6ee8054f9a23f3d7df6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_926d43a6780fa6ee8054f9a23f3d7df6"}, "created_at": 1662575622.9747858, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.proposal_creation_realms\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -5,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.proposal_creation_realms_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_ID.9af4ef943d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_ID.9af4ef943d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_BLOCK_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_BLOCK_ID", "alias": "proposal_creation_realms_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9826305, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_TX_ID.1ac6e10e4b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_TX_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_TX_ID.1ac6e10e4b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_TX_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_TX_ID", "alias": "proposal_creation_realms_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9887173, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_SUCCEEDED.5bdc0fd83d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_SUCCEEDED.5bdc0fd83d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_SUCCEEDED.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_SUCCEEDED", "alias": "proposal_creation_realms_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9919221, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_INDEX.163253349a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_INDEX"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_INDEX.163253349a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_INDEX.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_INDEX", "alias": "proposal_creation_realms_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9930127, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_INDEX", "column_name": "INDEX", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_PROGRAM_ID.9e5b4c6744": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_PROGRAM_ID.9e5b4c6744", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_PROGRAM_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_PROGRAM_ID", "alias": "proposal_creation_realms_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9950256, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_REALMS_ID.0c95daf7ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REALMS_ID", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_REALMS_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_REALMS_ID.0c95daf7ed", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_REALMS_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_REALMS_ID", "alias": "proposal_creation_realms_REALMS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_REALMS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9960122, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere REALMS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_REALMS_ID", "column_name": "REALMS_ID", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL.d1899e0b24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_PROPOSAL"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL.d1899e0b24", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_PROPOSAL.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_PROPOSAL", "alias": "proposal_creation_realms_PROPOSAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_PROPOSAL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9970303, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere PROPOSAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_PROPOSAL", "column_name": "PROPOSAL", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.a475a6e153": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL_WRITER", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_PROPOSAL_WRITER"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.a475a6e153", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_PROPOSAL_WRITER", "alias": "proposal_creation_realms_PROPOSAL_WRITER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575622.9980235, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere PROPOSAL_WRITER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_PROPOSAL_WRITER", "column_name": "PROPOSAL_WRITER", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_NAME.55dbd6390f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL_NAME", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_PROPOSAL_NAME"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_NAME.55dbd6390f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_PROPOSAL_NAME.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_PROPOSAL_NAME", "alias": "proposal_creation_realms_PROPOSAL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_PROPOSAL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.000028, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere PROPOSAL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_PROPOSAL_NAME", "column_name": "PROPOSAL_NAME", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_TYPE.34d2959fd9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_TYPE", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_VOTE_TYPE"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_TYPE.34d2959fd9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_VOTE_TYPE.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_VOTE_TYPE", "alias": "proposal_creation_realms_VOTE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_VOTE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0010116, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere VOTE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_VOTE_TYPE", "column_name": "VOTE_TYPE", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_OPTIONS.fdfc6d924f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_OPTIONS", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms_VOTE_OPTIONS"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_OPTIONS.fdfc6d924f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms_VOTE_OPTIONS.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms_VOTE_OPTIONS", "alias": "proposal_creation_realms_VOTE_OPTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms_VOTE_OPTIONS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0019312, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere VOTE_OPTIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms_VOTE_OPTIONS", "column_name": "VOTE_OPTIONS", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.5dd86e0cc4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.5dd86e0cc4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP", "alias": "proposal_creation_realms", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0040162, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_creation_realms\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_creation_realms", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID.f2872abdee": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dfa01132b8a30fcd20e3279aa2213f0f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__proposal_creation_realms')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_creation_realms"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dfa01132b8a30fcd20e3279aa2213f0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "governance", "dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID.f2872abdee", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_dfa01132b8a30fcd20e3279aa2213f0f.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_creation_realms.yml", "name": "dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID", "alias": "proposal_creation_realms_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_creation_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_creation_realms.yml\\dbt_utils_unique_combination_o_dfa01132b8a30fcd20e3279aa2213f0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_dfa01132b8a30fcd20e3279aa2213f0f"}, "created_at": 1662575623.0055683, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.proposal_creation_realms\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.proposal_creation_realms_TX_ID", "column_name": null, "file_key_name": "models.silver__proposal_creation_realms"}, "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP", "alias": "nft_sales_solport_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0130916, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_BLOCK_ID", "alias": "nft_sales_solport_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0150917, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_TX_ID", "alias": "nft_sales_solport_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0170996, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_SUCCEEDED", "alias": "nft_sales_solport_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0180926, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_PROGRAM_ID", "alias": "nft_sales_solport_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.020092, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_PURCHASER", "alias": "nft_sales_solport_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0216587, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_SELLER.7aef62f7e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_SELLER.7aef62f7e9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_SELLER", "alias": "nft_sales_solport_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0226693, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_MINT", "alias": "nft_sales_solport_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575623.0246687, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_solport where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_SALES_AMOUNT", "alias": "nft_sales_solport_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0266693, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_INGESTED_AT", "alias": "nft_sales_solport_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.028669, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.5d64f74072": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.5d64f74072", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP", "alias": "nft_sales_solport", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0296693, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_solport\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_solport", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT"], "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_solport.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT", "alias": "nft_sales_solport_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_solport.yml\\dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43"}, "created_at": 1662575623.031669, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT\n    from SOLANA_DEV.silver.nft_sales_solport\n    group by TX_ID, MINT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_solport_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.0e1373a9ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.0e1373a9ce", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP", "alias": "gov_actions_saber_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0397122, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7.4042f35d74": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_58269a1240164491e76427aea33cf33b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 7, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_58269a1240164491e76427aea33cf33b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "governance", "dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7.4042f35d74", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_58269a1240164491e76427aea33cf33b.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7", "alias": "gov_actions_saber_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\dbt_expectations_expect_row_va_58269a1240164491e76427aea33cf33b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_58269a1240164491e76427aea33cf33b"}, "created_at": 1662575623.041713, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.gov_actions_saber\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -7,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.gov_actions_saber_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_ID.e57b17e737": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_ID.e57b17e737", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_BLOCK_ID.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_BLOCK_ID", "alias": "gov_actions_saber_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.045713, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_TX_ID.b1d3dcd5b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_TX_ID"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_TX_ID.b1d3dcd5b7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_TX_ID.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_TX_ID", "alias": "gov_actions_saber_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.047713, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_SUCCEEDED.cec72b1c03": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_SUCCEEDED.cec72b1c03", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_SUCCEEDED.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_SUCCEEDED", "alias": "gov_actions_saber_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.0497127, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_SIGNER.4d64f40393": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_SIGNER"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_SIGNER.4d64f40393", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_SIGNER.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_SIGNER", "alias": "gov_actions_saber_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.050713, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_SIGNER", "column_name": "SIGNER", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.a93b78adaa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOCKER_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_LOCKER_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.a93b78adaa", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_LOCKER_ACCOUNT", "alias": "gov_actions_saber_LOCKER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.053004, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere LOCKER_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_LOCKER_ACCOUNT", "column_name": "LOCKER_ACCOUNT", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.ee8c4796e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ESCROW_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_ESCROW_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.ee8c4796e0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_ESCROW_ACCOUNT", "alias": "gov_actions_saber_ESCROW_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1093976, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere ESCROW_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_ESCROW_ACCOUNT", "column_name": "ESCROW_ACCOUNT", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_MINT.bd58c5033d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_MINT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_MINT.bd58c5033d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_MINT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_MINT", "alias": "gov_actions_saber_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.110486, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_MINT", "column_name": "MINT", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_ACTION.361f79ef61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_ACTION"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_ACTION.361f79ef61", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_ACTION.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_ACTION", "alias": "gov_actions_saber_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1124725, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_ACTION", "column_name": "ACTION", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber_AMOUNT.c10703a914": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber_AMOUNT.c10703a914", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber_AMOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber_AMOUNT", "alias": "gov_actions_saber_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1144807, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.c01fa19e41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.c01fa19e41", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP", "alias": "gov_actions_saber", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1162257, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_saber\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_saber", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID.ce7ee21c9c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7f57badf72152ea34adb3a49ee21af89\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__gov_actions_saber')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_saber"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7f57badf72152ea34adb3a49ee21af89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "governance", "dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID.ce7ee21c9c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_7f57badf72152ea34adb3a49ee21af89.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_saber.yml", "name": "dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID", "alias": "gov_actions_saber_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_saber.yml\\dbt_utils_unique_combination_o_7f57badf72152ea34adb3a49ee21af89.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_7f57badf72152ea34adb3a49ee21af89"}, "created_at": 1662575623.1172962, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.gov_actions_saber\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.gov_actions_saber_TX_ID", "column_name": null, "file_key_name": "models.silver__gov_actions_saber"}, "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCK_TIMESTAMP", "alias": "nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1264, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3", "alias": "nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b"}, "created_at": 1662575623.1284077, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_mints\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -3,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_mints_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCK_ID", "alias": "nft_mints_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1349254, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_TX_ID", "alias": "nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1369257, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED", "alias": "nft_mints_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005"}, "created_at": 1662575623.1389246, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_silver.nft_mints_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_PROGRAM_ID", "alias": "nft_mints_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1419268, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_PURCHASER", "alias": "nft_mints_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1429253, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT", "alias": "nft_mints_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1464756, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_INGESTED_AT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_INGESTED_AT", "alias": "nft_mints_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1487043, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints__INSERTED_TIMESTAMP.d96edc2cdd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_mints__INSERTED_TIMESTAMP.d96edc2cdd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints__INSERTED_TIMESTAMP", "alias": "nft_mints", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\not_null_silver__nft_mints__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1497016, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_mints\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_mints", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY.83f9ea3f73": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c385dd6899b9d9767becbc7d83aa0b94\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT", "MINT_CURRENCY"], "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c385dd6899b9d9767becbc7d83aa0b94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY.83f9ea3f73", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_c385dd6899b9d9767becbc7d83aa0b94.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY", "alias": "nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_mints.yml\\dbt_utils_unique_combination_o_c385dd6899b9d9767becbc7d83aa0b94.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_c385dd6899b9d9767becbc7d83aa0b94"}, "created_at": 1662575623.1524744, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT, MINT_CURRENCY\n    from SOLANA_DEV.silver.nft_mints\n    group by TX_ID, MINT, MINT_CURRENCY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_mints_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.6ae077e628": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.6ae077e628", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP", "alias": "gauges_votes_saber_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.161743, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2.fb87b0a75b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3d88717474a2a13c739c34738d21f266\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3d88717474a2a13c739c34738d21f266", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "gauges", "dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2.fb87b0a75b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_3d88717474a2a13c739c34738d21f266.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2", "alias": "gauges_votes_saber_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\dbt_expectations_expect_row_va_3d88717474a2a13c739c34738d21f266.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_3d88717474a2a13c739c34738d21f266"}, "created_at": 1662575623.16477, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.gauges_votes_saber\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.gauges_votes_saber_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_ID.2be229f6f0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_ID.2be229f6f0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_BLOCK_ID.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_BLOCK_ID", "alias": "gauges_votes_saber_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.170795, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_TX_ID.f58a7640de": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_TX_ID"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_TX_ID.f58a7640de", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_TX_ID.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_TX_ID", "alias": "gauges_votes_saber_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1727705, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_SUCCEEDED.0773c5f9cc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_SUCCEEDED.0773c5f9cc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_SUCCEEDED.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_SUCCEEDED", "alias": "gauges_votes_saber_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1747875, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_VOTER.0aac8d5a72": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_VOTER"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_VOTER.0aac8d5a72", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_VOTER.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_VOTER", "alias": "gauges_votes_saber_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_VOTER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1767876, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere VOTER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_VOTER", "column_name": "VOTER", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_GAUGE.240b87f396": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_GAUGE"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_GAUGE.240b87f396", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_GAUGE.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_GAUGE", "alias": "gauges_votes_saber_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_GAUGE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1788545, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere GAUGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_GAUGE", "column_name": "GAUGE", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_DELEGATED_SHARES.876c99a9bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATED_SHARES", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_DELEGATED_SHARES"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_DELEGATED_SHARES.876c99a9bf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_DELEGATED_SHARES.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_DELEGATED_SHARES", "alias": "gauges_votes_saber_DELEGATED_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_DELEGATED_SHARES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1801224, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere DELEGATED_SHARES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_DELEGATED_SHARES", "column_name": "DELEGATED_SHARES", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber_POWER.af1e6ac76c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POWER", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber_POWER"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber_POWER.af1e6ac76c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber_POWER.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber_POWER", "alias": "gauges_votes_saber_POWER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber_POWER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1840882, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere POWER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber_POWER", "column_name": "POWER", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.9aeaff1542": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "gauges", "not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.9aeaff1542", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP", "alias": "gauges_votes_saber", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.185173, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gauges_votes_saber\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gauges_votes_saber", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE.15f3bd1b81": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_68ee8e71d8e0613852f184bf836cf8da\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "VOTER", "GAUGE"], "model": "{{ get_where_subquery(ref('silver__gauges_votes_saber')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gauges_votes_saber"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_68ee8e71d8e0613852f184bf836cf8da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "gauges", "dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE.15f3bd1b81", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_68ee8e71d8e0613852f184bf836cf8da.sql", "original_file_path": "models\\silver\\gauges\\silver__gauges_votes_saber.yml", "name": "dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE", "alias": "gauges_votes_saber_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gauges_votes_saber"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\gauges\\silver__gauges_votes_saber.yml\\dbt_utils_unique_combination_o_68ee8e71d8e0613852f184bf836cf8da.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_68ee8e71d8e0613852f184bf836cf8da"}, "created_at": 1662575623.1871717, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, VOTER, GAUGE\n    from SOLANA_DEV.silver.gauges_votes_saber\n    group by TX_ID, VOTER, GAUGE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.gauges_votes_saber_TX_ID", "column_name": null, "file_key_name": "models.silver__gauges_votes_saber"}, "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_BLOCKCHAIN"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_BLOCKCHAIN", "alias": "nft_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.197358, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_CONTRACT_ADDRESS"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_CONTRACT_ADDRESS.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CONTRACT_ADDRESS", "alias": "nft_metadata_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.1993582, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_CONTRACT_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_CONTRACT_NAME.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CONTRACT_NAME", "alias": "nft_metadata_CONTRACT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_CONTRACT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2013578, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere CONTRACT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_CONTRACT_NAME", "column_name": "CONTRACT_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP", "alias": "nft_metadata_CREATED_AT_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.202358, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere CREATED_AT_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_CREATED_AT_TIMESTAMP", "column_name": "CREATED_AT_TIMESTAMP", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_CREATOR_ADDRESS"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_CREATOR_ADDRESS.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CREATOR_ADDRESS", "alias": "nft_metadata_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2063594, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_CREATOR_ADDRESS", "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_CREATOR_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_CREATOR_NAME.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CREATOR_NAME", "alias": "nft_metadata_CREATOR_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_CREATOR_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.208938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere CREATOR_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_CREATOR_NAME", "column_name": "CREATOR_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE_URL", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_IMAGE_URL"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_IMAGE_URL.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_IMAGE_URL", "alias": "nft_metadata_IMAGE_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_IMAGE_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2099388, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere IMAGE_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_IMAGE_URL", "column_name": "IMAGE_URL", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_PROJECT_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_PROJECT_NAME.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_PROJECT_NAME", "alias": "nft_metadata_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.211938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_TOKEN_ID"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_TOKEN_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_ID", "alias": "nft_metadata_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_TOKEN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2139382, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere TOKEN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_METADATA", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_TOKEN_METADATA"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_TOKEN_METADATA.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_METADATA", "alias": "nft_metadata_TOKEN_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_TOKEN_METADATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.215938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere TOKEN_METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_TOKEN_METADATA", "column_name": "TOKEN_METADATA", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_METADATA_URI", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_TOKEN_METADATA_URI"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_TOKEN_METADATA_URI.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_METADATA_URI", "alias": "nft_metadata_TOKEN_METADATA_URI", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_TOKEN_METADATA_URI.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.217938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere TOKEN_METADATA_URI is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_TOKEN_METADATA_URI", "column_name": "TOKEN_METADATA_URI", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_TOKEN_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_TOKEN_NAME.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_NAME", "alias": "nft_metadata_TOKEN_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\not_null_silver__nft_metadata_TOKEN_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.218938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_metadata\nwhere TOKEN_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_metadata_TOKEN_NAME", "column_name": "TOKEN_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS", "TOKEN_ID"], "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID", "alias": "nft_metadata_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_metadata.yml\\dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d"}, "created_at": 1662575623.2209387, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS, TOKEN_ID\n    from SOLANA_DEV.silver.nft_metadata\n    group by CONTRACT_ADDRESS, TOKEN_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_metadata_CONTRACT_ADDRESS", "column_name": null, "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.d0fd8b375a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.d0fd8b375a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP", "alias": "gov_actions_marinade_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2299397, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_marinade\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2.44a6e38196": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_85839dea00396a20888119273d4e0ef9\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_85839dea00396a20888119273d4e0ef9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "governance", "dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2.44a6e38196", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_85839dea00396a20888119273d4e0ef9.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2", "alias": "gov_actions_marinade_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\dbt_expectations_expect_row_va_85839dea00396a20888119273d4e0ef9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_85839dea00396a20888119273d4e0ef9"}, "created_at": 1662575623.232035, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.gov_actions_marinade\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.gov_actions_marinade_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_ID.a72b05cd24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_ID.a72b05cd24", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_BLOCK_ID.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_BLOCK_ID", "alias": "gov_actions_marinade_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2379396, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_marinade\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_TX_ID.647bce8bf6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_TX_ID"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_TX_ID.647bce8bf6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_TX_ID.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_TX_ID", "alias": "gov_actions_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2399585, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_marinade\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_SUCCEEDED.013f9c87b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_SUCCEEDED.013f9c87b3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_SUCCEEDED.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_SUCCEEDED", "alias": "gov_actions_marinade_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2410188, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_marinade\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_SIGNER.57c76b61ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_SIGNER"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_SIGNER.57c76b61ad", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_SIGNER.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_SIGNER", "alias": "gov_actions_marinade_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded"}, "created_at": 1662575623.243026, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.gov_actions_marinade where succeeded) dbt_subquery\nwhere SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_SIGNER", "column_name": "SIGNER", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.ac4186ba90": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOCKER_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.ac4186ba90", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT", "alias": "gov_actions_marinade_LOCKER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded"}, "created_at": 1662575623.2450194, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.gov_actions_marinade where action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded) dbt_subquery\nwhere LOCKER_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_LOCKER_ACCOUNT", "column_name": "LOCKER_ACCOUNT", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_NFT.9b22305c25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"action <> 'UPDATE LOCK' and succeeded\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOCKER_NFT", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "action <> 'UPDATE LOCK' and succeeded", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_LOCKER_NFT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_NFT.9b22305c25", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_LOCKER_NFT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_LOCKER_NFT", "alias": "gov_actions_marinade_LOCKER_NFT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_LOCKER_NFT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "action <> 'UPDATE LOCK' and succeeded"}, "created_at": 1662575623.2470338, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.gov_actions_marinade where action <> 'UPDATE LOCK' and succeeded) dbt_subquery\nwhere LOCKER_NFT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_LOCKER_NFT", "column_name": "LOCKER_NFT", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_MINT.2d5ed39add": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_MINT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_MINT.2d5ed39add", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_MINT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_MINT", "alias": "gov_actions_marinade_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded"}, "created_at": 1662575623.2490408, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.gov_actions_marinade where action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_MINT", "column_name": "MINT", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_ACTION.4a1d219ecf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_ACTION"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_ACTION.4a1d219ecf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_ACTION.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_ACTION", "alias": "gov_actions_marinade_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded"}, "created_at": 1662575623.251019, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.gov_actions_marinade where succeeded) dbt_subquery\nwhere ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_ACTION", "column_name": "ACTION", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade_AMOUNT.918ce76ba6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade_AMOUNT.918ce76ba6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade_AMOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade_AMOUNT", "alias": "gov_actions_marinade_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded"}, "created_at": 1662575623.2539706, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.gov_actions_marinade where action not in ('START UNLOCK','CANCEL UNLOCK') and succeeded) dbt_subquery\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.b35d82c58e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.b35d82c58e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP", "alias": "gov_actions_marinade", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2556639, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.gov_actions_marinade\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.gov_actions_marinade", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID.67d5c4a9e0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8e3dd276123648ec2931e5dc5cf52a1f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__gov_actions_marinade')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8e3dd276123648ec2931e5dc5cf52a1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "governance", "dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID.67d5c4a9e0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_8e3dd276123648ec2931e5dc5cf52a1f.sql", "original_file_path": "models\\silver\\governance\\silver__gov_actions_marinade.yml", "name": "dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID", "alias": "gov_actions_marinade_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__gov_actions_marinade.yml\\dbt_utils_unique_combination_o_8e3dd276123648ec2931e5dc5cf52a1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8e3dd276123648ec2931e5dc5cf52a1f"}, "created_at": 1662575623.257751, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.gov_actions_marinade\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.gov_actions_marinade_TX_ID", "column_name": null, "file_key_name": "models.silver__gov_actions_marinade"}, "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.ce316551dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.ce316551dc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP", "alias": "proposal_votes_realms_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2669034, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2.b84f880b5e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3c949faf994b28edcc7b9a062e5b13f7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3c949faf994b28edcc7b9a062e5b13f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "governance", "dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2.b84f880b5e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_3c949faf994b28edcc7b9a062e5b13f7.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2", "alias": "proposal_votes_realms_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\dbt_expectations_expect_row_va_3c949faf994b28edcc7b9a062e5b13f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_3c949faf994b28edcc7b9a062e5b13f7"}, "created_at": 1662575623.2689276, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.proposal_votes_realms\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.proposal_votes_realms_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_ID.b1d9cb82b9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_ID.b1d9cb82b9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_BLOCK_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_BLOCK_ID", "alias": "proposal_votes_realms_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2740042, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_TX_ID.3bd06898da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_TX_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_TX_ID.3bd06898da", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_TX_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_TX_ID", "alias": "proposal_votes_realms_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2749958, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_SUCCEEDED.0376a2a567": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_SUCCEEDED.0376a2a567", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_SUCCEEDED.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_SUCCEEDED", "alias": "proposal_votes_realms_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2769048, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_INDEX.37808c3dba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_INDEX"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_INDEX.37808c3dba", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_INDEX.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_INDEX", "alias": "proposal_votes_realms_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2789984, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_INDEX", "column_name": "INDEX", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_PROGRAM_ID.2f23de7b25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_PROGRAM_ID.2f23de7b25", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_PROGRAM_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_PROGRAM_ID", "alias": "proposal_votes_realms_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.279995, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_REALMS_ID.3f90a0192f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REALMS_ID", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_REALMS_ID"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_REALMS_ID.3f90a0192f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_REALMS_ID.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_REALMS_ID", "alias": "proposal_votes_realms_REALMS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_REALMS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.282007, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere REALMS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_REALMS_ID", "column_name": "REALMS_ID", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_PROPOSAL.390b7e392d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_PROPOSAL"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_PROPOSAL.390b7e392d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_PROPOSAL.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_PROPOSAL", "alias": "proposal_votes_realms_PROPOSAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_PROPOSAL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2839026, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere PROPOSAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_PROPOSAL", "column_name": "PROPOSAL", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_VOTER.8f724dd0ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_VOTER"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_VOTER.8f724dd0ad", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_VOTER.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_VOTER", "alias": "proposal_votes_realms_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_VOTER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2849038, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere VOTER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_VOTER", "column_name": "VOTER", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.252a5b67e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_VOTE_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.252a5b67e2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_VOTE_ACCOUNT", "alias": "proposal_votes_realms_VOTE_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2882235, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere VOTE_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_VOTE_ACCOUNT", "column_name": "VOTE_ACCOUNT", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_CHOICE.4b3d288d88": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_CHOICE", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_VOTE_CHOICE"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_CHOICE.4b3d288d88", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_VOTE_CHOICE.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_VOTE_CHOICE", "alias": "proposal_votes_realms_VOTE_CHOICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_VOTE_CHOICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2892222, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere VOTE_CHOICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_VOTE_CHOICE", "column_name": "VOTE_CHOICE", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_RANK.86e66d9abd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_RANK", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_VOTE_RANK"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_RANK.86e66d9abd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_VOTE_RANK.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_VOTE_RANK", "alias": "proposal_votes_realms_VOTE_RANK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_VOTE_RANK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2912228, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere VOTE_RANK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_VOTE_RANK", "column_name": "VOTE_RANK", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_WEIGHT.62c96157a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_WEIGHT", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms_VOTE_WEIGHT"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_WEIGHT.62c96157a7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms_VOTE_WEIGHT.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms_VOTE_WEIGHT", "alias": "proposal_votes_realms_VOTE_WEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms_VOTE_WEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.2922227, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere VOTE_WEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms_VOTE_WEIGHT", "column_name": "VOTE_WEIGHT", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.6a87726450": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "governance", "not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.6a87726450", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP", "alias": "proposal_votes_realms", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.294222, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.proposal_votes_realms\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.proposal_votes_realms", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX.b92bd7c953": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6e2b00de93b4625a1e39ddd173de10de\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__proposal_votes_realms')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6e2b00de93b4625a1e39ddd173de10de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "governance", "dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX.b92bd7c953", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_6e2b00de93b4625a1e39ddd173de10de.sql", "original_file_path": "models\\silver\\governance\\silver__proposal_votes_realms.yml", "name": "dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX", "alias": "proposal_votes_realms_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\governance\\silver__proposal_votes_realms.yml\\dbt_utils_unique_combination_o_6e2b00de93b4625a1e39ddd173de10de.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_6e2b00de93b4625a1e39ddd173de10de"}, "created_at": 1662575623.2962227, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, INDEX\n    from SOLANA_DEV.silver.proposal_votes_realms\n    group by TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.proposal_votes_realms_TX_ID", "column_name": null, "file_key_name": "models.silver__proposal_votes_realms"}, "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.b165dfae86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.b165dfae86", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP", "alias": "nft_sales_yawww_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3049917, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2.c609719af8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_dc109de1cda3d6239f1e95d1811ed373\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_dc109de1cda3d6239f1e95d1811ed373", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2.c609719af8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_row_va_dc109de1cda3d6239f1e95d1811ed373.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_yawww_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\dbt_expectations_expect_row_va_dc109de1cda3d6239f1e95d1811ed373.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_dc109de1cda3d6239f1e95d1811ed373"}, "created_at": 1662575623.3059916, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        SOLANA_DEV.silver.nft_sales_yawww\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.nft_sales_yawww_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_ID.b53822b948": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_ID.b53822b948", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_BLOCK_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_BLOCK_ID", "alias": "nft_sales_yawww_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3119917, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_TX_ID.cc4d7cec95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_TX_ID.cc4d7cec95", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_TX_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_TX_ID", "alias": "nft_sales_yawww_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.312992, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_SUCCEEDED.1c07002f13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_SUCCEEDED.1c07002f13", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_SUCCEEDED.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_SUCCEEDED", "alias": "nft_sales_yawww_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3149924, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_PROGRAM_ID.bac5a43cf3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_PROGRAM_ID.bac5a43cf3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_PROGRAM_ID.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_PROGRAM_ID", "alias": "nft_sales_yawww_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3169923, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_PURCHASER.ef8aa381b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_PURCHASER.ef8aa381b0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_PURCHASER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_PURCHASER", "alias": "nft_sales_yawww_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3189912, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_SELLER.b4c48c28e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_SELLER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_SELLER.b4c48c28e0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_SELLER.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_SELLER", "alias": "nft_sales_yawww_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_SELLER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575623.3220892, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_yawww where succeeded = TRUE) dbt_subquery\nwhere SELLER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_SELLER", "column_name": "SELLER", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_MINT.b541ddfd92": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_MINT.b541ddfd92", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_MINT", "alias": "nft_sales_yawww_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "succeeded = TRUE"}, "created_at": 1662575623.3249903, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_yawww where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_MINT", "column_name": "MINT", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_SALES_AMOUNT.209049c03c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"SUCCEEDED = 'TRUE'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "SUCCEEDED = 'TRUE'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_SALES_AMOUNT.209049c03c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_SALES_AMOUNT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_SALES_AMOUNT", "alias": "nft_sales_yawww_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "SUCCEEDED = 'TRUE'"}, "created_at": 1662575623.3259919, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from SOLANA_DEV.silver.nft_sales_yawww where SUCCEEDED = 'TRUE') dbt_subquery\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww_SALE_TYPE.c14db0d483": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALE_TYPE", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww_SALE_TYPE"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww_SALE_TYPE.c14db0d483", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww_SALE_TYPE.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww_SALE_TYPE", "alias": "nft_sales_yawww_SALE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww_SALE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3280904, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere SALE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww_SALE_TYPE", "column_name": "SALE_TYPE", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.8f71fb543a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.8f71fb543a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP", "alias": "nft_sales_yawww", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662575623.3300784, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.silver.nft_sales_yawww\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_silver.nft_sales_yawww", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID.836d894e8e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3a44dc916d2da2a0aef567fcb8c4de47\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__nft_sales_yawww')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3a44dc916d2da2a0aef567fcb8c4de47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "nfts", "dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID.836d894e8e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_utils_unique_combination_o_3a44dc916d2da2a0aef567fcb8c4de47.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_sales_yawww.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID", "alias": "nft_sales_yawww_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\silver\\nfts\\silver__nft_sales_yawww.yml\\dbt_utils_unique_combination_o_3a44dc916d2da2a0aef567fcb8c4de47.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_3a44dc916d2da2a0aef567fcb8c4de47"}, "created_at": 1662575623.3310862, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA_DEV.silver.nft_sales_yawww\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_sales_yawww_TX_ID", "column_name": null, "file_key_name": "models.silver__nft_sales_yawww"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM.1c6148c1a5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45dd7bf50ee99dd6c162f00b25aa96d2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GOVERNANCE_PLATFORM", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45dd7bf50ee99dd6c162f00b25aa96d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM.1c6148c1a5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_45dd7bf50ee99dd6c162f00b25aa96d2.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM", "alias": "fact_proposal_creation_GOVERNANCE_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_45dd7bf50ee99dd6c162f00b25aa96d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_45dd7bf50ee99dd6c162f00b25aa96d2"}, "created_at": 1662575623.6740875, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GOVERNANCE_PLATFORM' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_GOVERNANCE_PLATFORM", "column_name": "GOVERNANCE_PLATFORM", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP.cb79e567af": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2f54dbf42763ce0e837ad6b5fce1dd8a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2f54dbf42763ce0e837ad6b5fce1dd8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP.cb79e567af", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_2f54dbf42763ce0e837ad6b5fce1dd8a.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP", "alias": "fact_proposal_creation_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_2f54dbf42763ce0e837ad6b5fce1dd8a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2f54dbf42763ce0e837ad6b5fce1dd8a"}, "created_at": 1662575623.677088, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID.3c74143fd3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_545f83cd0b3484f67380839690124f0d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_545f83cd0b3484f67380839690124f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID.3c74143fd3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_545f83cd0b3484f67380839690124f0d.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID", "alias": "fact_proposal_creation_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_545f83cd0b3484f67380839690124f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_545f83cd0b3484f67380839690124f0d"}, "created_at": 1662575623.6810873, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID.a424efa5bc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a5ee81095f8eab9478a23fd571ea691\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a5ee81095f8eab9478a23fd571ea691", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID.a424efa5bc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6a5ee81095f8eab9478a23fd571ea691.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID", "alias": "fact_proposal_creation_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_6a5ee81095f8eab9478a23fd571ea691.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6a5ee81095f8eab9478a23fd571ea691"}, "created_at": 1662575623.684088, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED.c500624a66": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_75e323f3cd6d416465875cd594e0f0e6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_75e323f3cd6d416465875cd594e0f0e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED.c500624a66", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_75e323f3cd6d416465875cd594e0f0e6.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED", "alias": "fact_proposal_creation_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_75e323f3cd6d416465875cd594e0f0e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_75e323f3cd6d416465875cd594e0f0e6"}, "created_at": 1662575623.688759, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME.0cecc44709": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_648cd77938ad4b4cea4523f6a4f311f4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_648cd77938ad4b4cea4523f6a4f311f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME.0cecc44709", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_648cd77938ad4b4cea4523f6a4f311f4.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME", "alias": "fact_proposal_creation_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_648cd77938ad4b4cea4523f6a4f311f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_648cd77938ad4b4cea4523f6a4f311f4"}, "created_at": 1662575623.6969373, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_NAME' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_PROGRAM_NAME", "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID.d6f7ce594c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b95f40c7d428c6e8b18b3bcbe8544421\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "REALMS_ID", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b95f40c7d428c6e8b18b3bcbe8544421", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID.d6f7ce594c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b95f40c7d428c6e8b18b3bcbe8544421.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID", "alias": "fact_proposal_creation_REALMS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_b95f40c7d428c6e8b18b3bcbe8544421.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b95f40c7d428c6e8b18b3bcbe8544421"}, "created_at": 1662575623.7009325, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('REALMS_ID' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_REALMS_ID", "column_name": "REALMS_ID", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL.aca94a352b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5e98d38d3912bb6605c76416a3b26ae4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROPOSAL", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5e98d38d3912bb6605c76416a3b26ae4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL.aca94a352b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_5e98d38d3912bb6605c76416a3b26ae4.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL", "alias": "fact_proposal_creation_PROPOSAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_5e98d38d3912bb6605c76416a3b26ae4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5e98d38d3912bb6605c76416a3b26ae4"}, "created_at": 1662575623.7052505, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROPOSAL' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_PROPOSAL", "column_name": "PROPOSAL", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER.8336328856": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2444473da57170d097d1152d540a7409\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROPOSAL_WRITER", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2444473da57170d097d1152d540a7409", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER.8336328856", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_2444473da57170d097d1152d540a7409.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER", "alias": "fact_proposal_creation_PROPOSAL_WRITER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_2444473da57170d097d1152d540a7409.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2444473da57170d097d1152d540a7409"}, "created_at": 1662575623.7082512, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROPOSAL_WRITER' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_PROPOSAL_WRITER", "column_name": "PROPOSAL_WRITER", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME.c028b3f7e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_843c42a32ec78e0d10e579251edb7b1b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROPOSAL_NAME", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_843c42a32ec78e0d10e579251edb7b1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME.c028b3f7e8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_843c42a32ec78e0d10e579251edb7b1b.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME", "alias": "fact_proposal_creation_PROPOSAL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_843c42a32ec78e0d10e579251edb7b1b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_843c42a32ec78e0d10e579251edb7b1b"}, "created_at": 1662575623.7112508, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROPOSAL_NAME' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_PROPOSAL_NAME", "column_name": "PROPOSAL_NAME", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE.54b95b9487": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ad67ba3f0372b1b2d524771ca7f5e7b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTE_TYPE", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ad67ba3f0372b1b2d524771ca7f5e7b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE.54b95b9487", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_0ad67ba3f0372b1b2d524771ca7f5e7b.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE", "alias": "fact_proposal_creation_VOTE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_0ad67ba3f0372b1b2d524771ca7f5e7b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0ad67ba3f0372b1b2d524771ca7f5e7b"}, "created_at": 1662575623.7132506, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTE_TYPE' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_VOTE_TYPE", "column_name": "VOTE_TYPE", "file_key_name": "models.core__fact_proposal_creation"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS.7df8cc23d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61ce0357f2e93be17e1eef313f4b8a22\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTE_OPTIONS", "model": "{{ get_where_subquery(ref('core__fact_proposal_creation')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_creation"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61ce0357f2e93be17e1eef313f4b8a22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS.7df8cc23d3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_61ce0357f2e93be17e1eef313f4b8a22.sql", "original_file_path": "models\\core\\core__fact_proposal_creation.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS", "alias": "fact_proposal_creation_VOTE_OPTIONS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_creation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_creation.yml\\dbt_expectations_expect_column_61ce0357f2e93be17e1eef313f4b8a22.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_61ce0357f2e93be17e1eef313f4b8a22"}, "created_at": 1662575623.7172508, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTE_OPTIONS' as \n    varchar\n) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_creation_VOTE_OPTIONS", "column_name": "VOTE_OPTIONS", "file_key_name": "models.core__fact_proposal_creation"}, "model.solana_models.bronze__transactions2": {"raw_sql": "{{ config (\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    value, \r\n    _partition_id, \r\n    metadata, \r\n    block_id, \r\n    tx_id, \r\n    data, \r\n    error,\r\n    TO_TIMESTAMP_NTZ(\r\n        SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\r\n        0\r\n    ) as _inserted_timestamp\r\nFROM \r\n    {{ source(\r\n        'solana_external', \r\n        'block_txs_api'\r\n    )}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.solana_external.block_txs_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "bronze", "fqn": ["solana_models", "bronze", "bronze__transactions2"], "unique_id": "model.solana_models.bronze__transactions2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "bronze\\bronze__transactions2.sql", "original_file_path": "models\\bronze\\bronze__transactions2.sql", "name": "bronze__transactions2", "alias": "transactions2", "checksum": {"name": "sha256", "checksum": "794ee1dce81954d2a8c4c9afb72368a3d20239a89172620135812c8e7144a644"}, "tags": [], "refs": [], "sources": [["solana_external", "block_txs_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\bronze\\bronze__transactions2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662575819.9884608, "compiled_sql": "\n\nSELECT \n    value, \n    _partition_id, \n    metadata, \n    block_id, \n    tx_id, \n    data, \n    error,\n    TO_TIMESTAMP_NTZ(\n        SUBSTR(SPLIT_PART(metadata$filename, '/', 4), 1, 10) :: NUMBER,\n        0\n    ) as _inserted_timestamp\nFROM \n    SOLANA_DEV.bronze.block_txs_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.bronze.transactions2"}, "model.solana_models.core__fact_votes_agg_block": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_timestamp,\r\n    block_id,\r\n    num_votes\r\nFROM\r\n    {{ ref('silver__votes_agg_block') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_votes_agg_block"], "unique_id": "model.solana_models.core__fact_votes_agg_block", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_votes_agg_block.sql", "original_file_path": "models\\core\\core__fact_votes_agg_block.sql", "name": "core__fact_votes_agg_block", "alias": "fact_votes_agg_block", "checksum": {"name": "sha256", "checksum": "020f9c89e1f682c28770d7517de5f222d92932bc552dea518767cb41410c79fb"}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "metrics": [], "description": "An aggregate table containing the number of automatic validator voting transactions that occurred during a block.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUM_VOTES": {"name": "NUM_VOTES", "description": "The number of vote events that occurred within the block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_votes_agg_block.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_votes_agg_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.1541605, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    num_votes\nFROM\n    SOLANA_DEV.silver.votes_agg_block", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_votes_agg_block"}, "model.solana_models.core__fact_staking_lp_actions": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    index,\r\n    event_type,\r\n    program_id,\r\n    signers,\r\n    account_keys,\r\n    instruction,\r\n    inner_instruction,\r\n    pre_balances,\r\n    post_balances,\r\n    pre_token_balances,\r\n    post_token_balances\r\nFROM\r\n    {{ ref('silver__staking_lp_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_staking_lp_actions"], "unique_id": "model.solana_models.core__fact_staking_lp_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_staking_lp_actions.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.sql", "name": "core__fact_staking_lp_actions", "alias": "fact_staking_lp_actions", "checksum": {"name": "sha256", "checksum": "4b23dffbd24f65257d2bdcc3fd731e200ebda2649112e0c9fd39c1b6ed177fc3"}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "metrics": [], "description": "Staking and liquidity provider actions that take place on the Solana blockchain.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_staking_lp_actions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.1791704, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    index,\n    event_type,\n    program_id,\n    signers,\n    account_keys,\n    instruction,\n    inner_instruction,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances\nFROM\n    SOLANA_DEV.silver.staking_lp_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_staking_lp_actions"}, "model.solana_models.core__fact_proposal_votes": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    'tribeca' as governance_platform, \r\n    'marinade' as program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    voter,\r\n    voter_account,\r\n    voter_nft,\r\n    proposal, \r\n    NULL AS realms_id, \r\n    NULL AS vote_choice, \r\n    NULL AS vote_rank, \r\n    NULL AS vote_weight\r\n\r\nFROM\r\n    {{ ref('silver__proposal_votes_marinade') }}\r\n\r\nUNION ALL \r\n\r\nSELECT \r\n    'realms' as governance_platform, \r\n    program_id as program_name, \r\n    block_timestamp, \r\n    block_id, \r\n    tx_id, \r\n    succeeded,  \r\n    voter, \r\n    vote_account, \r\n    NULL AS voter_nft, \r\n    proposal,\r\n    realms_id, \r\n    vote_choice, \r\n    vote_rank, \r\n    vote_weight\r\n\r\nFROM\r\n    {{ ref('silver__proposal_votes_realms') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__proposal_votes_marinade", "model.solana_models.silver__proposal_votes_realms"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_proposal_votes"], "unique_id": "model.solana_models.core__fact_proposal_votes", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_proposal_votes.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.sql", "name": "core__fact_proposal_votes", "alias": "fact_proposal_votes", "checksum": {"name": "sha256", "checksum": "1b74d827001b5f05ebcb45f7608afde0dbc8fac6d0fe9055276b8e2ee094faa0"}, "tags": [], "refs": [["silver__proposal_votes_marinade"], ["silver__proposal_votes_realms"]], "sources": [], "metrics": [], "description": "All governance votes for Realms spaces and Marinade / Saber votes hosted on Tribeca.", "columns": {"GOVERNANCE_PLATFORM": {"name": "GOVERNANCE_PLATFORM", "description": "platform used for governance space", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "name of solana program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address voting on the proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER_ACCOUNT": {"name": "VOTER_ACCOUNT", "description": "Account with locked tokens linked to the NFT (determines voting power)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER_NFT": {"name": "VOTER_NFT", "description": "NFT mint used in this vote on Marinade", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL": {"name": "PROPOSAL", "description": "Address representing the proposal being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REALMS_ID": {"name": "REALMS_ID", "description": "Address representing the voting group within Realms", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_CHOICE": {"name": "VOTE_CHOICE", "description": "The voting option selected by the user on a Realms proposal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_RANK": {"name": "VOTE_RANK", "description": "The order which a user ranks their choices on a ranked vote on Realms", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_WEIGHT": {"name": "VOTE_WEIGHT", "description": "Percentage of voting power put towards a voting option on Realms", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_proposal_votes.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.235986, "compiled_sql": "\n\nSELECT \n    'tribeca' as governance_platform, \n    'marinade' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    voter_account,\n    voter_nft,\n    proposal, \n    NULL AS realms_id, \n    NULL AS vote_choice, \n    NULL AS vote_rank, \n    NULL AS vote_weight\n\nFROM\n    SOLANA_DEV.silver.proposal_votes_marinade\n\nUNION ALL \n\nSELECT \n    'realms' as governance_platform, \n    program_id as program_name, \n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded,  \n    voter, \n    vote_account, \n    NULL AS voter_nft, \n    proposal,\n    realms_id, \n    vote_choice, \n    vote_rank, \n    vote_weight\n\nFROM\n    SOLANA_DEV.silver.proposal_votes_realms", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_proposal_votes"}, "model.solana_models.core__fact_blocks": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_id,\r\n    block_timestamp, \r\n    network,\r\n    chain_id,\r\n    tx_count,\r\n    block_height, \r\n    block_hash, \r\n    previous_block_id, \r\n    previous_block_hash\r\nFROM\r\n    {{ ref('silver__blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_blocks"], "unique_id": "model.solana_models.core__fact_blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_blocks.sql", "original_file_path": "models\\core\\core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "bcc4c9b3ba4ca1970ea27aa142132fb977ca97b94ac2c300685c324953170d64"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "Contains general information about each block produced on Solana.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "solana network name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "chain identifier, this will always be solana.  Field is used in joins with crosschain tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "number of transactions within this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "heigh of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "hash of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_ID": {"name": "PREVIOUS_BLOCK_ID", "description": "previous slot value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_HASH": {"name": "PREVIOUS_BLOCK_HASH", "description": "previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_blocks.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.3078375, "compiled_sql": "\n\nSELECT \n    block_id,\n    block_timestamp, \n    network,\n    chain_id,\n    tx_count,\n    block_height, \n    block_hash, \n    previous_block_id, \n    previous_block_hash\nFROM\n    SOLANA_DEV.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_blocks"}, "model.solana_models.core__fact_nft_sales": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    'magic eden v1' AS marketplace,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_magic_eden_v1') }}\r\nUNION\r\nSELECT\r\n    'magic eden v2',\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_magic_eden_v2') }}\r\nUNION\r\nSELECT\r\n    'solanart',\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_solanart') }}\r\nUNION\r\nSELECT\r\n    'solana monkey business marketplace',\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_smb') }}\r\nUNION\r\nSELECT\r\n    'solport',\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_solport') }}\r\nUNION\r\nSELECT\r\n    'opensea',\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_opensea') }}\r\nUNION\r\nSELECT\r\n    'yawww',\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    program_id,\r\n    purchaser,\r\n    seller, \r\n    mint,\r\n    sales_amount\r\nFROM\r\n    {{ ref('silver__nft_sales_yawww') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__nft_sales_opensea", "model.solana_models.silver__nft_sales_yawww"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_nft_sales"], "unique_id": "model.solana_models.core__fact_nft_sales", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_nft_sales.sql", "original_file_path": "models\\core\\core__fact_nft_sales.sql", "name": "core__fact_nft_sales", "alias": "fact_nft_sales", "checksum": {"name": "sha256", "checksum": "6901710a342ec1d410cc76d09d92ed5e1041edf53b7fd7f27c0fc7c77bfc1994"}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"], ["silver__nft_sales_magic_eden_v2"], ["silver__nft_sales_solanart"], ["silver__nft_sales_smb"], ["silver__nft_sales_solport"], ["silver__nft_sales_opensea"], ["silver__nft_sales_yawww"]], "sources": [], "metrics": [], "description": "NFT sales on Solana that occur on Magic Eden, Yawww, Opensea, the SMB marketplace, Solanart, and Solport.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER": {"name": "SELLER", "description": "The wallet address that sold the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_nft_sales.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.3555603, "compiled_sql": "\n\nSELECT\n    'magic eden v1' AS marketplace,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_magic_eden_v1\nUNION\nSELECT\n    'magic eden v2',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_magic_eden_v2\nUNION\nSELECT\n    'solanart',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_solanart\nUNION\nSELECT\n    'solana monkey business marketplace',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_smb\nUNION\nSELECT\n    'solport',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_solport\nUNION\nSELECT\n    'opensea',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_opensea\nUNION\nSELECT\n    'yawww',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    seller, \n    mint,\n    sales_amount\nFROM\n    SOLANA_DEV.silver.nft_sales_yawww", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_nft_sales"}, "model.solana_models.core__fact_gauges_creates": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    'marinade' as program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    signer,\r\n    gauge,\r\n    gaugemeister,\r\n    validator_account\r\nFROM\r\n    {{ ref('silver__gauges_creates_marinade') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__gauges_creates_marinade"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_gauges_creates"], "unique_id": "model.solana_models.core__fact_gauges_creates", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_gauges_creates.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.sql", "name": "core__fact_gauges_creates", "alias": "fact_gauges_creates", "checksum": {"name": "sha256", "checksum": "b4da00b92102c96e2eb00d9ed8226d658f20049d008df82e9f0da063764d31aa"}, "tags": [], "refs": [["silver__gauges_creates_marinade"]], "sources": [], "metrics": [], "description": "Creation events for gauges on Marinade and Saber. Gauges allow voting escrows to allocate the rewards of a set of liquidity mining pools.", "columns": {"PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "name of solana program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Address that determines the rewards share to give to a liquidity pool, or in the case of Marinade, the amount of SOL that should be delegated to a given validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGEMEISTER": {"name": "GAUGEMEISTER", "description": "Address that manages the rewards shares of all gauges", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_ACCOUNT": {"name": "VALIDATOR_ACCOUNT", "description": "Validator vote key linked to a gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_gauges_creates.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.4016159, "compiled_sql": "\n\nSELECT \n    'marinade' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    gauge,\n    gaugemeister,\n    validator_account\nFROM\n    SOLANA_DEV.silver.gauges_creates_marinade", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_gauges_creates"}, "model.solana_models.core__dim_labels": {"raw_sql": "{{ config(\r\n      materialized='view'\r\n    ) \r\n}}\r\n\r\nSELECT\r\n  blockchain, \r\n  creator, \r\n  address,\r\n  l1_label as label_type,\r\n  l2_label as label_subtype,\r\n  project_name as label, \r\n  address_name as address_name\r\nFROM {{ source(\r\n        'crosschain',\r\n        'address_labels'\r\n    ) }} \r\nWHERE blockchain = 'solana'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.crosschain.address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__dim_labels"], "unique_id": "model.solana_models.core__dim_labels", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__dim_labels.sql", "original_file_path": "models\\core\\core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "e68ac9e1419738bdb954cb1832c9f0d9a5629a4ba9688949d19da16b7ce40138"}, "tags": [], "refs": [], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "A hand curated table containing address names / labels for popular contracts, protocols, apps, nft projects, etc.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__dim_labels.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.44002, "compiled_sql": "\n\nSELECT\n  blockchain, \n  creator, \n  address,\n  l1_label as label_type,\n  l2_label as label_subtype,\n  project_name as label, \n  address_name as address_name\nFROM flipside_prod_db.silver_crosschain.address_labels \nWHERE blockchain = 'solana'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.dim_labels"}, "model.solana_models.core__fact_nft_mints": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    block_timestamp, \r\n    block_id, \r\n    tx_id, \r\n    succeeded, \r\n    program_id,\r\n    purchaser,  \r\n    mint_price,\r\n    mint_currency, \r\n    mint \r\nFROM \r\n    {{ ref('silver__nft_mints') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_nft_mints"], "unique_id": "model.solana_models.core__fact_nft_mints", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_nft_mints.sql", "original_file_path": "models\\core\\core__fact_nft_mints.sql", "name": "core__fact_nft_mints", "alias": "fact_nft_mints", "checksum": {"name": "sha256", "checksum": "ae4114f6a6e10bf97ad932b90146faf8d0359cb424f58fee2813c20a6e7adb86"}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "An easy table containing information about Solana NFT mints including the purchaser, mint price, and NFT minted.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "Price that it cost to mint the NFT in SOL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_CURRENCY": {"name": "MINT_CURRENCY", "description": "Currency used to pay for the NFT mint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_nft_mints.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.4664588, "compiled_sql": "\n\nSELECT\n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded, \n    program_id,\n    purchaser,  \n    mint_price,\n    mint_currency, \n    mint \nFROM \n    SOLANA_DEV.silver.nft_mints", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_nft_mints"}, "model.solana_models.core__dim_nft_metadata": {"raw_sql": "{{ \r\n    config(\r\n      materialized='view'\r\n    ) \r\n}}\r\n\r\nSELECT \r\n    blockchain,\r\n    contract_address,\r\n    contract_name,\r\n    created_at_timestamp,\r\n    mint,\r\n    creator_address,\r\n    creator_name,\r\n    image_url,\r\n    project_name,\r\n    token_id,\r\n    token_metadata,\r\n    token_metadata_uri,\r\n    token_name\r\nFROM {{ ref('silver__nft_metadata') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__dim_nft_metadata"], "unique_id": "model.solana_models.core__dim_nft_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__dim_nft_metadata.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.sql", "name": "core__dim_nft_metadata", "alias": "dim_nft_metadata", "checksum": {"name": "sha256", "checksum": "171b7ddb4242cccaab614cfc6da7d12faf78e5fa92140df126fa5a16adc62923"}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "Contains NFT metadata for some collections. This table is sourced from the Magic Eden API.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Solana. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Address unique to an NFT series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "Name of the contract that identifies an NFT series. Example - tcgdragons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT_TIMESTAMP": {"name": "CREATED_AT_TIMESTAMP", "description": "timestamp in UTC that the NFT was minted at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "address provided by the creator of the project where mint payments and secondary market royalties are sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_NAME": {"name": "CREATOR_NAME", "description": "name of the project creator - this can be an individual or a company name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_URL": {"name": "IMAGE_URL", "description": "URL that links to the image on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the project the NFT token belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "Numeric value that identifies the NFT within it's series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "a block of json that describes the traits of an NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA_URI": {"name": "TOKEN_METADATA_URI", "description": "URL that links to the token metadata on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_NAME": {"name": "TOKEN_NAME", "description": "Name of the NFT token - this is unique to token. Example SMB #284", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__dim_nft_metadata.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.5056543, "compiled_sql": "\n\nSELECT \n    blockchain,\n    contract_address,\n    contract_name,\n    created_at_timestamp,\n    mint,\n    creator_address,\n    creator_name,\n    image_url,\n    project_name,\n    token_id,\n    token_metadata,\n    token_metadata_uri,\n    token_name\nFROM SOLANA_DEV.silver.nft_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.dim_nft_metadata"}, "model.solana_models.core__fact_gauges_votes": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    'saber' as program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    voter,\r\n    NULL as voter_nft,\r\n    gauge,\r\n    power,\r\n    delegated_shares\r\nFROM\r\n    {{ ref('silver__gauges_votes_saber') }}\r\nUNION \r\nSELECT \r\n    'marinade' as program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    voter,\r\n    voter_nft,\r\n    gauge,\r\n    NULL as power,\r\n    delegated_shares\r\nFROM\r\n    {{ ref('silver__gauges_votes_marinade') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__gauges_votes_saber", "model.solana_models.silver__gauges_votes_marinade"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_gauges_votes"], "unique_id": "model.solana_models.core__fact_gauges_votes", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_gauges_votes.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.sql", "name": "core__fact_gauges_votes", "alias": "fact_gauges_votes", "checksum": {"name": "sha256", "checksum": "0f50de129b5c3f73d49d75176859725d33215197d0688de6814c7ca42c7385e7"}, "tags": [], "refs": [["silver__gauges_votes_saber"], ["silver__gauges_votes_marinade"]], "sources": [], "metrics": [], "description": "All gauge votes on Solana for Marinade and Saber. Gauges allow voting escrows to allocate the rewards of a set of liquidity mining pools.", "columns": {"PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "name of solana program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address performing the vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER_NFT": {"name": "VOTER_NFT", "description": "NFT representing tokens for governance.  This is only available for certain types of governance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Address that determines the rewards share to give to a liquidity pool, or in the case of Marinade, the amount of SOL that should be delegated to a given validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATED_SHARES": {"name": "DELEGATED_SHARES", "description": "Number of shares delegated to vote for this gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POWER": {"name": "POWER", "description": "Total voting power of the voter.  This is only available for certain types of gauge votes.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_gauges_votes.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.5654893, "compiled_sql": "\n\nSELECT \n    'saber' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    NULL as voter_nft,\n    gauge,\n    power,\n    delegated_shares\nFROM\n    SOLANA_DEV.silver.gauges_votes_saber\nUNION \nSELECT \n    'marinade' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    voter_nft,\n    gauge,\n    NULL as power,\n    delegated_shares\nFROM\n    SOLANA_DEV.silver.gauges_votes_marinade", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_gauges_votes"}, "model.solana_models.core__fact_events": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    index,\r\n    event_type,\r\n    program_id,\r\n    instruction,\r\n    inner_instruction\r\nFROM\r\n    {{ ref('silver__events') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_events"], "unique_id": "model.solana_models.core__fact_events", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_events.sql", "original_file_path": "models\\core\\core__fact_events.sql", "name": "core__fact_events", "alias": "fact_events", "checksum": {"name": "sha256", "checksum": "443552e83680b07fa77b1e0c815b5137984e2fe8cd4abc59711e2f4dbd88a38f"}, "tags": [], "refs": [["silver__events"]], "sources": [], "metrics": [], "description": "Contains each event that occurs on Solana. A transaction can consist of more than one event.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "An instruction specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_events.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.6046474, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    index,\n    event_type,\n    program_id,\n    instruction,\n    inner_instruction\nFROM\n    SOLANA_DEV.silver.events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_events"}, "model.solana_models.core__fact_transfers": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    index,\r\n    tx_from,\r\n    tx_to,\r\n    amount,\r\n    mint\r\nFROM\r\n    {{ ref('silver__transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_transfers"], "unique_id": "model.solana_models.core__fact_transfers", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_transfers.sql", "original_file_path": "models\\core\\core__fact_transfers.sql", "name": "core__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "f0c8108ec2ca2e59bb85b1f455558208efa0d555f64fc18e6ab17d96f9b96564"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "Contains transfer events for Solana and spl-tokens.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "A unique key that identifies the event's position within a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address that initiated an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The wallet address that receives tokens in an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The number of tokens sent during an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_transfers.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.6423333, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    index,\n    tx_from,\n    tx_to,\n    amount,\n    mint\nFROM\n    SOLANA_DEV.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_transfers"}, "model.solana_models.core__fact_swaps": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    'jupiter aggregator v2' AS swap_program,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    swapper,\r\n    from_amt AS swap_from_amount,\r\n    from_mint AS swap_from_mint,\r\n    to_amt AS swap_to_amount,\r\n    to_mint AS swap_to_mint\r\nFROM\r\n    {{ ref('silver__swaps_jupiter_dex') }}\r\nUNION\r\nSELECT\r\n    'orca' AS swap_program,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    swapper,\r\n    from_amt,\r\n    from_mint,\r\n    to_amt,\r\n    to_mint\r\nFROM\r\n    {{ ref('silver__swaps_orca_dex') }}\r\nUNION\r\nSELECT\r\n    'raydium v4' AS swap_program,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    swapper,\r\n    from_amt,\r\n    from_mint,\r\n    to_amt,\r\n    to_mint\r\nFROM\r\n    {{ ref('silver__swaps_raydium_dex') }}\r\nUNION\r\nSELECT\r\n    'saber' AS swap_program,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    swapper,\r\n    from_amt,\r\n    from_mint,\r\n    to_amt,\r\n    to_mint\r\nFROM\r\n    {{ ref('silver__swaps_saber_dex') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_swaps"], "unique_id": "model.solana_models.core__fact_swaps", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_swaps.sql", "original_file_path": "models\\core\\core__fact_swaps.sql", "name": "core__fact_swaps", "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "ff65dda757e46ce89d70c9458cf570b8de7412bc56dd42866398af90c7f658f4"}, "tags": [], "refs": [["silver__swaps_jupiter_dex"], ["silver__swaps_orca_dex"], ["silver__swaps_raydium_dex"], ["silver__swaps_saber_dex"]], "sources": [], "metrics": [], "description": "Records with swaps on Jupiter, Orca, Raydium, and Saber.", "columns": {"SWAP_PROGRAM": {"name": "SWAP_PROGRAM", "description": "name of decentralized exchange used to perform the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_AMOUNT": {"name": "SWAP_FROM_AMOUNT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_MINT": {"name": "SWAP_FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_AMOUNT": {"name": "SWAP_TO_AMOUNT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_MINT": {"name": "SWAP_TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_swaps.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.6828372, "compiled_sql": "\n\nSELECT\n    'jupiter aggregator v2' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt AS swap_from_amount,\n    from_mint AS swap_from_mint,\n    to_amt AS swap_to_amount,\n    to_mint AS swap_to_mint\nFROM\n    SOLANA_DEV.silver.swaps_jupiter_dex\nUNION\nSELECT\n    'orca' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    SOLANA_DEV.silver.swaps_orca_dex\nUNION\nSELECT\n    'raydium v4' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    SOLANA_DEV.silver.swaps_raydium_dex\nUNION\nSELECT\n    'saber' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    SOLANA_DEV.silver.swaps_saber_dex", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_swaps"}, "model.solana_models.core__fact_transactions": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    recent_block_hash,\r\n    signers,\r\n    fee,\r\n    succeeded,\r\n    account_keys,\r\n    pre_balances,\r\n    post_balances,\r\n    pre_token_balances,\r\n    post_token_balances,\r\n    instructions,\r\n    inner_instructions,\r\n    log_messages\r\nFROM\r\n    {{ ref('silver__transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_transactions"], "unique_id": "model.solana_models.core__fact_transactions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_transactions.sql", "original_file_path": "models\\core\\core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "c97aff8315382b3ee8c2de9e8752532db3a9d9ee3f397bc2f872720872fd405e"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "A table that contains high level information about every transaction on the Solana blockchain.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_MESSAGES": {"name": "LOG_MESSAGES", "description": "Array of log messages written by the program for this transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_transactions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.7209418, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages\nFROM\n    SOLANA_DEV.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_transactions"}, "model.solana_models.core__fact_gov_actions": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    'saber' as program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    signer,\r\n    locker_account,\r\n    null as locker_nft,\r\n    mint,\r\n    action,\r\n    amount\r\nFROM\r\n    {{ ref('silver__gov_actions_saber') }}\r\nUNION ALL\r\nSELECT \r\n    'marinade' as program_name,\r\n    block_timestamp,\r\n    block_id,\r\n    tx_id,\r\n    succeeded,\r\n    signer,\r\n    locker_account,\r\n    locker_nft,\r\n    mint,\r\n    action,\r\n    amount\r\nFROM\r\n    {{ ref('silver__gov_actions_marinade') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__gov_actions_saber", "model.solana_models.silver__gov_actions_marinade"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA_DEV", "schema": "core", "fqn": ["solana_models", "core", "core__fact_gov_actions"], "unique_id": "model.solana_models.core__fact_gov_actions", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "core\\core__fact_gov_actions.sql", "original_file_path": "models\\core\\core__fact_gov_actions.sql", "name": "core__fact_gov_actions", "alias": "fact_gov_actions", "checksum": {"name": "sha256", "checksum": "c23575f5053d749a9a2e36f3451947214458025431432100e0236be08cba4506"}, "tags": [], "refs": [["silver__gov_actions_saber"], ["silver__gov_actions_marinade"]], "sources": [], "metrics": [], "description": "All governance votes for Realms spaces and Marinade / Saber votes hosted on Tribeca.", "columns": {"PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "name of solana program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_ACCOUNT": {"name": "LOCKER_ACCOUNT", "description": "Account holding tokens for governance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_NFT": {"name": "LOCKER_NFT", "description": "NFT representing tokens for governance.  This is only available for certain types of governance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Mint being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "NFT mint associated with the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models\\core\\core__fact_gov_actions.yml", "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1662648592.7692485, "compiled_sql": "\n\nSELECT \n    'saber' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    locker_account,\n    null as locker_nft,\n    mint,\n    action,\n    amount\nFROM\n    SOLANA_DEV.silver.gov_actions_saber\nUNION ALL\nSELECT \n    'marinade' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    locker_account,\n    locker_nft,\n    mint,\n    action,\n    amount\nFROM\n    SOLANA_DEV.silver.gov_actions_marinade", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.core.fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9.sql", "original_file_path": "models\\core\\core__fact_votes_agg_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP", "alias": "fact_votes_agg_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_votes_agg_block.yml\\dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9"}, "created_at": 1662648592.1601706, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_votes_agg_block_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_votes_agg_block"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e.sql", "original_file_path": "models\\core\\core__fact_votes_agg_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID", "alias": "fact_votes_agg_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_votes_agg_block.yml\\dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e"}, "created_at": 1662648592.1681702, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_votes_agg_block_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_votes_agg_block"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NUM_VOTES", "model": "{{ get_where_subquery(ref('core__fact_votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06.sql", "original_file_path": "models\\core\\core__fact_votes_agg_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES", "alias": "fact_votes_agg_block_NUM_VOTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_votes_agg_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_votes_agg_block.yml\\dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06"}, "created_at": 1662648592.1711705, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('NUM_VOTES' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_votes_agg_block_NUM_VOTES", "column_name": "NUM_VOTES", "file_key_name": "models.core__fact_votes_agg_block"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP", "alias": "fact_staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959"}, "created_at": 1662648592.180171, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID", "alias": "fact_staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5"}, "created_at": 1662648592.1831703, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID", "alias": "fact_staking_lp_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3"}, "created_at": 1662648592.1861703, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX", "alias": "fact_staking_lp_actions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d"}, "created_at": 1662648592.1881711, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INDEX' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_INDEX", "column_name": "INDEX", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED", "alias": "fact_staking_lp_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df"}, "created_at": 1662648592.1911721, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID", "alias": "fact_staking_lp_actions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5"}, "created_at": 1662648592.1951714, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_ID' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE", "alias": "fact_staking_lp_actions_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a"}, "created_at": 1662648592.1981716, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_EVENT_TYPE", "column_name": "EVENT_TYPE", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNERS", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS", "alias": "fact_staking_lp_actions_SIGNERS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9"}, "created_at": 1662648592.2013173, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SIGNERS' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_SIGNERS", "column_name": "SIGNERS", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS", "alias": "fact_staking_lp_actions_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e"}, "created_at": 1662648592.204317, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ACCOUNT_KEYS' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_ACCOUNT_KEYS", "column_name": "ACCOUNT_KEYS", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fe006260673f2013100162afceccf965\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fe006260673f2013100162afceccf965", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fe006260673f2013100162afceccf965.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION", "alias": "fact_staking_lp_actions_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_fe006260673f2013100162afceccf965.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fe006260673f2013100162afceccf965"}, "created_at": 1662648592.2089584, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INSTRUCTION' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_INSTRUCTION", "column_name": "INSTRUCTION", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INNER_INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION", "alias": "fact_staking_lp_actions_INNER_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8"}, "created_at": 1662648592.2130425, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INNER_INSTRUCTION' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_INNER_INSTRUCTION", "column_name": "INNER_INSTRUCTION", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES", "alias": "fact_staking_lp_actions_PRE_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b"}, "created_at": 1662648592.2163851, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRE_BALANCES' as \n    varchar\n) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_PRE_BALANCES", "column_name": "PRE_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES", "alias": "fact_staking_lp_actions_POST_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168"}, "created_at": 1662648592.2204065, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('POST_BALANCES' as \n    varchar\n) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_POST_BALANCES", "column_name": "POST_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES", "alias": "fact_staking_lp_actions_PRE_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de"}, "created_at": 1662648592.2235584, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRE_TOKEN_BALANCES' as \n    varchar\n) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_PRE_TOKEN_BALANCES", "column_name": "PRE_TOKEN_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7.sql", "original_file_path": "models\\core\\core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES", "alias": "fact_staking_lp_actions_POST_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_staking_lp_actions.yml\\dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7"}, "created_at": 1662648592.2286515, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('POST_TOKEN_BALANCES' as \n    varchar\n) as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_staking_lp_actions_POST_TOKEN_BALANCES", "column_name": "POST_TOKEN_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM.2cb8a6da8c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e998806e4cc0b604c88b98d68e3e1e94\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GOVERNANCE_PLATFORM", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e998806e4cc0b604c88b98d68e3e1e94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM.2cb8a6da8c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_e998806e4cc0b604c88b98d68e3e1e94.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM", "alias": "fact_proposal_votes_GOVERNANCE_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_e998806e4cc0b604c88b98d68e3e1e94.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e998806e4cc0b604c88b98d68e3e1e94"}, "created_at": 1662648592.235986, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GOVERNANCE_PLATFORM' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_GOVERNANCE_PLATFORM", "column_name": "GOVERNANCE_PLATFORM", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME.efb5564020": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c37a2a928cd658d2a72078f66990e20\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c37a2a928cd658d2a72078f66990e20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME.efb5564020", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_4c37a2a928cd658d2a72078f66990e20.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME", "alias": "fact_proposal_votes_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_4c37a2a928cd658d2a72078f66990e20.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4c37a2a928cd658d2a72078f66990e20"}, "created_at": 1662648592.2399805, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_NAME' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_PROGRAM_NAME", "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP.14fda90e1f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_34dd49df15183c158d35654e89458c18\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_34dd49df15183c158d35654e89458c18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP.14fda90e1f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_34dd49df15183c158d35654e89458c18.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP", "alias": "fact_proposal_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_34dd49df15183c158d35654e89458c18.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_34dd49df15183c158d35654e89458c18"}, "created_at": 1662648592.2449892, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID.69f6c939cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e36e5568fe2e16ed6f99c8530c10153\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e36e5568fe2e16ed6f99c8530c10153", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID.69f6c939cd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6e36e5568fe2e16ed6f99c8530c10153.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID", "alias": "fact_proposal_votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_6e36e5568fe2e16ed6f99c8530c10153.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6e36e5568fe2e16ed6f99c8530c10153"}, "created_at": 1662648592.2482805, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID.61c6807300": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b9dd2ef4370bfb20b979495b347d304c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b9dd2ef4370bfb20b979495b347d304c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID.61c6807300", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b9dd2ef4370bfb20b979495b347d304c.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID", "alias": "fact_proposal_votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_b9dd2ef4370bfb20b979495b347d304c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b9dd2ef4370bfb20b979495b347d304c"}, "created_at": 1662648592.2522721, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED.a8a02b1128": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bac8e4535a6c1e1be0ab7cbe7b85a9f5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bac8e4535a6c1e1be0ab7cbe7b85a9f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED.a8a02b1128", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_bac8e4535a6c1e1be0ab7cbe7b85a9f5.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED", "alias": "fact_proposal_votes_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_bac8e4535a6c1e1be0ab7cbe7b85a9f5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bac8e4535a6c1e1be0ab7cbe7b85a9f5"}, "created_at": 1662648592.2552693, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER.b4aedc2103": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c653d0b83fdc2b82091d9453cd62e175\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c653d0b83fdc2b82091d9453cd62e175", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER.b4aedc2103", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c653d0b83fdc2b82091d9453cd62e175.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER", "alias": "fact_proposal_votes_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_c653d0b83fdc2b82091d9453cd62e175.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c653d0b83fdc2b82091d9453cd62e175"}, "created_at": 1662648592.260191, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTER' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_VOTER", "column_name": "VOTER", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT.074485b34b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bbe94482db244926bd5fe5dd0bf1a4c0\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTER_ACCOUNT", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bbe94482db244926bd5fe5dd0bf1a4c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT.074485b34b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_bbe94482db244926bd5fe5dd0bf1a4c0.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT", "alias": "fact_proposal_votes_VOTER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_bbe94482db244926bd5fe5dd0bf1a4c0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bbe94482db244926bd5fe5dd0bf1a4c0"}, "created_at": 1662648592.2635598, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTER_ACCOUNT' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_VOTER_ACCOUNT", "column_name": "VOTER_ACCOUNT", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT.b4094d7e9b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_335e41e014ee26eaf666e8d5717edccd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTER_NFT", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_335e41e014ee26eaf666e8d5717edccd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT.b4094d7e9b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_335e41e014ee26eaf666e8d5717edccd.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT", "alias": "fact_proposal_votes_VOTER_NFT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_335e41e014ee26eaf666e8d5717edccd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_335e41e014ee26eaf666e8d5717edccd"}, "created_at": 1662648592.268476, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTER_NFT' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_VOTER_NFT", "column_name": "VOTER_NFT", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL.bd26e9f162": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1214dcd911d37f625d029d92eaa8b168\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROPOSAL", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1214dcd911d37f625d029d92eaa8b168", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL.bd26e9f162", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_1214dcd911d37f625d029d92eaa8b168.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL", "alias": "fact_proposal_votes_PROPOSAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_1214dcd911d37f625d029d92eaa8b168.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1214dcd911d37f625d029d92eaa8b168"}, "created_at": 1662648592.2724764, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROPOSAL' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_PROPOSAL", "column_name": "PROPOSAL", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID.3d82f13fb8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fb6155e5c91d69add5e083f8f9275d94\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "REALMS_ID", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fb6155e5c91d69add5e083f8f9275d94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID.3d82f13fb8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fb6155e5c91d69add5e083f8f9275d94.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID", "alias": "fact_proposal_votes_REALMS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_fb6155e5c91d69add5e083f8f9275d94.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fb6155e5c91d69add5e083f8f9275d94"}, "created_at": 1662648592.2793999, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('REALMS_ID' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_REALMS_ID", "column_name": "REALMS_ID", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE.89d479b8f1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8c127d44cd5f0f50bdb9d6eef41b7f99\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTE_CHOICE", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8c127d44cd5f0f50bdb9d6eef41b7f99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE.89d479b8f1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_8c127d44cd5f0f50bdb9d6eef41b7f99.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE", "alias": "fact_proposal_votes_VOTE_CHOICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_8c127d44cd5f0f50bdb9d6eef41b7f99.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8c127d44cd5f0f50bdb9d6eef41b7f99"}, "created_at": 1662648592.2843082, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTE_CHOICE' as \n    varchar\n) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_VOTE_CHOICE", "column_name": "VOTE_CHOICE", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK.ace5c19a48": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_31bfaa9444623eab5a6ec97ea8be0e06\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTE_RANK", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_31bfaa9444623eab5a6ec97ea8be0e06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK.ace5c19a48", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_31bfaa9444623eab5a6ec97ea8be0e06.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK", "alias": "fact_proposal_votes_VOTE_RANK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_31bfaa9444623eab5a6ec97ea8be0e06.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_31bfaa9444623eab5a6ec97ea8be0e06"}, "created_at": 1662648592.2916892, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTE_RANK' as \n    varchar\n) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_VOTE_RANK", "column_name": "VOTE_RANK", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT.42dffdb7a0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7f40ea39536627a051231b926f3e50a4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTE_WEIGHT", "model": "{{ get_where_subquery(ref('core__fact_proposal_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_proposal_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7f40ea39536627a051231b926f3e50a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT.42dffdb7a0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_7f40ea39536627a051231b926f3e50a4.sql", "original_file_path": "models\\core\\core__fact_proposal_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT", "alias": "fact_proposal_votes_VOTE_WEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_proposal_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_proposal_votes.yml\\dbt_expectations_expect_column_7f40ea39536627a051231b926f3e50a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7f40ea39536627a051231b926f3e50a4"}, "created_at": 1662648592.2981496, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTE_WEIGHT' as \n    varchar\n) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_proposal_votes_VOTE_WEIGHT", "column_name": "VOTE_WEIGHT", "file_key_name": "models.core__fact_proposal_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295"}, "created_at": 1662648592.309846, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6"}, "created_at": 1662648592.3148463, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK", "alias": "fact_blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4"}, "created_at": 1662648592.3189378, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('NETWORK' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_NETWORK", "column_name": "NETWORK", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6"}, "created_at": 1662648592.3219342, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a"}, "created_at": 1662648592.3269243, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_COUNT' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35"}, "created_at": 1662648592.333927, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_HEIGHT' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_065a1414150952b1a2e1542323685686\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_065a1414150952b1a2e1542323685686.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686"}, "created_at": 1662648592.3380167, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PREVIOUS_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID", "alias": "fact_blocks_PREVIOUS_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44"}, "created_at": 1662648592.3424876, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PREVIOUS_BLOCK_ID' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_PREVIOUS_BLOCK_ID", "column_name": "PREVIOUS_BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PREVIOUS_BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4.sql", "original_file_path": "models\\core\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH", "alias": "fact_blocks_PREVIOUS_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_blocks.yml\\dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4"}, "created_at": 1662648592.347522, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PREVIOUS_BLOCK_HASH' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_PREVIOUS_BLOCK_HASH", "column_name": "PREVIOUS_BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP", "alias": "fact_nft_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687"}, "created_at": 1662648592.3565648, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_821d139a358757596874003b544ef9ab\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_821d139a358757596874003b544ef9ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_821d139a358757596874003b544ef9ab.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID", "alias": "fact_nft_sales_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_821d139a358757596874003b544ef9ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_821d139a358757596874003b544ef9ab"}, "created_at": 1662648592.3625216, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID", "alias": "fact_nft_sales_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3"}, "created_at": 1662648592.3665192, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED", "alias": "fact_nft_sales_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb"}, "created_at": 1662648592.3695798, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID", "alias": "fact_nft_sales_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db"}, "created_at": 1662648592.3734837, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_ID' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER", "alias": "fact_nft_sales_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4"}, "created_at": 1662648592.3774867, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PURCHASER' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER.4e646f66c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b4724a362ef9bc4317daced6997c0f9a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SELLER", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b4724a362ef9bc4317daced6997c0f9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER.4e646f66c0", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b4724a362ef9bc4317daced6997c0f9a.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER", "alias": "fact_nft_sales_SELLER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_b4724a362ef9bc4317daced6997c0f9a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b4724a362ef9bc4317daced6997c0f9a"}, "created_at": 1662648592.3814852, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SELLER' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_SELLER", "column_name": "SELLER", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT", "alias": "fact_nft_sales_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02"}, "created_at": 1662648592.3871644, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_MINT", "column_name": "MINT", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a.sql", "original_file_path": "models\\core\\core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT", "alias": "fact_nft_sales_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_sales.yml\\dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a"}, "created_at": 1662648592.3936021, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SALES_AMOUNT' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_sales_SALES_AMOUNT", "column_name": "SALES_AMOUNT", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME.4cbc2d8fab": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_179f1deda1f19e6841a854f1101136f3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_179f1deda1f19e6841a854f1101136f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME.4cbc2d8fab", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_179f1deda1f19e6841a854f1101136f3.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME", "alias": "fact_gauges_creates_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_179f1deda1f19e6841a854f1101136f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_179f1deda1f19e6841a854f1101136f3"}, "created_at": 1662648592.4025528, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_NAME' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_PROGRAM_NAME", "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP.e10bb18371": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c4991f7bed83456717e4526087dd776\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c4991f7bed83456717e4526087dd776", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP.e10bb18371", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6c4991f7bed83456717e4526087dd776.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP", "alias": "fact_gauges_creates_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_6c4991f7bed83456717e4526087dd776.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6c4991f7bed83456717e4526087dd776"}, "created_at": 1662648592.4055967, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID.b790453a41": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fbe37e3b7bdd721ae6bb777790d09a36\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fbe37e3b7bdd721ae6bb777790d09a36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID.b790453a41", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fbe37e3b7bdd721ae6bb777790d09a36.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID", "alias": "fact_gauges_creates_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_fbe37e3b7bdd721ae6bb777790d09a36.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fbe37e3b7bdd721ae6bb777790d09a36"}, "created_at": 1662648592.4123142, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID.c646678622": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d2ae9e20a1f0a075ee6750cdb7e0a1a7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d2ae9e20a1f0a075ee6750cdb7e0a1a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID.c646678622", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d2ae9e20a1f0a075ee6750cdb7e0a1a7.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID", "alias": "fact_gauges_creates_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_d2ae9e20a1f0a075ee6750cdb7e0a1a7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d2ae9e20a1f0a075ee6750cdb7e0a1a7"}, "created_at": 1662648592.4153473, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED.0912c5b5e1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5a77ff01d67ce1494c91961db50506d1\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5a77ff01d67ce1494c91961db50506d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED.0912c5b5e1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_5a77ff01d67ce1494c91961db50506d1.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED", "alias": "fact_gauges_creates_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_5a77ff01d67ce1494c91961db50506d1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5a77ff01d67ce1494c91961db50506d1"}, "created_at": 1662648592.4193325, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER.eb41a65847": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_886b7d51eda0044bb04a620128777383\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_886b7d51eda0044bb04a620128777383", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER.eb41a65847", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_886b7d51eda0044bb04a620128777383.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER", "alias": "fact_gauges_creates_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_886b7d51eda0044bb04a620128777383.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_886b7d51eda0044bb04a620128777383"}, "created_at": 1662648592.4223194, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SIGNER' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_SIGNER", "column_name": "SIGNER", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE.3505020721": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ae24741bea1c1c0b00badee058b7686\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ae24741bea1c1c0b00badee058b7686", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE.3505020721", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6ae24741bea1c1c0b00badee058b7686.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE", "alias": "fact_gauges_creates_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_6ae24741bea1c1c0b00badee058b7686.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6ae24741bea1c1c0b00badee058b7686"}, "created_at": 1662648592.4277894, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GAUGE' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_GAUGE", "column_name": "GAUGE", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER.021b1a23cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e1176c92f3bdc7c97912cbdb0a1fb41\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAUGEMEISTER", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e1176c92f3bdc7c97912cbdb0a1fb41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER.021b1a23cd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6e1176c92f3bdc7c97912cbdb0a1fb41.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER", "alias": "fact_gauges_creates_GAUGEMEISTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_6e1176c92f3bdc7c97912cbdb0a1fb41.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6e1176c92f3bdc7c97912cbdb0a1fb41"}, "created_at": 1662648592.4317863, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GAUGEMEISTER' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_GAUGEMEISTER", "column_name": "GAUGEMEISTER", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT.27233d80a9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_299b4bc105b51fe2b538438c49bee834\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VALIDATOR_ACCOUNT", "model": "{{ get_where_subquery(ref('core__fact_gauges_creates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_creates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_299b4bc105b51fe2b538438c49bee834", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT.27233d80a9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_299b4bc105b51fe2b538438c49bee834.sql", "original_file_path": "models\\core\\core__fact_gauges_creates.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT", "alias": "fact_gauges_creates_VALIDATOR_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_creates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_creates.yml\\dbt_expectations_expect_column_299b4bc105b51fe2b538438c49bee834.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_299b4bc105b51fe2b538438c49bee834"}, "created_at": 1662648592.4350405, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VALIDATOR_ACCOUNT' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_creates_VALIDATOR_ACCOUNT", "column_name": "VALIDATOR_ACCOUNT", "file_key_name": "models.core__fact_gauges_creates"}, "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_BLOCKCHAIN"], "unique_id": "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "not_null_core__dim_labels_BLOCKCHAIN", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\not_null_core__dim_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.440934, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_core.dim_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_CREATOR"], "unique_id": "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "not_null_core__dim_labels_CREATOR", "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\not_null_core__dim_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.4439952, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_core.dim_labels_CREATOR", "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_LABEL_TYPE"], "unique_id": "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_TYPE", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\not_null_core__dim_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.4460216, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc"}, "created_at": 1662648592.4470248, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from SOLANA_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_LABEL_SUBTYPE"], "unique_id": "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\not_null_core__dim_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.4590218, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_core.dim_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_LABEL"], "unique_id": "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_core__dim_labels_LABEL.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL", "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\not_null_core__dim_labels_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.46102, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.core.dim_labels\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_core.dim_labels_LABEL", "column_name": "LABEL", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_ADDRESS"], "unique_id": "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models\\core\\core__dim_labels.yml", "name": "not_null_core__dim_labels_ADDRESS", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_labels.yml\\not_null_core__dim_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.46204, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom SOLANA_DEV.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.not_null_core.dim_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP", "alias": "fact_nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e"}, "created_at": 1662648592.4674551, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID", "alias": "fact_nft_mints_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b"}, "created_at": 1662648592.4704585, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID", "alias": "fact_nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a"}, "created_at": 1662648592.4743693, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED", "alias": "fact_nft_mints_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67"}, "created_at": 1662648592.4806333, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID", "alias": "fact_nft_mints_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6"}, "created_at": 1662648592.4836445, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_ID' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER", "alias": "fact_nft_mints_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a"}, "created_at": 1662648592.486646, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PURCHASER' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_PURCHASER", "column_name": "PURCHASER", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE", "alias": "fact_nft_mints_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882"}, "created_at": 1662648592.4905636, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT_PRICE' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_MINT_PRICE", "column_name": "MINT_PRICE", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT_CURRENCY", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY", "alias": "fact_nft_mints_MINT_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85"}, "created_at": 1662648592.4956372, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT_CURRENCY' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_MINT_CURRENCY", "column_name": "MINT_CURRENCY", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111.sql", "original_file_path": "models\\core\\core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT", "alias": "fact_nft_mints_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_nft_mints.yml\\dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111"}, "created_at": 1662648592.4986477, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_nft_mints_MINT", "column_name": "MINT", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN", "alias": "dim_nft_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da"}, "created_at": 1662648592.5066502, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS", "alias": "dim_nft_metadata_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e"}, "created_at": 1662648592.512303, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME", "alias": "dim_nft_metadata_CONTRACT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8"}, "created_at": 1662648592.5188062, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_CONTRACT_NAME", "column_name": "CONTRACT_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATED_AT_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP", "alias": "dim_nft_metadata_CREATED_AT_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b"}, "created_at": 1662648592.5227976, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CREATED_AT_TIMESTAMP' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_CREATED_AT_TIMESTAMP", "column_name": "CREATED_AT_TIMESTAMP", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT", "alias": "dim_nft_metadata_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696"}, "created_at": 1662648592.5276368, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_MINT", "column_name": "MINT", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS", "alias": "dim_nft_metadata_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd"}, "created_at": 1662648592.531643, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_CREATOR_ADDRESS", "column_name": "CREATOR_ADDRESS", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME", "alias": "dim_nft_metadata_CREATOR_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12"}, "created_at": 1662648592.5347042, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR_NAME' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_CREATOR_NAME", "column_name": "CREATOR_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "IMAGE_URL", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL", "alias": "dim_nft_metadata_IMAGE_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa"}, "created_at": 1662648592.5387146, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('IMAGE_URL' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_IMAGE_URL", "column_name": "IMAGE_URL", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME", "alias": "dim_nft_metadata_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa"}, "created_at": 1662648592.5437975, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID", "alias": "dim_nft_metadata_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b"}, "created_at": 1662648592.5477967, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOKEN_ID' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_METADATA", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA", "alias": "dim_nft_metadata_TOKEN_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34"}, "created_at": 1662648592.5518703, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_TOKEN_METADATA", "column_name": "TOKEN_METADATA", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_METADATA_URI", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI", "alias": "dim_nft_metadata_TOKEN_METADATA_URI", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe"}, "created_at": 1662648592.5548728, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOKEN_METADATA_URI' as \n    varchar\n) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_TOKEN_METADATA_URI", "column_name": "TOKEN_METADATA_URI", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b.sql", "original_file_path": "models\\core\\core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME", "alias": "dim_nft_metadata_TOKEN_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__dim_nft_metadata.yml\\dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b"}, "created_at": 1662648592.5594604, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOKEN_NAME' as \n    varchar\n) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.dim_nft_metadata_TOKEN_NAME", "column_name": "TOKEN_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME", "alias": "fact_gauges_votes_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7"}, "created_at": 1662648592.566483, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_NAME' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_PROGRAM_NAME", "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP", "alias": "fact_gauges_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a"}, "created_at": 1662648592.5695436, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID", "alias": "fact_gauges_votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f"}, "created_at": 1662648592.5715513, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID", "alias": "fact_gauges_votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f"}, "created_at": 1662648592.575742, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED", "alias": "fact_gauges_votes_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52"}, "created_at": 1662648592.5797107, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER", "alias": "fact_gauges_votes_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c"}, "created_at": 1662648592.5827916, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTER' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_VOTER", "column_name": "VOTER", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT.81c4874581": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6ad465d92e707fa6a7fdb0c586bf1d4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTER_NFT", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6ad465d92e707fa6a7fdb0c586bf1d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT.81c4874581", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c6ad465d92e707fa6a7fdb0c586bf1d4.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT", "alias": "fact_gauges_votes_VOTER_NFT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_c6ad465d92e707fa6a7fdb0c586bf1d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c6ad465d92e707fa6a7fdb0c586bf1d4"}, "created_at": 1662648592.5857885, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VOTER_NFT' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_VOTER_NFT", "column_name": "VOTER_NFT", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE", "alias": "fact_gauges_votes_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56"}, "created_at": 1662648592.587806, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GAUGE' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_GAUGE", "column_name": "GAUGE", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATED_SHARES", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES", "alias": "fact_gauges_votes_DELEGATED_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765"}, "created_at": 1662648592.5954242, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DELEGATED_SHARES' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_DELEGATED_SHARES", "column_name": "DELEGATED_SHARES", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POWER", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa.sql", "original_file_path": "models\\core\\core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER", "alias": "fact_gauges_votes_POWER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gauges_votes.yml\\dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa"}, "created_at": 1662648592.5985055, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('POWER' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gauges_votes_POWER", "column_name": "POWER", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP", "alias": "fact_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700"}, "created_at": 1662648592.6056468, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID", "alias": "fact_events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd"}, "created_at": 1662648592.608653, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID", "alias": "fact_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.613648, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED.559da89930": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9bb8e50fa0d037577fa50e1f7328f0ab\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9bb8e50fa0d037577fa50e1f7328f0ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED.559da89930", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_9bb8e50fa0d037577fa50e1f7328f0ab.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED", "alias": "fact_events_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_9bb8e50fa0d037577fa50e1f7328f0ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9bb8e50fa0d037577fa50e1f7328f0ab"}, "created_at": 1662648592.6156473, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_INDEX", "alias": "fact_events_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.6186473, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INDEX' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_INDEX", "column_name": "INDEX", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID", "alias": "fact_events_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c"}, "created_at": 1662648592.6221392, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_ID' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_PROGRAM_ID", "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION", "alias": "fact_events_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe"}, "created_at": 1662648592.6288557, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INSTRUCTION' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_INSTRUCTION", "column_name": "INSTRUCTION", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c78d848b64637563248f7a3067541198\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INNER_INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c78d848b64637563248f7a3067541198", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c78d848b64637563248f7a3067541198.sql", "original_file_path": "models\\core\\core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION", "alias": "fact_events_INNER_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_events.yml\\dbt_expectations_expect_column_c78d848b64637563248f7a3067541198.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c78d848b64637563248f7a3067541198"}, "created_at": 1662648592.6340325, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INNER_INSTRUCTION' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_events_INNER_INSTRUCTION", "column_name": "INNER_INSTRUCTION", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56"}, "created_at": 1662648592.6443286, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06ec7a899413bab6063716744517f718\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID", "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718"}, "created_at": 1662648592.6495588, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID", "alias": "fact_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0"}, "created_at": 1662648592.65367, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX", "alias": "fact_transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26"}, "created_at": 1662648592.6596968, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INDEX' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_INDEX", "column_name": "INDEX", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM", "alias": "fact_transfers_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2"}, "created_at": 1662648592.6649694, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_FROM' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_FROM", "column_name": "TX_FROM", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO", "alias": "fact_transfers_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273"}, "created_at": 1662648592.6691682, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_TO' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_TO", "column_name": "TX_TO", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT", "alias": "fact_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5"}, "created_at": 1662648592.6721663, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('AMOUNT' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8.sql", "original_file_path": "models\\core\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT", "alias": "fact_transfers_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transfers.yml\\dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8"}, "created_at": 1662648592.675799, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_MINT", "column_name": "MINT", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_PROGRAM", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM", "alias": "fact_swaps_SWAP_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992"}, "created_at": 1662648592.6838415, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SWAP_PROGRAM' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SWAP_PROGRAM", "column_name": "SWAP_PROGRAM", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP", "alias": "fact_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392"}, "created_at": 1662648592.6868443, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID", "alias": "fact_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7"}, "created_at": 1662648592.6907485, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID", "alias": "fact_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1662648592.6939461, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED", "alias": "fact_swaps_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578"}, "created_at": 1662648592.697946, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER", "alias": "fact_swaps_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc"}, "created_at": 1662648592.700949, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SWAPPER' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SWAPPER", "column_name": "SWAPPER", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_FROM_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT", "alias": "fact_swaps_SWAP_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f"}, "created_at": 1662648592.703959, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SWAP_FROM_AMOUNT' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SWAP_FROM_AMOUNT", "column_name": "SWAP_FROM_AMOUNT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_FROM_MINT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT", "alias": "fact_swaps_SWAP_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d"}, "created_at": 1662648592.7079413, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SWAP_FROM_MINT' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SWAP_FROM_MINT", "column_name": "SWAP_FROM_MINT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_TO_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT", "alias": "fact_swaps_SWAP_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a"}, "created_at": 1662648592.7109454, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SWAP_TO_AMOUNT' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SWAP_TO_AMOUNT", "column_name": "SWAP_TO_AMOUNT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_TO_MINT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268.sql", "original_file_path": "models\\core\\core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT", "alias": "fact_swaps_SWAP_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_swaps.yml\\dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268"}, "created_at": 1662648592.714948, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SWAP_TO_MINT' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_SWAP_TO_MINT", "column_name": "SWAP_TO_MINT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8"}, "created_at": 1662648592.721952, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e"}, "created_at": 1662648592.7259414, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH", "alias": "fact_transactions_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4"}, "created_at": 1662648592.7289422, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RECENT_BLOCK_HASH' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_RECENT_BLOCK_HASH", "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID", "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce"}, "created_at": 1662648592.7319696, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE", "alias": "fact_transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452"}, "created_at": 1662648592.7359488, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FEE' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_FEE", "column_name": "FEE", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED", "alias": "fact_transactions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6"}, "created_at": 1662648592.7389617, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNERS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS", "alias": "fact_transactions_SIGNERS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7"}, "created_at": 1662648592.7429636, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SIGNERS' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_SIGNERS", "column_name": "SIGNERS", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS", "alias": "fact_transactions_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db"}, "created_at": 1662648592.7459414, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ACCOUNT_KEYS' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_ACCOUNT_KEYS", "column_name": "ACCOUNT_KEYS", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES", "alias": "fact_transactions_PRE_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689"}, "created_at": 1662648592.7489507, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRE_BALANCES' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_PRE_BALANCES", "column_name": "PRE_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES", "alias": "fact_transactions_POST_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa"}, "created_at": 1662648592.752947, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('POST_BALANCES' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_POST_BALANCES", "column_name": "POST_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES", "alias": "fact_transactions_PRE_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209"}, "created_at": 1662648592.7559645, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRE_TOKEN_BALANCES' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_PRE_TOKEN_BALANCES", "column_name": "PRE_TOKEN_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES", "alias": "fact_transactions_POST_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d"}, "created_at": 1662648592.7599766, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('POST_TOKEN_BALANCES' as \n    varchar\n) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_POST_TOKEN_BALANCES", "column_name": "POST_TOKEN_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOG_MESSAGES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624.sql", "original_file_path": "models\\core\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES", "alias": "fact_transactions_LOG_MESSAGES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_transactions.yml\\dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624"}, "created_at": 1662648592.7632449, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LOG_MESSAGES' as \n    varchar\n) as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_LOG_MESSAGES", "column_name": "LOG_MESSAGES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME", "alias": "fact_gov_actions_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175"}, "created_at": 1662648592.7702575, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROGRAM_NAME' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_PROGRAM_NAME", "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP", "alias": "fact_gov_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e"}, "created_at": 1662648592.7731533, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID", "alias": "fact_gov_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b"}, "created_at": 1662648592.778546, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID", "alias": "fact_gov_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f"}, "created_at": 1662648592.783313, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED", "alias": "fact_gov_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae"}, "created_at": 1662648592.7863975, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SUCCEEDED' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_SUCCEEDED", "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER", "alias": "fact_gov_actions_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027"}, "created_at": 1662648592.7903183, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SIGNER' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_SIGNER", "column_name": "SIGNER", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOCKER_ACCOUNT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT", "alias": "fact_gov_actions_LOCKER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c"}, "created_at": 1662648592.7939186, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LOCKER_ACCOUNT' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_LOCKER_ACCOUNT", "column_name": "LOCKER_ACCOUNT", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT.50baab0134": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_02e5a90ccb72fdda8f55b4aeea19bbb5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOCKER_NFT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_02e5a90ccb72fdda8f55b4aeea19bbb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT.50baab0134", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_02e5a90ccb72fdda8f55b4aeea19bbb5.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT", "alias": "fact_gov_actions_LOCKER_NFT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_02e5a90ccb72fdda8f55b4aeea19bbb5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_02e5a90ccb72fdda8f55b4aeea19bbb5"}, "created_at": 1662648592.7979977, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LOCKER_NFT' as \n    varchar\n) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_LOCKER_NFT", "column_name": "LOCKER_NFT", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT", "alias": "fact_gov_actions_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488"}, "created_at": 1662648592.8009968, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINT' as \n    varchar\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_MINT", "column_name": "MINT", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION", "alias": "fact_gov_actions_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4"}, "created_at": 1662648592.8049948, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ACTION' as \n    varchar\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_ACTION", "column_name": "ACTION", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb.sql", "original_file_path": "models\\core\\core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT", "alias": "fact_gov_actions_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\solana_models\\models\\core\\core__fact_gov_actions.yml\\dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb"}, "created_at": 1662648592.8079133, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('AMOUNT' as \n    varchar\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA_DEV.dbt_expectations_expect_column_to_exist_core.fact_gov_actions_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.core__fact_gov_actions"}}, "sources": {"source.solana_models.prod.solana_blocks": {"fqn": ["solana_models", "prod", "solana_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.solana_models.prod.solana_blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "solana_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "solana_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.solana_blocks", "created_at": 1662571477.6486804}, "source.solana_models.prod.solana_txs": {"fqn": ["solana_models", "prod", "solana_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.solana_models.prod.solana_txs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "solana_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "solana_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.solana_txs", "created_at": 1662571477.6497695}, "source.solana_models.crosschain.address_labels": {"fqn": ["solana_models", "crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.solana_models.crosschain.address_labels", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1662571477.6497695}, "source.solana_models.shared.prices_v2": {"fqn": ["solana_models", "shared", "prices_v2"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.solana_models.shared.prices_v2", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "prices_v2", "source_name": "shared", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices_v2", "created_at": 1662571477.6497695}, "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827": {"fqn": ["solana_models", "legacy_bronze", "prod_nft_metadata_uploads_1828572827"], "database": "flipside_prod_db", "schema": "bronze", "unique_id": "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "prod_nft_metadata_uploads_1828572827", "source_name": "legacy_bronze", "source_description": "", "loader": "", "identifier": "prod_nft_metadata_uploads_1828572827", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.bronze.prod_nft_metadata_uploads_1828572827", "created_at": 1662571477.6497695}, "source.solana_models.solana_external.decoded_instructions_data_api": {"fqn": ["solana_models", "solana_external", "decoded_instructions_data_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.decoded_instructions_data_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "decoded_instructions_data_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "decoded_instructions_data_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/DECODED_INSTRUCTIONS_DATA_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": null, "auto_refresh": true}, "description": "External table of solana decoded instructions data", "columns": {"tx_id": {"name": "tx_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "", "meta": {}, "data_type": "number", "quote": null, "tags": []}, "program_id": {"name": "program_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "instruction_type": {"name": "instruction_type", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.decoded_instructions_data_api", "created_at": 1662571477.6497695}, "source.solana_models.solana_external.validator_metadata_api": {"fqn": ["solana_models", "solana_external", "validator_metadata_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.validator_metadata_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "validator_metadata_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "validator_metadata_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/VALIDATOR_METADATA_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": null, "auto_refresh": true}, "description": "External table of solana validator metadata", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.validator_metadata_api", "created_at": 1662571477.6497695}, "source.solana_models.solana_external.stake_account_tx_ids_api": {"fqn": ["solana_models", "solana_external", "stake_account_tx_ids_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.stake_account_tx_ids_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "stake_account_tx_ids_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "stake_account_tx_ids_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/STAKE_ACCOUNT_TX_IDS_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": null, "auto_refresh": true}, "description": "External table of solana stake account tx ids", "columns": {"account": {"name": "account", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "slot": {"name": "slot", "description": "", "meta": {}, "data_type": "number", "quote": null, "tags": []}, "blockTime": {"name": "blockTime", "description": "", "meta": {}, "data_type": "number", "quote": null, "tags": []}, "signature": {"name": "signature", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.stake_account_tx_ids_api", "created_at": 1662571477.65068}, "source.solana_models.solana_external.txs_api": {"fqn": ["solana_models", "solana_external", "txs_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.txs_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "txs_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "txs_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/TXS_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": [{"name": "_inserted_date", "description": "", "data_type": "string", "meta": {}, "expression": "substr((split_part(METADATA$FILENAME,'/',3)),16,10)"}], "auto_refresh": true}, "description": "External table of solana stake account tx ids", "columns": {"metadata": {"name": "metadata", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.txs_api", "created_at": 1662571477.65068}, "source.solana_models.solana_external.blocks_api": {"fqn": ["solana_models", "solana_external", "blocks_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.blocks_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "blocks_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "blocks_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/BLOCKS_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": [{"name": "_inserted_date", "description": "", "data_type": "string", "meta": {}, "expression": "substr((split_part(METADATA$FILENAME,'/',3)),16,10)"}], "auto_refresh": true}, "description": "External table of solana stake account tx ids", "columns": {"metadata": {"name": "metadata", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "", "meta": {}, "data_type": "integer", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.blocks_api", "created_at": 1662571477.65068}, "source.solana_models.solana_external.block_rewards_api": {"fqn": ["solana_models", "solana_external", "block_rewards_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.block_rewards_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "block_rewards_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "block_rewards_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/BLOCK_REWARDS_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": [{"name": "_partition_id", "description": "", "data_type": "number", "meta": {}, "expression": "to_number(split_part(split_part(METADATA$FILENAME,'/',3),'=',2))"}], "auto_refresh": true}, "description": "External table of solana stake account tx ids", "columns": {"metadata": {"name": "metadata", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "", "meta": {}, "data_type": "integer", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.block_rewards_api", "created_at": 1662571477.65068}, "source.solana_models.solana_external.block_txs_api": {"fqn": ["solana_models", "solana_external", "block_txs_api"], "database": "SOLANA_DEV", "schema": "bronze", "unique_id": "source.solana_models.solana_external.block_txs_api", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "block_txs_api", "source_name": "solana_external", "source_description": "", "loader": "S3", "identifier": "block_txs_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@solana.bronze.analytics_external_tables/SOLANA_DEV/BLOCK_TXS_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": [{"name": "_partition_id", "description": "", "data_type": "number", "meta": {}, "expression": "to_number(split_part(split_part(METADATA$FILENAME,'/',3),'=',2))"}], "auto_refresh": true}, "description": "External table of solana stake account tx ids", "columns": {"metadata": {"name": "metadata", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "", "meta": {}, "data_type": "integer", "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SOLANA_DEV.bronze.block_txs_api", "created_at": 1662571477.65068}}, "macros": {"macro.solana_models.create_sps": {"unique_id": "macro.solana_models.create_sps", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\create_sps.sql", "original_file_path": "macros\\create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\r\n    {% if target.database == 'SOLANA' %}\r\n        CREATE SCHEMA IF NOT EXISTS _internal;\r\n        {{ sp_create_prod_clone('_internal') }};\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.solana_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9547648}, "macro.solana_models.create_udfs": {"unique_id": "macro.solana_models.create_udfs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\create_udfs.sql", "original_file_path": "macros\\create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\r\n    {% set sql %}\r\n    {{ udf_bulk_get_decoded_instructions_data() }};\r\n    {{ udf_bulk_get_validator_metadata() }};\r\n    {{ udf_bulk_get_stake_account_tx_ids() }};\r\n    {{ udf_bulk_get_txs() }};\r\n    {{ udf_bulk_get_blocks() }};\r\n    {{ udf_bulk_get_block_txs() }};\r\n    {{ udf_bulk_get_block_rewards() }};\r\n    {{ create_udf_ordered_signers(\r\n        schema = \"silver\"\r\n    ) }}\r\n    {{ create_udf_get_all_inner_instruction_events(\r\n        schema = \"silver\"\r\n    ) }}\r\n    {{ create_udf_get_account_balances_index(\r\n        schema = \"silver\"\r\n    ) }}\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.solana_models.udf_bulk_get_decoded_instructions_data", "macro.solana_models.udf_bulk_get_validator_metadata", "macro.solana_models.udf_bulk_get_stake_account_tx_ids", "macro.solana_models.udf_bulk_get_txs", "macro.solana_models.udf_bulk_get_blocks", "macro.solana_models.udf_bulk_get_block_txs", "macro.solana_models.udf_bulk_get_block_rewards", "macro.solana_models.create_udf_ordered_signers", "macro.solana_models.create_udf_get_all_inner_instruction_events", "macro.solana_models.create_udf_get_account_balances_index", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9568655}, "macro.solana_models.generate_schema_name": {"unique_id": "macro.solana_models.generate_schema_name", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\custom_naming_macros.sql", "original_file_path": "macros\\custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\r\n        custom_schema_name = none,\r\n        node = none\r\n    ) -%}\r\n    {% set node_name = node.name %}\r\n    {% set split_name = node_name.split('__') %}\r\n    {{ split_name [0] | trim }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.957846}, "macro.solana_models.generate_alias_name": {"unique_id": "macro.solana_models.generate_alias_name", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\custom_naming_macros.sql", "original_file_path": "macros\\custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\r\n        custom_alias_name = none,\r\n        node = none\r\n    ) -%}\r\n    {% set node_name = node.name %}\r\n    {% set split_name = node_name.split('__') %}\r\n    {{ split_name [1] | trim }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.957846}, "macro.solana_models.run_sp_create_prod_clone": {"unique_id": "macro.solana_models.run_sp_create_prod_clone", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\run_sp_create_prod_clone.sql", "original_file_path": "macros\\run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\r\n{% set clone_query %}\r\ncall solana._internal.create_prod_clone('solana', 'solana_dev', 'internal_dev');\r\n{% endset %}\r\n\r\n{% do run_query(clone_query) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9587622}, "macro.solana_models.sp_create_prod_clone": {"unique_id": "macro.solana_models.sp_create_prod_clone", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\sp_create_prod_clone.sql", "original_file_path": "macros\\sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\r\n\r\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\r\nreturns boolean \r\nlanguage javascript\r\nexecute as caller\r\nas\r\n$$\r\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\r\n    try {\r\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\r\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\r\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\r\n\r\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\r\n            WHERE grantor IS NOT NULL\r\n            GROUP BY 1;`});\r\n\r\n        while (existing_schemas.next()) {\r\n            var schema = existing_schemas.getColumnValue(1)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\r\n            WHERE grantor IS NOT NULL\r\n            GROUP BY 1,2;`});\r\n\r\n        while (existing_tables.next()) {\r\n            var schema = existing_tables.getColumnValue(1)\r\n            var table_name = existing_tables.getColumnValue(2)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\r\n\r\n        while (existing_functions.next()) {\r\n            var schema = existing_functions.getColumnValue(1)\r\n            var function_name = existing_functions.getColumnValue(2)\r\n            var argument_signature = existing_functions.getColumnValue(3)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\r\n\r\n        while (existing_procedures.next()) {\r\n            var schema = existing_procedures.getColumnValue(1)\r\n            var procedure_name = existing_procedures.getColumnValue(2)\r\n            var argument_signature = existing_procedures.getColumnValue(3)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_tasks = snowflake.execute({sqlText: `SHOW TASKS IN DATABASE ${DESTINATION_DB_NAME};`});\r\n\r\n        while (existing_tasks.next()) {\r\n            var schema = existing_tasks.getColumnValue(5)\r\n            var task_name = existing_tasks.getColumnValue(2)\r\n            snowflake.execute({sqlText: `ALTER TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} SUSPEND;`})\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\r\n        snowflake.execute({sqlText: `COMMIT;`});\r\n    } catch (err) {\r\n        snowflake.execute({sqlText: `ROLLBACK;`});\r\n        throw(err);\r\n    }\r\n    \r\n    return true\r\n$$\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.959841}, "macro.solana_models.create_udf_ordered_signers": {"unique_id": "macro.solana_models.create_udf_ordered_signers", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\python\\udfs.sql", "original_file_path": "macros\\python\\udfs.sql", "name": "create_udf_ordered_signers", "macro_sql": "{% macro create_udf_ordered_signers(schema) %}\r\ncreate or replace function {{ schema }}.udf_ordered_signers(accts array)\r\nreturns array\r\nlanguage python\r\nruntime_version = '3.8'\r\nhandler = 'ordered_signers'\r\nas\r\n$$\r\ndef ordered_signers(accts) -> list:\r\n    signers = [] \r\n    for v in accts:\r\n        if v[\"signer\"]:\r\n            signers.append(v[\"pubkey\"])\r\n\r\n    return signers\r\n$$;\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.959841}, "macro.solana_models.create_udf_get_all_inner_instruction_events": {"unique_id": "macro.solana_models.create_udf_get_all_inner_instruction_events", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\python\\udfs.sql", "original_file_path": "macros\\python\\udfs.sql", "name": "create_udf_get_all_inner_instruction_events", "macro_sql": "{% macro create_udf_get_all_inner_instruction_events(schema) %}\r\ncreate or replace function {{ schema }}.udf_get_all_inner_instruction_events(inner_instruction array)\r\nreturns array\r\nlanguage python\r\nruntime_version = '3.8'\r\nhandler = 'get_all_inner_instruction_events'\r\nas\r\n$$\r\ndef get_all_inner_instruction_events(inner_instruction) -> list:\r\n    event_types = [] \r\n    if inner_instruction:\r\n        for v in inner_instruction:\r\n            if type(v) is dict and v.get(\"parsed\") and type(v[\"parsed\"]) is dict and v[\"parsed\"].get(\"type\"):\r\n                event_types.append(v[\"parsed\"][\"type\"])\r\n            else:\r\n                event_types.append(None)\r\n\r\n    return event_types\r\n$$;\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9608426}, "macro.solana_models.create_udf_get_account_balances_index": {"unique_id": "macro.solana_models.create_udf_get_account_balances_index", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\python\\udfs.sql", "original_file_path": "macros\\python\\udfs.sql", "name": "create_udf_get_account_balances_index", "macro_sql": "{% macro create_udf_get_account_balances_index(schema) %}\r\ncreate or replace function {{ schema }}.udf_get_account_balances_index(account string, account_keys array)\r\nreturns int\r\nlanguage python\r\nruntime_version = '3.8'\r\nhandler = 'get_account_balances_index'\r\nas\r\n$$\r\ndef get_account_balances_index(account, account_keys) -> int:\r\n    for i,a in enumerate(account_keys):\r\n        if a and a.get(\"pubkey\") == account:\r\n            return i\r\n\r\n    return None\r\n$$;\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9608426}, "macro.solana_models.sp_refresh_external_table_batch": {"unique_id": "macro.solana_models.sp_refresh_external_table_batch", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\sp_refresh_external_table_batch.sql", "original_file_path": "macros\\streamline\\sp_refresh_external_table_batch.sql", "name": "sp_refresh_external_table_batch", "macro_sql": "{% macro sp_refresh_external_table_batch() %}\r\n{% set sql %}\r\ncreate or replace procedure streamline.refresh_external_table_next_batch(external_table_name string, streamline_table_name string)\r\nreturns string\r\nlanguage sql\r\nas\r\n$$\r\n    declare \r\n        path string;\r\n        select_stmt string;\r\n        refresh_stmt string;\r\n        res resultset;\r\n    begin \r\n        select_stmt := 'select concat(\\'batch=\\',coalesce(max(_partition_id),0)+1,\\'/\\') as path from streamline.' || :streamline_table_name;\r\n        res := (execute immediate :select_stmt);\r\n        let c1 cursor for res;\r\n        for row_variable in c1 do\r\n            path := row_variable.path;\r\n        end for;\r\n        refresh_stmt := 'alter external table bronze.' || :external_table_name || ' refresh \\'' || :PATH || '\\'';\r\n        res := (execute immediate :refresh_stmt);\r\n        return 'table refreshed with ' || :refresh_stmt;\r\n    end;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9608426}, "macro.solana_models.task_bulk_get_blocks_historical": {"unique_id": "macro.solana_models.task_bulk_get_blocks_historical", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_blocks\\task_bulk_get_blocks_historical.sql", "original_file_path": "macros\\streamline\\bulk_get_blocks\\task_bulk_get_blocks_historical.sql", "name": "task_bulk_get_blocks_historical", "macro_sql": "{% macro task_bulk_get_blocks_historical() %}\r\n{% set sql %}\r\nexecute immediate 'create or replace task streamline.bulk_get_blocks_historical\r\n    warehouse = dbt_cloud_solana\r\n    allow_overlapping_execution = false\r\n    schedule = \\'USING CRON */15 * * * * UTC\\'\r\nas\r\nBEGIN\r\n    alter external table bronze.blocks_api refresh;\r\n    create or replace temporary table streamline.complete_blocks__dbt_tmp as\r\n    (\r\n        select * \r\n        from (\r\n                WITH meta AS (\r\n                    SELECT\r\n                        registered_on,\r\n                        file_name\r\n                    FROM\r\n                        TABLE(\r\n                            information_schema.external_table_files(\r\n                                table_name => \\'bronze.blocks_api\\'\r\n                            )\r\n                        ) A\r\n                    WHERE\r\n                        registered_on >= (\r\n                            SELECT\r\n                                COALESCE(MAX(_INSERTED_TIMESTAMP), \\'1970-01-01\\' :: DATE) max_INSERTED_TIMESTAMP\r\n                            FROM\r\n                                streamline.complete_blocks\r\n                        )\r\n                )\r\n                SELECT\r\n                    block_id,\r\n                    _inserted_date,\r\n                    m.registered_on as _inserted_timestamp\r\n                FROM\r\n                    bronze.blocks_api AS s\r\n                    JOIN meta m\r\n                    ON m.file_name = metadata$filename\r\n                WHERE\r\n                    s.block_id IS NOT NULL\r\n                    AND s._inserted_date >= CURRENT_DATE\r\n                    AND m.registered_on > (\r\n                        SELECT\r\n                            coalesce(max(_inserted_timestamp),\\'2022-01-01 00:00:00\\'::timestamp_ntz)\r\n                        FROM\r\n                            streamline.complete_blocks\r\n                    )\r\n                    qualify(ROW_NUMBER() over (PARTITION BY block_id\r\n                    ORDER BY\r\n                    _inserted_date, _inserted_timestamp DESC)) = 1\r\n        ) \r\n        order by (_inserted_date)\r\n    );\r\n    merge into streamline.complete_blocks as DBT_INTERNAL_DEST\r\n        using streamline.complete_blocks__dbt_tmp as DBT_INTERNAL_SOURCE\r\n        on DBT_INTERNAL_SOURCE.block_id = DBT_INTERNAL_DEST.block_id\r\n        when matched then \r\n            update set\r\n            _inserted_date = DBT_INTERNAL_SOURCE._inserted_date,\r\n            _inserted_timestamp = DBT_INTERNAL_SOURCE._inserted_timestamp\r\n        when not matched then \r\n            insert (\"BLOCK_ID\", \"_INSERTED_DATE\", \"_INSERTED_TIMESTAMP\")\r\n            values (\"BLOCK_ID\", \"_INSERTED_DATE\", \"_INSERTED_TIMESTAMP\");\r\n    select streamline.udf_bulk_get_blocks(FALSE)\r\n    where exists (\r\n        select 1\r\n        from streamline.all_unknown_blocks_historical\r\n        limit 1\r\n    );\r\n    select streamline.udf_bulk_get_blocks(TRUE)\r\n    where exists (\r\n        select 1\r\n        from streamline.all_unknown_blocks_real_time\r\n        limit 1\r\n    );\r\nEND;'\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% if target.database == 'SOLANA' %}\r\n    {% set sql %}\r\n    alter task streamline.bulk_get_blocks_historical resume;\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9629586}, "macro.solana_models.task_bulk_get_blocks_real_time": {"unique_id": "macro.solana_models.task_bulk_get_blocks_real_time", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_blocks\\task_bulk_get_blocks_real_time.sql", "original_file_path": "macros\\streamline\\bulk_get_blocks\\task_bulk_get_blocks_real_time.sql", "name": "task_bulk_get_blocks_real_time", "macro_sql": "{% macro task_bulk_get_blocks_real_time() %}\r\n-- {% set sql %}\r\n-- execute immediate 'create or replace task streamline.bulk_get_blocks_real_time\r\n--     warehouse = dbt_cloud_solana\r\n--     allow_overlapping_execution = false\r\n--     schedule = \\'USING CRON */15 * * * * UTC\\'\r\n-- as\r\n-- BEGIN\r\n--     select streamline.udf_bulk_get_blocks(TRUE)\r\n--     where exists (\r\n--         select 1\r\n--         from streamline.all_unknown_blocks_real_time\r\n--         limit 1\r\n--     );\r\n-- END;'\r\n-- {% endset %}\r\n-- {% do run_query(sql) %}\r\n\r\n-- {% if target.database == 'SOLANA' %}\r\n--     {% set sql %}\r\n--     alter task streamline.bulk_get_blocks_real_time resume;\r\n--     {% endset %}\r\n--     {% do run_query(sql) %}\r\n-- {% endif %}\r\n-- {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9640663}, "macro.solana_models.udf_bulk_get_blocks": {"unique_id": "macro.solana_models.udf_bulk_get_blocks", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_blocks\\udf_bulk_get_blocks.sql", "original_file_path": "macros\\streamline\\bulk_get_blocks\\udf_bulk_get_blocks.sql", "name": "udf_bulk_get_blocks", "macro_sql": "{% macro udf_bulk_get_blocks() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_get_blocks(is_real_time boolean) returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_get_blocks'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_get_blocks'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9640663}, "macro.solana_models.task_bulk_get_block_rewards_historical": {"unique_id": "macro.solana_models.task_bulk_get_block_rewards_historical", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_block_rewards\\task_bulk_get_block_rewards_historical.sql", "original_file_path": "macros\\streamline\\bulk_get_block_rewards\\task_bulk_get_block_rewards_historical.sql", "name": "task_bulk_get_block_rewards_historical", "macro_sql": "{% macro task_bulk_get_block_rewards_historical() %}\r\n{% set sql %}\r\nexecute immediate 'create or replace task streamline.bulk_get_block_rewards_historical\r\n    warehouse = dbt_cloud_solana\r\n    allow_overlapping_execution = false\r\n    schedule = \\'USING CRON */15 * * * * UTC\\'\r\nas\r\nBEGIN\r\n    call streamline.refresh_external_table_next_batch(\\'block_rewards_api\\',\\'complete_block_rewards\\');\r\n    create or replace temporary table streamline.complete_block_rewards__dbt_tmp as\r\n    (\r\n        select * \r\n        from (\r\n            SELECT\r\n                block_id,\r\n                _partition_id\r\n            FROM\r\n                bronze.block_rewards_api AS s\r\n            WHERE\r\n                s.block_id IS NOT NULL\r\n                AND s._partition_id > (\r\n                    select \r\n                        coalesce(max(_partition_id),0)\r\n                    from\r\n                        streamline.complete_block_rewards\r\n                )\r\n            group by 1,2\r\n        ) \r\n        order by (_partition_id)\r\n    );\r\n    merge into streamline.complete_block_rewards as DBT_INTERNAL_DEST\r\n        using streamline.complete_block_rewards__dbt_tmp as DBT_INTERNAL_SOURCE\r\n        on DBT_INTERNAL_SOURCE.block_id = DBT_INTERNAL_DEST.block_id\r\n        when matched then \r\n            update set\r\n            _partition_id = DBT_INTERNAL_SOURCE._partition_id\r\n        when not matched then \r\n            insert (\"BLOCK_ID\", \"_PARTITION_ID\")\r\n            values (\"BLOCK_ID\", \"_PARTITION_ID\");\r\n    select streamline.udf_bulk_get_block_rewards(FALSE)\r\n        where exists (\r\n            select 1\r\n            from streamline.all_unknown_block_rewards_historical\r\n            limit 1\r\n        );\r\n    select streamline.udf_bulk_get_block_rewards(TRUE)\r\n        where exists (\r\n            select 1\r\n            from streamline.all_unknown_block_rewards_real_time\r\n            limit 1\r\n        );        \r\nEND;'\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% if target.database == 'SOLANA' %}\r\n    {% set sql %}\r\n    alter task streamline.bulk_get_block_rewards_historical resume;\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9649885}, "macro.solana_models.task_bulk_get_block_rewards_real_time": {"unique_id": "macro.solana_models.task_bulk_get_block_rewards_real_time", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_block_rewards\\task_bulk_get_block_rewards_real_time.sql", "original_file_path": "macros\\streamline\\bulk_get_block_rewards\\task_bulk_get_block_rewards_real_time.sql", "name": "task_bulk_get_block_rewards_real_time", "macro_sql": "{% macro task_bulk_get_block_rewards_real_time() %}\r\n-- {% set sql %}\r\n-- execute immediate 'create or replace task streamline.bulk_get_block_rewards_real_time\r\n--     warehouse = dbt_cloud_solana\r\n--     allow_overlapping_execution = false\r\n--     schedule = \\'USING CRON */15 * * * * UTC\\'\r\n-- as\r\n-- BEGIN\r\n--     select streamline.udf_bulk_get_block_rewards(TRUE)\r\n--         where exists (\r\n--             select 1\r\n--             from streamline.all_unknown_block_rewards_real_time\r\n--             limit 1\r\n--         );       \r\n-- END;'\r\n-- {% endset %}\r\n-- {% do run_query(sql) %}\r\n\r\n-- {% if target.database == 'SOLANA' %}\r\n--     {% set sql %}\r\n--     alter task streamline.bulk_get_block_rewards_real_time resume;\r\n--     {% endset %}\r\n--     {% do run_query(sql) %}\r\n-- {% endif %}\r\n-- {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9660718}, "macro.solana_models.udf_bulk_get_block_rewards": {"unique_id": "macro.solana_models.udf_bulk_get_block_rewards", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_block_rewards\\udf_bulk_get_block_rewards.sql", "original_file_path": "macros\\streamline\\bulk_get_block_rewards\\udf_bulk_get_block_rewards.sql", "name": "udf_bulk_get_block_rewards", "macro_sql": "{% macro udf_bulk_get_block_rewards() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_get_block_rewards(is_real_time boolean) returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_get_block_rewards'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_get_block_rewards'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9670126}, "macro.solana_models.task_bulk_get_block_txs_historical": {"unique_id": "macro.solana_models.task_bulk_get_block_txs_historical", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_block_txs\\task_bulk_get_block_txs_historical.sql", "original_file_path": "macros\\streamline\\bulk_get_block_txs\\task_bulk_get_block_txs_historical.sql", "name": "task_bulk_get_block_txs_historical", "macro_sql": "{% macro task_bulk_get_block_txs_historical() %}\r\n{% set sql %}\r\nexecute immediate 'create or replace task streamline.bulk_get_block_txs_historical\r\n    warehouse = dbt_emergency\r\n    allow_overlapping_execution = false\r\n    schedule = \\'USING CRON */20 * * * * UTC\\'\r\nas\r\nBEGIN\r\n    call streamline.refresh_external_table_next_batch(\\'block_txs_api\\',\\'complete_block_txs\\');\r\n    create or replace temporary table streamline.complete_block_txs__dbt_tmp as\r\n    (\r\n        select * \r\n        from (\r\n            SELECT\r\n                block_id,\r\n                _partition_id\r\n            FROM\r\n                bronze.block_txs_api AS s\r\n            WHERE\r\n                s.block_id IS NOT NULL\r\n            AND s._partition_id > (\r\n                select \r\n                    coalesce(max(_partition_id),0)\r\n                from\r\n                    streamline.complete_block_txs\r\n            )\r\n            group by 1,2\r\n        ) \r\n        order by (_partition_id)\r\n    );\r\n    merge into streamline.complete_block_txs as DBT_INTERNAL_DEST\r\n        using streamline.complete_block_txs__dbt_tmp as DBT_INTERNAL_SOURCE\r\n        on DBT_INTERNAL_SOURCE.block_id = DBT_INTERNAL_DEST.block_id\r\n        when matched then \r\n            update set _partition_id = DBT_INTERNAL_SOURCE._partition_id\r\n        when not matched then \r\n            insert (\"BLOCK_ID\", \"_PARTITION_ID\")\r\n            values (\"BLOCK_ID\", \"_PARTITION_ID\");\r\n    select streamline.udf_bulk_get_block_txs(FALSE)\r\n    where exists (\r\n        select 1\r\n        from streamline.all_unknown_block_txs_historical\r\n        limit 1\r\n    );\r\n    select streamline.udf_bulk_get_block_txs(TRUE)\r\n    where exists (\r\n        select 1\r\n        from streamline.all_unknown_block_txs_real_time\r\n        limit 1\r\n    );\r\nEND;'\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% if target.database == 'SOLANA' %}\r\n    {% set sql %}\r\n    alter task streamline.bulk_get_block_txs_historical resume;\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9680676}, "macro.solana_models.task_bulk_get_block_txs_real_time": {"unique_id": "macro.solana_models.task_bulk_get_block_txs_real_time", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_block_txs\\task_bulk_get_block_txs_real_time.sql", "original_file_path": "macros\\streamline\\bulk_get_block_txs\\task_bulk_get_block_txs_real_time.sql", "name": "task_bulk_get_block_txs_real_time", "macro_sql": "{% macro task_bulk_get_block_txs_real_time() %}\r\n-- {% set sql %}\r\n-- execute immediate 'create or replace task streamline.bulk_get_block_txs_real_time\r\n--     warehouse = dbt_cloud_solana\r\n--     allow_overlapping_execution = false\r\n--     schedule = \\'USING CRON */15 * * * * UTC\\'\r\n-- as\r\n-- BEGIN\r\n--     select streamline.udf_bulk_get_block_txs(TRUE)\r\n--     where exists (\r\n--         select 1\r\n--         from streamline.all_unknown_block_txs_real_time\r\n--         limit 1\r\n--     );\r\n-- END;'\r\n-- {% endset %}\r\n-- {% do run_query(sql) %}\r\n\r\n-- {% if target.database == 'SOLANA' %}\r\n--     {% set sql %}\r\n--     alter task streamline.bulk_get_block_txs_real_time resume;\r\n--     {% endset %}\r\n--     {% do run_query(sql) %}\r\n-- {% endif %}\r\n-- {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9690862}, "macro.solana_models.udf_bulk_get_block_txs": {"unique_id": "macro.solana_models.udf_bulk_get_block_txs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_block_txs\\udf_bulk_get_block_txs.sql", "original_file_path": "macros\\streamline\\bulk_get_block_txs\\udf_bulk_get_block_txs.sql", "name": "udf_bulk_get_block_txs", "macro_sql": "{% macro udf_bulk_get_block_txs() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_get_block_txs(is_real_time boolean) returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_get_block_txs'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_get_block_txs'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9690862}, "macro.solana_models.sp_create_bulk_get_decoded_instructions_data": {"unique_id": "macro.solana_models.sp_create_bulk_get_decoded_instructions_data", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_decoded_instructions_data.sql\\sp_create_bulk_get_decoded_instructions_data.sql", "original_file_path": "macros\\streamline\\bulk_get_decoded_instructions_data.sql\\sp_create_bulk_get_decoded_instructions_data.sql", "name": "sp_create_bulk_get_decoded_instructions_data", "macro_sql": "{% macro sp_create_bulk_get_decoded_instructions_data() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_decoded_instructions_data() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n    row_cnt INTEGER;\r\n  BEGIN\r\n    row_cnt:= (\r\n      SELECT\r\n        COUNT(1)\r\n      FROM\r\n        silver._all_undecoded_instructions_data\r\n    );\r\n    if (\r\n        row_cnt > 0\r\n      ) THEN RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_decoded_instructions_data()\r\n      );\r\n      ELSE RESULT:= NULL;\r\n    END if;\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9700682}, "macro.solana_models.udf_bulk_get_decoded_instructions_data": {"unique_id": "macro.solana_models.udf_bulk_get_decoded_instructions_data", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_decoded_instructions_data.sql\\udf_bulk_get_decoded_instructions_data.sql", "original_file_path": "macros\\streamline\\bulk_get_decoded_instructions_data.sql\\udf_bulk_get_decoded_instructions_data.sql", "name": "udf_bulk_get_decoded_instructions_data", "macro_sql": "{% macro udf_bulk_get_decoded_instructions_data() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_decoded_instructions_data() returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_decode_instruction_arguments'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_decode_instruction_arguments'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9700682}, "macro.solana_models.run_sp_bulk_get_stake_account_tx_ids": {"unique_id": "macro.solana_models.run_sp_bulk_get_stake_account_tx_ids", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_stake_account_tx_ids\\run_sp_bulk_get_stake_account_tx_ids.sql", "original_file_path": "macros\\streamline\\bulk_get_stake_account_tx_ids\\run_sp_bulk_get_stake_account_tx_ids.sql", "name": "run_sp_bulk_get_stake_account_tx_ids", "macro_sql": "{% macro run_sp_bulk_get_stake_account_tx_ids() %}\r\n{% set sql %}\r\ncall silver.sp_bulk_get_stake_account_tx_ids();\r\n{% endset %}\r\n\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9711058}, "macro.solana_models.sp_create_bulk_get_stake_account_tx_ids": {"unique_id": "macro.solana_models.sp_create_bulk_get_stake_account_tx_ids", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_stake_account_tx_ids\\sp_create_bulk_get_stake_account_tx_ids.sql", "original_file_path": "macros\\streamline\\bulk_get_stake_account_tx_ids\\sp_create_bulk_get_stake_account_tx_ids.sql", "name": "sp_create_bulk_get_stake_account_tx_ids", "macro_sql": "{% macro sp_create_bulk_get_stake_account_tx_ids() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_stake_account_tx_ids() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n    row_cnt INTEGER;\r\n  BEGIN\r\n    row_cnt:= (\r\n      SELECT\r\n        COUNT(1)\r\n      FROM\r\n        silver._all_unknown_stake_vote_accounts\r\n    );\r\n    if (\r\n        row_cnt > 0\r\n      ) THEN RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_stake_account_tx_ids()\r\n      );\r\n      ELSE RESULT:= NULL;\r\n    END if;\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9711058}, "macro.solana_models.udf_bulk_get_stake_account_tx_ids": {"unique_id": "macro.solana_models.udf_bulk_get_stake_account_tx_ids", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_stake_account_tx_ids\\udf_bulk_get_stake_account_tx_ids.sql", "original_file_path": "macros\\streamline\\bulk_get_stake_account_tx_ids\\udf_bulk_get_stake_account_tx_ids.sql", "name": "udf_bulk_get_stake_account_tx_ids", "macro_sql": "{% macro udf_bulk_get_stake_account_tx_ids() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_stake_account_tx_ids() returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_get_stake_account_tx_ids'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_get_stake_account_tx_ids'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.972082}, "macro.solana_models.run_sp_bulk_get_txs": {"unique_id": "macro.solana_models.run_sp_bulk_get_txs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_txs\\run_sp_bulk_get_txs.sql", "original_file_path": "macros\\streamline\\bulk_get_txs\\run_sp_bulk_get_txs.sql", "name": "run_sp_bulk_get_txs", "macro_sql": "{% macro run_sp_bulk_get_txs() %}\r\n{% set sql %}\r\ncall silver.sp_bulk_get_txs();\r\n{% endset %}\r\n\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.972082}, "macro.solana_models.sp_create_bulk_get_txs": {"unique_id": "macro.solana_models.sp_create_bulk_get_txs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_txs\\sp_create_bulk_get_txs.sql", "original_file_path": "macros\\streamline\\bulk_get_txs\\sp_create_bulk_get_txs.sql", "name": "sp_create_bulk_get_txs", "macro_sql": "{% macro sp_create_bulk_get_txs() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_txs() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n    row_cnt INTEGER;\r\n  BEGIN\r\n    row_cnt:= (\r\n      SELECT\r\n        COUNT(1)\r\n      FROM\r\n        silver._all_unknown_tx_details\r\n    );\r\n    if (\r\n        row_cnt > 0\r\n      ) THEN RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_txs()\r\n      );\r\n      ELSE RESULT:= NULL;\r\n    END if;\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9730725}, "macro.solana_models.udf_bulk_get_txs": {"unique_id": "macro.solana_models.udf_bulk_get_txs", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_txs\\udf_bulk_get_txs.sql", "original_file_path": "macros\\streamline\\bulk_get_txs\\udf_bulk_get_txs.sql", "name": "udf_bulk_get_txs", "macro_sql": "{% macro udf_bulk_get_txs() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_txs() returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_get_txs'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_get_txs'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9740722}, "macro.solana_models.run_sp_bulk_get_validator_metadata": {"unique_id": "macro.solana_models.run_sp_bulk_get_validator_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_validator_metadata\\run_sp_bulk_get_validator_metadata.sql", "original_file_path": "macros\\streamline\\bulk_get_validator_metadata\\run_sp_bulk_get_validator_metadata.sql", "name": "run_sp_bulk_get_validator_metadata", "macro_sql": "{% macro run_sp_bulk_get_validator_metadata() %}\r\n{% set sql %}\r\ncall silver.sp_bulk_get_validator_metadata();\r\n{% endset %}\r\n\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9740722}, "macro.solana_models.sp_create_bulk_get_validator_metadata": {"unique_id": "macro.solana_models.sp_create_bulk_get_validator_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_validator_metadata\\sp_create_bulk_get_validator_metadata.sql", "original_file_path": "macros\\streamline\\bulk_get_validator_metadata\\sp_create_bulk_get_validator_metadata.sql", "name": "sp_create_bulk_get_validator_metadata", "macro_sql": "{% macro sp_create_bulk_get_validator_metadata() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_validator_metadata() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n  BEGIN\r\n    RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_validator_metadata()\r\n      );\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9750762}, "macro.solana_models.udf_bulk_get_validator_metadata": {"unique_id": "macro.solana_models.udf_bulk_get_validator_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\streamline\\bulk_get_validator_metadata\\udf_bulk_get_validator_metadata.sql", "original_file_path": "macros\\streamline\\bulk_get_validator_metadata\\udf_bulk_get_validator_metadata.sql", "name": "udf_bulk_get_validator_metadata", "macro_sql": "{% macro udf_bulk_get_validator_metadata() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_validator_metadata() returns text api_integration = aws_solana_api_dev AS {% if target.database == 'SOLANA' -%}\r\n        'https://pj4rqb8z96.execute-api.us-east-1.amazonaws.com/prod/bulk_get_validator_metadata'\r\n    {% else %}\r\n        'https://11zlwk4fm3.execute-api.us-east-1.amazonaws.com/dev/bulk_get_validator_metadata'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9750762}, "macro.solana_models.test_null_threshold": {"unique_id": "macro.solana_models.test_null_threshold", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "macros\\tests\\null_threshold.sql", "original_file_path": "macros\\tests\\null_threshold.sql", "name": "test_null_threshold", "macro_sql": "{% test null_threshold(\r\n        model,\r\n        column_name,\r\n        threshold_percent\r\n    ) %}\r\n    -- threshold_percent: decimal representing percent of values that should NOT be null\r\n    WITH t AS (\r\n        SELECT\r\n            COUNT(*) * {{ threshold_percent }} AS threshold_num\r\n        FROM\r\n            {{ model }}\r\n    ),\r\n    C AS (\r\n        SELECT\r\n            COUNT(*) AS cnt\r\n        FROM\r\n            {{ model }}\r\n        WHERE\r\n            {{ column_name }} IS NOT NULL\r\n    )\r\nSELECT\r\n    *\r\nFROM\r\n    C\r\nWHERE\r\n    C.cnt <= (\r\n        SELECT\r\n            MAX(threshold_num)\r\n        FROM\r\n            t\r\n    )\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.976069}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9912663}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9922843}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9922843}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9932733}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.994477}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.995491}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.996489}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.996489}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.996489}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.996489}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9974945}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9974945}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9974945}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9974945}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9984858}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9984858}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9994276}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9994276}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571473.9994276}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0004961}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0014858}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0014858}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.002501}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.002501}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.002501}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0044878}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0064886}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0064886}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.009762}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0117586}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0127769}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0127769}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.015755}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.015755}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0167522}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0197692}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0197692}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0207562}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0207562}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0217571}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0217571}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0246723}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0246723}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0252187}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0252187}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0252187}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0252187}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0252187}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0264997}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0264997}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0264997}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0264997}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0275784}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0285852}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0285852}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0285852}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0285852}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0305889}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0335853}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0335853}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0345042}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0345042}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0355062}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0355062}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0375936}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0375936}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0385845}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0396643}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0408547}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0408547}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0418522}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.042773}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.042773}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0438116}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0438116}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.045865}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0468628}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0468628}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.047868}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.047868}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0488124}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0488124}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0497808}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0497808}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0497808}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.051798}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.051798}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0528812}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0528812}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0528812}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0538898}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0585954}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0585954}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0595937}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0595937}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.060688}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.060688}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0616727}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0616727}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0616727}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0626733}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0626733}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0626733}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.063684}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0646756}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0655975}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0655975}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0655975}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.067592}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.067592}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0686314}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0686314}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.071591}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0735905}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0755906}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0755906}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0785909}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.079684}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.079684}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0805964}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0816941}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0828211}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.08385}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0848486}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0859423}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0873263}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0882478}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.089306}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.089306}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0903547}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0913427}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0913427}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0923378}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0943494}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0943494}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0943494}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0943494}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0953379}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.096335}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.0973372}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.099328}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1063356}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1083384}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1133409}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.116876}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.116876}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1190693}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1190693}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1200783}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1260777}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1280704}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1300673}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.132044}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.132778}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.133925}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.133925}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1349194}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1389227}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.141921}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1429276}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1429276}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1429276}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.143931}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.143931}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1449275}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1512864}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.157504}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1594946}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1594946}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1604958}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1604958}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1614983}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1614983}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1614983}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1614983}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1624913}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1624913}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1636043}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1656349}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1726987}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.177711}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1787968}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1793375}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1793375}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1793375}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1798887}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1798887}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1818902}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1824062}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1824062}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1834831}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1956098}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.1965332}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.19764}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.20464}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.20464}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.20464}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.20464}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2056522}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2066548}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2066548}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2076576}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2102408}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2124643}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2140644}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2150707}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2190685}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2210631}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2210631}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2220669}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2220669}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.223042}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.223042}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.22407}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.22407}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2251115}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2257235}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2268372}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2268372}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2278316}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2278316}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2278316}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2278316}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2288413}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2288413}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2288413}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2298324}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2298324}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2298324}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2307475}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2307475}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.231747}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2327461}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2327461}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2327461}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2337534}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2337534}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.234747}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.234747}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.234747}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2357454}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2357454}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2366683}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2366683}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2377536}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2377536}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2387514}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2387514}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2397528}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2407558}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.242212}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.243251}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.243251}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2442498}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2442498}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.245246}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.245246}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2462425}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2472515}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2472515}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2482445}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2482445}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2491956}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2501588}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2512426}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2512426}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2522414}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2532432}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2552516}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.256319}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2654607}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2695534}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2741523}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2761636}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.277147}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.277147}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2781525}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2781525}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2781525}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2791557}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2791557}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2801511}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2811463}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2811463}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2820747}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2820747}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2820747}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.283154}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.283154}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2861464}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2861464}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2875755}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2875755}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2887738}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2887738}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2897823}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2907739}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2907739}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2907739}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.292774}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.292774}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2937822}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.294782}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.294782}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2957907}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2967799}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2967799}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2967799}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.297778}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.297778}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.297778}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2986903}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2986903}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2997358}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2997358}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2997358}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.2997358}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.300781}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.300781}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3017688}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.302514}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3029552}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3029552}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3029552}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3044255}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3044255}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3044255}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3054285}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3054285}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3064182}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3064182}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3074188}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3074188}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3084173}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3093336}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3093336}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.310419}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3114116}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3114116}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.312369}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.312369}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3133717}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3133717}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3133717}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3133717}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.314414}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3153937}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3153937}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3153937}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3163342}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3163342}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3174376}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3174376}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3184144}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.318717}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.318717}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3198483}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.320829}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3228292}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3228292}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3238358}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3238358}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3238358}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3238358}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3248496}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3257866}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3257866}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3257866}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3268383}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3268383}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3268383}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3268383}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3268383}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3268383}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3277743}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3277743}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3288288}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3288288}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3288288}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3298485}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.330754}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3318222}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.333842}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.33484}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3357842}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3368418}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.337797}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3388264}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3408403}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3418381}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3438427}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.344843}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3458483}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.347836}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.347836}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3487494}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.351078}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3525333}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.354527}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.356527}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.358527}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.360523}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3615234}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3625233}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3625233}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3635237}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.365523}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3666298}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3706102}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.371614}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3726165}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.373527}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3746188}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3796222}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3816092}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3821623}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.385258}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.389268}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3912702}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.393275}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3952706}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3972561}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.3982592}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4002578}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4012644}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.40221}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.404279}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.405177}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4072635}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.408214}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.409269}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4101758}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.412265}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4152539}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.416338}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4183507}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4193609}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4213512}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4233441}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4263375}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.428457}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4298277}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4318511}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.433295}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.434385}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.436396}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.436396}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4373875}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4383962}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4393866}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4403112}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4453988}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4464047}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4473896}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.449307}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4513867}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4533901}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4543865}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4553862}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.45639}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.45639}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.45639}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.457386}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.457386}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.458386}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.458386}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.458386}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.458386}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.458386}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4593065}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4593065}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4593065}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.460976}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.460976}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.462001}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.462001}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\stage_external_sources.sql", "original_file_path": "macros\\common\\stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4700973}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4709961}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4719958}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.472492}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.472492}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\create_external_table.sql", "original_file_path": "macros\\plugins\\bigquery\\create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4789376}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4809644}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\create_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4833891}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4853885}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4937854}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4967875}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.4977753}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.500704}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5023756}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5023756}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5023756}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5053773}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5075688}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\create_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.510837}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5128405}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.51486}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "original_file_path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5210297}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.523464}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5246775}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5277023}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5286365}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\create_external_table.sql", "original_file_path": "macros\\plugins\\spark\\create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.532601}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\spark\\get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5356877}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\spark\\refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5366983}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5376804}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5387025}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\create_external_table.sql", "original_file_path": "macros\\plugins\\sqlserver\\create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5418873}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5439048}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5448852}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5448852}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5458887}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5458887}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5468879}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5468879}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5468879}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.54789}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.548692}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.548692}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.549723}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.549723}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.551722}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.551722}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.551722}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.552821}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.552821}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5543997}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5543997}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5543997}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.555411}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.555411}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5564115}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5564115}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5574107}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5574107}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5584106}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5584106}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5584106}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5594115}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5594115}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.56041}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.56041}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.56041}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.56041}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5614111}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5614111}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5614111}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5614111}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5624106}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5634112}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5634112}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5634112}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5634112}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5634112}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5644107}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5644107}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5644107}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5644107}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5644107}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.565411}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.565411}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.565411}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.565411}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.565411}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5664113}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5664113}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5664113}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5664113}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5664113}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5674112}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5684106}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5684106}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5694108}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5694108}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5694108}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5734074}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5734074}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5734074}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5764072}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5774076}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5784085}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5784085}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5784085}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.579408}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.579408}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.579408}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5804079}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5804079}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5804079}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5814083}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5814083}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5823185}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5823185}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.58334}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.58334}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.58334}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5843391}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5843391}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5843391}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.585964}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5870018}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5870018}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5880013}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5880013}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5890026}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5890026}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5890026}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5920005}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5930007}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5930007}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5940006}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.596001}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.596001}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.596001}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.597002}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5980022}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5980022}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5990026}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.5990026}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.600001}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.600001}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.601179}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.601179}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6023738}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6023738}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6023738}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6023738}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.60437}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.605383}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.605383}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6063719}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6063719}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6073737}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6093695}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6103818}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6113799}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6113799}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6133754}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6143742}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6152918}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6163354}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6173713}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6173713}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6182866}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.619385}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6203775}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6213813}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.622379}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.623369}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.624382}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6253903}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6263711}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6263711}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6303754}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6324441}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6339147}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6349294}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.635699}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.635699}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6368048}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6368048}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.637797}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6387904}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6387904}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6398036}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.640713}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.641818}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6427968}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6427968}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6437476}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6437476}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6448104}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6458025}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6458025}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6458025}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6467953}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6467953}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6477947}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6477947}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6489341}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6550202}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6560173}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6560173}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6570218}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6631434}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.665189}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.665189}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.666187}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.666187}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6692848}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6692848}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.670282}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.670282}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.670282}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.670282}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6722817}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6722817}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6722817}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.673287}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6752782}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.677278}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.677278}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.678337}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6794686}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6805208}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6815307}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6824734}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.68344}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6845417}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6865315}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6875305}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6885316}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6885316}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6894467}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6894467}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6905265}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6905265}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6905265}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6905265}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6915288}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6925194}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6937141}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6948571}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6958706}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6968644}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6987662}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6987662}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6998475}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.6998475}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7019095}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.702951}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7038834}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7038834}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7049448}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7069466}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.70795}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.70916}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.71135}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7162726}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7183437}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7213688}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7213688}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.722347}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7232945}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7232945}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7244892}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\solana-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1662571474.7244892}}, "docs": {"solana_models.amount": {"unique_id": "solana_models.amount", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\amount.md", "original_file_path": "models\\descriptions\\amount.md", "name": "amount", "block_contents": "The number of tokens sent during an event"}, "solana_models.blockchain": {"unique_id": "solana_models.blockchain", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\blockchain.md", "original_file_path": "models\\descriptions\\blockchain.md", "name": "blockchain", "block_contents": "In this table, always Solana. Used to join to cross-chain tables."}, "solana_models.block_id": {"unique_id": "solana_models.block_id", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\block_id.md", "original_file_path": "models\\descriptions\\block_id.md", "name": "block_id", "block_contents": "Slot for which a block can be created."}, "solana_models.block_timestamp": {"unique_id": "solana_models.block_timestamp", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\block_timestamp.md", "original_file_path": "models\\descriptions\\block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time at which the block began."}, "solana_models.contract_address": {"unique_id": "solana_models.contract_address", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\contract_address.md", "original_file_path": "models\\descriptions\\contract_address.md", "name": "contract_address", "block_contents": "Address unique to an NFT series"}, "solana_models.contract_name": {"unique_id": "solana_models.contract_name", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\contract_name.md", "original_file_path": "models\\descriptions\\contract_name.md", "name": "contract_name", "block_contents": "Name of the contract that identifies an NFT series. Example - tcgdragons"}, "solana_models.created_at_timestamp": {"unique_id": "solana_models.created_at_timestamp", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\created_at_timestamp.md", "original_file_path": "models\\descriptions\\created_at_timestamp.md", "name": "created_at_timestamp", "block_contents": "timestamp in UTC that the NFT was minted at"}, "solana_models.creator_address": {"unique_id": "solana_models.creator_address", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\creator_address.md", "original_file_path": "models\\descriptions\\creator_address.md", "name": "creator_address", "block_contents": "address provided by the creator of the project where mint payments and secondary market royalties are sent"}, "solana_models.creator_name": {"unique_id": "solana_models.creator_name", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\creator_name.md", "original_file_path": "models\\descriptions\\creator_name.md", "name": "creator_name", "block_contents": "name of the project creator - this can be an individual or a company name"}, "solana_models.event_index": {"unique_id": "solana_models.event_index", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\event_index.md", "original_file_path": "models\\descriptions\\event_index.md", "name": "event_index", "block_contents": "Location of the event within the instructions of a transaction"}, "solana_models.event_type": {"unique_id": "solana_models.event_type", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\event_type.md", "original_file_path": "models\\descriptions\\event_type.md", "name": "event_type", "block_contents": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring"}, "solana_models.gov_action_action": {"unique_id": "solana_models.gov_action_action", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_action.md", "original_file_path": "models\\descriptions\\gov_action_action.md", "name": "gov_action_action", "block_contents": "NFT mint associated with the action"}, "solana_models.gov_action_amount": {"unique_id": "solana_models.gov_action_amount", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_amount.md", "original_file_path": "models\\descriptions\\gov_action_amount.md", "name": "gov_action_amount", "block_contents": "Amount being locked or exited"}, "solana_models.gov_action_escrow_account": {"unique_id": "solana_models.gov_action_escrow_account", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_escrow_account.md", "original_file_path": "models\\descriptions\\gov_action_escrow_account.md", "name": "gov_action_escrow_account", "block_contents": "Account owner of the locker account for governance"}, "solana_models.gov_action_locker_account": {"unique_id": "solana_models.gov_action_locker_account", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_locker_account.md", "original_file_path": "models\\descriptions\\gov_action_locker_account.md", "name": "gov_action_locker_account", "block_contents": "Account holding tokens for governance"}, "solana_models.gov_action_locker_nft": {"unique_id": "solana_models.gov_action_locker_nft", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_locker_nft.md", "original_file_path": "models\\descriptions\\gov_action_locker_nft.md", "name": "gov_action_locker_nft", "block_contents": "NFT representing tokens for governance.  This is only available for certain types of governance."}, "solana_models.gov_action_mint": {"unique_id": "solana_models.gov_action_mint", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_mint.md", "original_file_path": "models\\descriptions\\gov_action_mint.md", "name": "gov_action_mint", "block_contents": "Mint being locked or exited"}, "solana_models.gov_action_signer": {"unique_id": "solana_models.gov_action_signer", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\gov_action_signer.md", "original_file_path": "models\\descriptions\\gov_action_signer.md", "name": "gov_action_signer", "block_contents": "Address initiating the action"}, "solana_models.image_url": {"unique_id": "solana_models.image_url", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\image_url.md", "original_file_path": "models\\descriptions\\image_url.md", "name": "image_url", "block_contents": "URL that links to the image on the ipfs service"}, "solana_models.index": {"unique_id": "solana_models.index", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\index.md", "original_file_path": "models\\descriptions\\index.md", "name": "index", "block_contents": "A unique key that identifies the event's position within a transaction"}, "solana_models.ingested_at": {"unique_id": "solana_models.ingested_at", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\ingested_at.md", "original_file_path": "models\\descriptions\\ingested_at.md", "name": "ingested_at", "block_contents": "Time the record was ingested by the source"}, "solana_models.inner_instruction": {"unique_id": "solana_models.inner_instruction", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\inner_instruction.md", "original_file_path": "models\\descriptions\\inner_instruction.md", "name": "inner_instruction", "block_contents": "A call from one smart contract program to another"}, "solana_models.instruction": {"unique_id": "solana_models.instruction", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\instruction.md", "original_file_path": "models\\descriptions\\instruction.md", "name": "instruction", "block_contents": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program"}, "solana_models.mint": {"unique_id": "solana_models.mint", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\mint.md", "original_file_path": "models\\descriptions\\mint.md", "name": "mint", "block_contents": "Unique address representing a specific token"}, "solana_models.mint_currency": {"unique_id": "solana_models.mint_currency", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\mint_currency.md", "original_file_path": "models\\descriptions\\mint_currency.md", "name": "mint_currency", "block_contents": "Currency used to pay for the NFT mint."}, "solana_models.mint_price": {"unique_id": "solana_models.mint_price", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\mint_price.md", "original_file_path": "models\\descriptions\\mint_price.md", "name": "mint_price", "block_contents": "Price that it cost to mint the NFT in SOL or other currency."}, "solana_models.program_id": {"unique_id": "solana_models.program_id", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\program_id.md", "original_file_path": "models\\descriptions\\program_id.md", "name": "program_id", "block_contents": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale."}, "solana_models.project_name": {"unique_id": "solana_models.project_name", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\project_name.md", "original_file_path": "models\\descriptions\\project_name.md", "name": "project_name", "block_contents": "Name of the project the NFT token belongs to"}, "solana_models.purchaser": {"unique_id": "solana_models.purchaser", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\purchaser.md", "original_file_path": "models\\descriptions\\purchaser.md", "name": "purchaser", "block_contents": "The wallet address that purchased the NFT"}, "solana_models.sales_amount": {"unique_id": "solana_models.sales_amount", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\sales_amount.md", "original_file_path": "models\\descriptions\\sales_amount.md", "name": "sales_amount", "block_contents": "The amount of Solana the NFT was purchased for"}, "solana_models.seller": {"unique_id": "solana_models.seller", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\seller.md", "original_file_path": "models\\descriptions\\seller.md", "name": "seller", "block_contents": "The wallet address that sold the NFT"}, "solana_models.token_id": {"unique_id": "solana_models.token_id", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\token_id.md", "original_file_path": "models\\descriptions\\token_id.md", "name": "token_id", "block_contents": "Numeric value that identifies the NFT within it's series"}, "solana_models.token_metadata": {"unique_id": "solana_models.token_metadata", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\token_metadata.md", "original_file_path": "models\\descriptions\\token_metadata.md", "name": "token_metadata", "block_contents": "a block of json that describes the traits of an NFT"}, "solana_models.token_metadata_uri": {"unique_id": "solana_models.token_metadata_uri", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\token_metadata_uri.md", "original_file_path": "models\\descriptions\\token_metadata_uri.md", "name": "token_metadata_uri", "block_contents": "URL that links to the token metadata on the ipfs service"}, "solana_models.token_name": {"unique_id": "solana_models.token_name", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\token_name.md", "original_file_path": "models\\descriptions\\token_name.md", "name": "token_name", "block_contents": "Name of the NFT token - this is unique to token. Example SMB #284"}, "solana_models.tribeca_gauge": {"unique_id": "solana_models.tribeca_gauge", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tribeca_gauge.md", "original_file_path": "models\\descriptions\\tribeca_gauge.md", "name": "tribeca_gauge", "block_contents": "Address that determines the rewards share to give to a liquidity pool, or in the case of Marinade, the amount of SOL that should be delegated to a given validator"}, "solana_models.tribeca_gaugemeister": {"unique_id": "solana_models.tribeca_gaugemeister", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tribeca_gaugemeister.md", "original_file_path": "models\\descriptions\\tribeca_gaugemeister.md", "name": "tribeca_gaugemeister", "block_contents": "Address that manages the rewards shares of all gauges"}, "solana_models.tribeca_gauge_delegated_shares": {"unique_id": "solana_models.tribeca_gauge_delegated_shares", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tribeca_gauge_delegated_shares.md", "original_file_path": "models\\descriptions\\tribeca_gauge_delegated_shares.md", "name": "tribeca_gauge_delegated_shares", "block_contents": "Number of shares delegated to vote for this gauge"}, "solana_models.tribeca_gauge_power": {"unique_id": "solana_models.tribeca_gauge_power", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tribeca_gauge_power.md", "original_file_path": "models\\descriptions\\tribeca_gauge_power.md", "name": "tribeca_gauge_power", "block_contents": "Total voting power of the voter.  This is only available for certain types of gauge votes."}, "solana_models.tribeca_gauge_validator_account": {"unique_id": "solana_models.tribeca_gauge_validator_account", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tribeca_gauge_validator_account.md", "original_file_path": "models\\descriptions\\tribeca_gauge_validator_account.md", "name": "tribeca_gauge_validator_account", "block_contents": "Validator vote key linked to a gauge"}, "solana_models.tribeca_gauge_voter": {"unique_id": "solana_models.tribeca_gauge_voter", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tribeca_gauge_voter.md", "original_file_path": "models\\descriptions\\tribeca_gauge_voter.md", "name": "tribeca_gauge_voter", "block_contents": "Address performing the vote"}, "solana_models.tx_from": {"unique_id": "solana_models.tx_from", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tx_from.md", "original_file_path": "models\\descriptions\\tx_from.md", "name": "tx_from", "block_contents": "The wallet address that initiated an event"}, "solana_models.tx_id": {"unique_id": "solana_models.tx_id", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tx_id.md", "original_file_path": "models\\descriptions\\tx_id.md", "name": "tx_id", "block_contents": "A unique key that identifies a transaction"}, "solana_models.tx_succeeded": {"unique_id": "solana_models.tx_succeeded", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tx_succeeded.md", "original_file_path": "models\\descriptions\\tx_succeeded.md", "name": "tx_succeeded", "block_contents": "True when a transaction is successful, otherwise false."}, "solana_models.tx_to": {"unique_id": "solana_models.tx_to", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\tx_to.md", "original_file_path": "models\\descriptions\\tx_to.md", "name": "tx_to", "block_contents": "The wallet address that receives tokens in an event"}, "solana_models._inserted_timestamp": {"unique_id": "solana_models._inserted_timestamp", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "descriptions\\_inserted_timestamp.md", "original_file_path": "models\\descriptions\\_inserted_timestamp.md", "name": "_inserted_timestamp", "block_contents": "Time the record was inserted into snowflake"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"test.solana_models.not_null_silver__nft_metadata_MINT.41b4833385": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_MINT.41b4833385", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_MINT.sql", "original_file_path": "models\\silver\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_MINT", "alias": "nft_metadata_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662571476.7119994, "config_call_dict": {"enabled": false}, "column_name": "MINT", "file_key_name": "models.silver__nft_metadata"}, {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_metadata_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_MINT.41b4833385", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_metadata_MINT.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_MINT", "alias": "nft_metadata_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662575623.2043576, "config_call_dict": {"enabled": false}, "column_name": "MINT", "file_key_name": "models.silver__nft_metadata"}], "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_CURRENCY", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_MINT_CURRENCY"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_MINT_CURRENCY.sql", "original_file_path": "models\\silver\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_CURRENCY", "alias": "nft_mints_MINT_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662571476.743243, "config_call_dict": {"enabled": false}, "column_name": "MINT_CURRENCY", "file_key_name": "models.silver__nft_mints"}, {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_CURRENCY", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_MINT_CURRENCY"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_MINT_CURRENCY.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_CURRENCY", "alias": "nft_mints_MINT_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662575623.1449244, "config_call_dict": {"enabled": false}, "column_name": "MINT_CURRENCY", "file_key_name": "models.silver__nft_mints"}], "test.solana_models.not_null_silver__nft_mints_MINT_PRICE.20bf796410": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_MINT_PRICE"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT_PRICE.20bf796410", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_MINT_PRICE.sql", "original_file_path": "models\\silver\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_PRICE", "alias": "nft_mints_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662571476.7452424, "config_call_dict": {"enabled": false}, "column_name": "MINT_PRICE", "file_key_name": "models.silver__nft_mints"}, {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "nfts", "not_null_silver__nft_mints_MINT_PRICE"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT_PRICE.20bf796410", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__nft_mints_MINT_PRICE.sql", "original_file_path": "models\\silver\\nfts\\silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_PRICE", "alias": "nft_mints_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662575623.1477017, "config_call_dict": {"enabled": false}, "column_name": "MINT_PRICE", "file_key_name": "models.silver__nft_mints"}], "test.solana_models.not_null_silver__votes_VOTE_AUTHORITY.7098d587fc": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_AUTHORITY", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_VOTE_AUTHORITY"], "unique_id": "test.solana_models.not_null_silver__votes_VOTE_AUTHORITY.7098d587fc", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__votes_VOTE_AUTHORITY.sql", "original_file_path": "models\\silver\\silver__votes.yml", "name": "not_null_silver__votes_VOTE_AUTHORITY", "alias": "votes_VOTE_AUTHORITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662571477.3531537, "config_call_dict": {"enabled": false}, "column_name": "VOTE_AUTHORITY", "file_key_name": "models.silver__votes"}], "test.solana_models.not_null_silver___prices_TOTAL_SUPPLY.9ae9b61c8e": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_TOTAL_SUPPLY"], "unique_id": "test.solana_models.not_null_silver___prices_TOTAL_SUPPLY.9ae9b61c8e", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___prices_TOTAL_SUPPLY.sql", "original_file_path": "models\\silver\\silver___prices.yml", "name": "not_null_silver___prices_TOTAL_SUPPLY", "alias": "_prices_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662571477.600181, "config_call_dict": {"enabled": false}, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.silver___prices"}], "test.solana_models.not_null_silver___prices_VOLUME_24H.4ad6d23f34": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOLUME_24H", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_VOLUME_24H"], "unique_id": "test.solana_models.not_null_silver___prices_VOLUME_24H.4ad6d23f34", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver___prices_VOLUME_24H.sql", "original_file_path": "models\\silver\\silver___prices.yml", "name": "not_null_silver___prices_VOLUME_24H", "alias": "_prices_VOLUME_24H", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662571477.602709, "config_call_dict": {"enabled": false}, "column_name": "VOLUME_24H", "file_key_name": "models.silver___prices"}], "test.solana_models.not_null_silver__blocks2_BLOCK_HEIGHT.092f6ffe3f": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks2')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA_DEV", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks2_BLOCK_HEIGHT"], "unique_id": "test.solana_models.not_null_silver__blocks2_BLOCK_HEIGHT.092f6ffe3f", "package_name": "solana_models", "root_path": "C:\\Users\\jessi\\git\\solana-models", "path": "not_null_silver__blocks2_BLOCK_HEIGHT.sql", "original_file_path": "models\\silver\\silver__blocks2.yml", "name": "not_null_silver__blocks2_BLOCK_HEIGHT", "alias": "blocks2_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks2"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1662575622.946579, "config_call_dict": {"enabled": false}, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks2"}]}, "parent_map": {"model.solana_models.bronze__blocks": ["source.solana_models.prod.solana_blocks"], "model.solana_models.bronze__transactions": ["source.solana_models.prod.solana_txs"], "model.solana_models.core__ez_staking_lp_actions": ["model.solana_models.core__dim_labels", "model.solana_models.silver___historical_staking_lp_actions", "model.solana_models.silver__staking_lp_actions", "source.solana_models.solana_external.validator_metadata_api"], "model.solana_models.silver__blocks": ["model.solana_models.bronze__blocks"], "model.solana_models.silver__decoded_instructions_data": ["source.solana_models.solana_external.decoded_instructions_data_api"], "model.solana_models.silver__events": ["model.solana_models.silver___inner_instructions", "model.solana_models.silver___instructions"], "model.solana_models.silver__staking_lp_actions": ["model.solana_models.silver___inner_instructions", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__transactions": ["model.solana_models.bronze__transactions"], "model.solana_models.silver__transfers": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__votes": ["model.solana_models.bronze__transactions"], "model.solana_models.silver__votes_agg_block": ["model.solana_models.silver__transactions", "model.solana_models.silver__votes"], "model.solana_models.silver___all_undecoded_instructions_data": ["model.solana_models.silver__events", "model.solana_models.silver__events", "source.solana_models.solana_external.decoded_instructions_data_api"], "model.solana_models.silver___all_unknown_stake_vote_accounts": ["model.solana_models.core__ez_staking_lp_actions", "model.solana_models.core__ez_staking_lp_actions", "source.solana_models.solana_external.stake_account_tx_ids_api", "source.solana_models.solana_external.validator_metadata_api"], "model.solana_models.silver___all_unknown_tx_details": ["source.solana_models.solana_external.stake_account_tx_ids_api", "source.solana_models.solana_external.txs_api"], "model.solana_models.silver___historical_staking_lp_actions": ["source.solana_models.solana_external.txs_api", "source.solana_models.solana_external.txs_api", "source.solana_models.solana_external.txs_api"], "model.solana_models.silver___inner_instructions": ["model.solana_models.silver__transactions"], "model.solana_models.silver___instructions": ["model.solana_models.silver__transactions"], "model.solana_models.silver___post_token_balances": ["model.solana_models.silver__transactions"], "model.solana_models.silver___pre_token_balances": ["model.solana_models.silver__transactions"], "model.solana_models.silver___prices": ["source.solana_models.shared.prices_v2"], "model.solana_models.solana_share__dim_labels": ["model.solana_models.core__dim_labels"], "model.solana_models.solana_share__ez_staking_lp_actions": ["model.solana_models.core__ez_staking_lp_actions"], "model.solana_models.solana_share__fact_blocks": ["model.solana_models.core__fact_blocks"], "model.solana_models.solana_share__fact_events": ["model.solana_models.core__fact_events"], "model.solana_models.solana_share__fact_staking_lp_actions": ["model.solana_models.core__fact_staking_lp_actions"], "model.solana_models.solana_share__fact_transactions": ["model.solana_models.core__fact_transactions"], "model.solana_models.solana_share__fact_transfers": ["model.solana_models.core__fact_transfers"], "model.solana_models.solana_share__fact_votes_agg_block": ["model.solana_models.core__fact_votes_agg_block"], "model.solana_models.streamline__all_unknown_blocks_historical": ["model.solana_models.streamline__complete_blocks"], "model.solana_models.streamline__all_unknown_blocks_real_time": ["model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_blocks"], "model.solana_models.streamline__all_unknown_block_rewards_historical": ["model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards"], "model.solana_models.streamline__all_unknown_block_rewards_real_time": ["model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards", "model.solana_models.streamline__complete_block_rewards"], "model.solana_models.streamline__all_unknown_block_txs_historical": ["model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs"], "model.solana_models.streamline__all_unknown_block_txs_real_time": ["model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs", "model.solana_models.streamline__complete_block_txs"], "model.solana_models.streamline__complete_blocks": ["source.solana_models.solana_external.blocks_api", "source.solana_models.solana_external.blocks_api"], "model.solana_models.streamline__complete_block_rewards": ["source.solana_models.solana_external.block_rewards_api"], "model.solana_models.streamline__complete_block_txs": ["source.solana_models.solana_external.block_txs_api"], "test.solana_models.test_silver__blocks__block_hash-assert-no-gaps": ["model.solana_models.silver__blocks"], "test.solana_models.test_silver__transactions__block_id-assert-no-gaps": ["model.solana_models.silver__blocks", "model.solana_models.silver__transactions", "model.solana_models.silver__votes"], "operation.solana_models.solana_models-on-run-start-0": [], "operation.solana_models.solana_models-on-run-start-1": [], "operation.solana_models.solana_models-on-run-start-2": [], "operation.solana_models.solana_models-on-run-start-3": [], "operation.solana_models.solana_models-on-run-start-4": [], "operation.solana_models.solana_models-on-run-start-5": [], "operation.solana_models.solana_models-on-run-start-6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP.8e9cefa953": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID.89b6d6552d": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID.9d42019d95": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX.ba6651aba1": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED.7aef76b713": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE.b67e8cf6eb": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS.5edbe73369": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY.243622350c": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT.9d236e667f": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE.be14980ebe": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE.8ec3223bae": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT.ad8dfe8b7c": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY.44f420bb81": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK.43a29632b7": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION.aabf523728": ["model.solana_models.core__ez_staking_lp_actions"], "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.solana_models.silver__blocks"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": ["model.solana_models.silver__blocks"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__decoded_instructions_data_TX_ID.0d023c1b85": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.not_null_silver__decoded_instructions_data_EVENT_INDEX.d3bf02c7f1": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.not_null_silver__decoded_instructions_data_PROGRAM_ID.64985194e2": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.abc0ebff70": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.not_null_silver__decoded_instructions_data_DATA.904e098152": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.625e5704ff": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX.3c25f52606": ["model.solana_models.silver__decoded_instructions_data"], "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75": ["model.solana_models.silver__events"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_SUCCEEDED.14f8e6ee9d": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_INDEX.9a860b1d59": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events__INSERTED_TIMESTAMP.7505ba4015": ["model.solana_models.silver__events"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.413356b53a": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.solana_models.silver__transactions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339": ["model.solana_models.silver__transactions"], "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": ["model.solana_models.silver__transactions"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.solana_models.silver__transfers"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_INDEX.d7de164538": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": ["model.solana_models.silver__transfers"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936": ["model.solana_models.silver__votes"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_TX_ID.e428472813": ["model.solana_models.silver__votes"], "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes__INSERTED_TIMESTAMP.741e592bd1": ["model.solana_models.silver__votes"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.not_null_silver___historical_staking_lp_actions_BLOCK_ID.fbefcaf8d2": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.not_null_silver___historical_staking_lp_actions_TX_ID.5a59286ba2": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.not_null_silver___historical_staking_lp_actions_INDEX.9f9d298a76": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.not_null_silver___historical_staking_lp_actions_SUCCEEDED.f3d5339ed0": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.not_null_silver___historical_staking_lp_actions_PROGRAM_ID.ffcc8836da": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.not_null_silver___historical_staking_lp_actions_INSTRUCTION.e152e4f7bc": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX.4df18388e4": ["model.solana_models.silver___historical_staking_lp_actions"], "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e": ["model.solana_models.silver___inner_instructions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions__INSERTED_TIMESTAMP.cfe9e2c6cf": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d": ["model.solana_models.silver___instructions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_SUCCEEDED.a2f8a7a3ae": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions__INSERTED_TIMESTAMP.c55b5e3da3": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d": ["model.solana_models.silver___post_token_balances"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances__INSERTED_TIMESTAMP.743b56887f": ["model.solana_models.silver___post_token_balances"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.18c805b0ff": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver___prices_PRICE.538411960a": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3": ["model.solana_models.silver___prices"], "test.solana_models.not_null_streamline__complete_blocks_BLOCK_ID.b5cf662eab": ["model.solana_models.streamline__complete_blocks"], "test.solana_models.not_null_streamline__complete_blocks__INSERTED_DATE.425fede01f": ["model.solana_models.streamline__complete_blocks"], "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID.1ba4c0ccdc": ["model.solana_models.streamline__complete_blocks"], "test.solana_models.not_null_streamline__complete_block_rewards_BLOCK_ID.7ed53b986d": ["model.solana_models.streamline__complete_block_rewards"], "test.solana_models.not_null_streamline__complete_block_rewards__PARTITION_ID.7e887fbe6e": ["model.solana_models.streamline__complete_block_rewards"], "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID.2d196b4953": ["model.solana_models.streamline__complete_block_rewards"], "test.solana_models.not_null_streamline__complete_block_txs_BLOCK_ID.b2ca3dc9e6": ["model.solana_models.streamline__complete_block_txs"], "test.solana_models.not_null_streamline__complete_block_txs__PARTITION_ID.a35fe6b303": ["model.solana_models.streamline__complete_block_txs"], "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID.3802e1f2d9": ["model.solana_models.streamline__complete_block_txs"], "model.solana_models.silver__nft_mints": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__nft_mints_tmp"], "model.solana_models.silver__gauges_votes_saber": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__transactions2": ["model.solana_models.bronze__transactions2", "model.solana_models.silver__blocks2"], "model.solana_models.silver__gauges_votes_marinade": ["model.solana_models.silver__decoded_instructions_data", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__proposal_votes_marinade": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_magic_eden_v1": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_solanart": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__gauges_creates_marinade": ["model.solana_models.silver__decoded_instructions_data", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__proposal_votes_realms": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "source.solana_models.crosschain.address_labels"], "model.solana_models.silver__gov_actions_marinade": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_mints_tmp": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__transfers"], "model.solana_models.silver__gov_actions_saber": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_magic_eden_v2": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__swaps_saber_dex": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_metadata": ["source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827"], "model.solana_models.silver__swaps_orca_dex": ["model.solana_models.silver___instructions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_solport": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__gov_actions_marinade_tmp": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.bronze__blocks2": ["source.solana_models.solana_external.blocks_api"], "model.solana_models.silver__proposal_creation_realms": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "source.solana_models.crosschain.address_labels"], "model.solana_models.silver__swaps_raydium_dex": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_bids_yawww": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__swaps_jupiter_dex": ["model.solana_models.silver___instructions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_opensea": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_smb": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__blocks2": ["model.solana_models.bronze__blocks2", "model.solana_models.bronze__blocks2"], "model.solana_models.silver__nft_sales_yawww": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__nft_bids_yawww", "model.solana_models.silver__transactions"], "model.solana_models.solana_share__fact_nft_sales": ["model.solana_models.core__fact_nft_sales"], "model.solana_models.solana_share__dim_nft_metadata": ["model.solana_models.core__dim_nft_metadata"], "model.solana_models.solana_share__fact_nft_mints": ["model.solana_models.core__fact_nft_mints"], "model.solana_models.solana_share__fact_gauges_votes": ["model.solana_models.core__fact_gauges_votes"], "model.solana_models.solana_share__fact_swaps": ["model.solana_models.core__fact_swaps"], "model.solana_models.solana_share__fact_proposal_votes": ["model.solana_models.core__fact_proposal_votes"], "model.solana_models.core__fact_proposal_creation": ["model.solana_models.silver__proposal_creation_realms"], "model.solana_models.solana_share__fact_gov_actions": ["model.solana_models.core__fact_gov_actions"], "model.solana_models.solana_share__fact_gauges_creates": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.79c65c21c1": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.4ec41b30bd": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3.7de993f66d": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_ID.93eddb7cca": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_TX_ID.c543ca264b": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED.7cd7a32618": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_PROGRAM_ID.251c1182a5": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_PURCHASER.1373f0dad2": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_MINT_CURRENCY.49faeb06ef": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_MINT.404b1612e5": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_MINT_PRICE.7fdc3b7df1": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp_INGESTED_AT.566cc3cbdd": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.aac460b351": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY.77b1adc497": ["model.solana_models.silver__nft_mints_tmp"], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_SELLER.ecc06c8686": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.7a007575a1": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SELLER.102d39d9f7": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.5fe9a32b3a": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.85a960973a": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.3c1c88424c": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__transactions2_BLOCK_TIMESTAMP.1260483cfb": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2_BLOCK_ID.331c02cf61": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2_RECENT_BLOCK_HASH.c2f764c258": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2_TX_ID.d2b387ef86": ["model.solana_models.silver__transactions2"], "test.solana_models.null_threshold_silver__transactions2_FEE__0_99.e15c21b151": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2_FEE.e974692c87": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2_SUCCEEDED.535abe8018": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2_ACCOUNT_KEYS.add83fddb9": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__transactions2__INSERTED_TIMESTAMP.104a002c55": ["model.solana_models.silver__transactions2"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID.8e06686cba": ["model.solana_models.silver__transactions2"], "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.73635d54bc": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_ID.4179d75cc4": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_TX_ID.f400687b92": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_SUCCEEDED.95f0be96de": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_SIGNER.98e89e2d0b": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGE.cfc7f756b7": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGEMEISTER.ed4b5d8c4d": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.6f35428b8b": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.40fbd696a6": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX.386c43511b": ["model.solana_models.silver__gauges_creates_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.bb22dfbbe8": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2.605b04d87d": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_ID.f0cfc232c7": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_TX_ID.8d6976c3ef": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_SUCCEEDED.832007203b": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER.2d4a3e4541": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER_NFT.7dd18f071d": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_GAUGE.715793551e": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.bf9e028fad": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.b715e87e8a": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE.c078bd8801": ["model.solana_models.silver__gauges_votes_marinade"], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.651303cb9e": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_SELLER.28a7c2d0f9": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.60da42023e": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.7f4fb1df77": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_ID.dc4c5b7cec": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_TX_ID.bdbe3e6473": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_SUCCEEDED.c699ebcd91": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER.3cadae8696": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_NFT.4e7b99e8f3": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.0bfe7a95f4": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade_PROPOSAL.df80e9426f": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.aa308c1b21": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL.cd45ca087d": ["model.solana_models.silver__proposal_votes_marinade"], "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.e71af9ab43": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2.c9762e9bdf": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_ID.2caa773a25": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_TX_ID.c5ba3432cb": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_SUCCEEDED.31a296fb81": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_PROGRAM_ID.88c3057bb1": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_PURCHASER.81d8b51f25": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_SELLER.d0749d4bee": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_MINT.e1669a6bae": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_SALES_AMOUNT.7bf01bc93a": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea_INGESTED_AT.fafe37ae35": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.06c60c6c37": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT.f66dcb74ec": ["model.solana_models.silver__nft_sales_opensea"], "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.7882aa9704": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2.a84b7c01df": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_ID.9749097c5b": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww_TX_ID.6ef944c5f0": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww_SUCCEEDED.673964be11": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww_BIDDER.9dd9d8dff8": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww_ACCT_2.c4062e4e6f": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww_BID_AMOUNT.9b0ba7707e": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.779932a52b": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID.2c013394c9": ["model.solana_models.silver__nft_bids_yawww"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SELLER.95475fb609": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.868714bef2": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER.85066a3a10": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__blocks2_BLOCK_ID.1b57625e49": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2_BLOCK_TIMESTAMP.d27eb04036": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2_NETWORK.fecf39aef5": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2_CHAIN_ID.665f1e1503": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2_BLOCK_HASH.cd38b2ffa4": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_ID.3f8f35b7af": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.ae3035b946": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__blocks2__INSERTED_DATE.d069b97c64": ["model.solana_models.silver__blocks2"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID.600f932e22": ["model.solana_models.silver__blocks2"], "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.8e473b0a82": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5.f018e56096": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_ID.9af4ef943d": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_TX_ID.1ac6e10e4b": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_SUCCEEDED.5bdc0fd83d": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_INDEX.163253349a": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_PROGRAM_ID.9e5b4c6744": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_REALMS_ID.0c95daf7ed": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL.d1899e0b24": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.a475a6e153": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_NAME.55dbd6390f": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_TYPE.34d2959fd9": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_OPTIONS.fdfc6d924f": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.5dd86e0cc4": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID.f2872abdee": ["model.solana_models.silver__proposal_creation_realms"], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_SELLER.7aef62f7e9": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.5d64f74072": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.0e1373a9ce": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7.4042f35d74": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_ID.e57b17e737": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_TX_ID.b1d3dcd5b7": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_SUCCEEDED.cec72b1c03": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_SIGNER.4d64f40393": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.a93b78adaa": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.ee8c4796e0": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_MINT.bd58c5033d": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_ACTION.361f79ef61": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber_AMOUNT.c10703a914": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.c01fa19e41": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID.ce7ee21c9c": ["model.solana_models.silver__gov_actions_saber"], "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": ["model.solana_models.silver__nft_mints"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884": ["model.solana_models.silver__nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints__INSERTED_TIMESTAMP.d96edc2cdd": ["model.solana_models.silver__nft_mints"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY.83f9ea3f73": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.6ae077e628": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2.fb87b0a75b": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_ID.2be229f6f0": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_TX_ID.f58a7640de": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_SUCCEEDED.0773c5f9cc": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_VOTER.0aac8d5a72": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_GAUGE.240b87f396": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_DELEGATED_SHARES.876c99a9bf": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber_POWER.af1e6ac76c": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.9aeaff1542": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE.15f3bd1b81": ["model.solana_models.silver__gauges_votes_saber"], "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32": ["model.solana_models.silver__nft_metadata"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.d0fd8b375a": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2.44a6e38196": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_ID.a72b05cd24": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_TX_ID.647bce8bf6": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_SUCCEEDED.013f9c87b3": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_SIGNER.57c76b61ad": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.ac4186ba90": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_NFT.9b22305c25": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_MINT.2d5ed39add": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_ACTION.4a1d219ecf": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade_AMOUNT.918ce76ba6": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.b35d82c58e": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID.67d5c4a9e0": ["model.solana_models.silver__gov_actions_marinade"], "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.ce316551dc": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2.b84f880b5e": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_ID.b1d9cb82b9": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_TX_ID.3bd06898da": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_SUCCEEDED.0376a2a567": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_INDEX.37808c3dba": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_PROGRAM_ID.2f23de7b25": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_REALMS_ID.3f90a0192f": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_PROPOSAL.390b7e392d": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_VOTER.8f724dd0ad": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.252a5b67e2": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_CHOICE.4b3d288d88": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_RANK.86e66d9abd": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_WEIGHT.62c96157a7": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.6a87726450": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX.b92bd7c953": ["model.solana_models.silver__proposal_votes_realms"], "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.b165dfae86": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2.c609719af8": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_ID.b53822b948": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_TX_ID.cc4d7cec95": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_SUCCEEDED.1c07002f13": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_PROGRAM_ID.bac5a43cf3": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_PURCHASER.ef8aa381b0": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_SELLER.b4c48c28e0": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_MINT.b541ddfd92": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_SALES_AMOUNT.209049c03c": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww_SALE_TYPE.c14db0d483": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.8f71fb543a": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID.836d894e8e": ["model.solana_models.silver__nft_sales_yawww"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM.1c6148c1a5": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP.cb79e567af": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID.3c74143fd3": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID.a424efa5bc": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED.c500624a66": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME.0cecc44709": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID.d6f7ce594c": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL.aca94a352b": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER.8336328856": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME.c028b3f7e8": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE.54b95b9487": ["model.solana_models.core__fact_proposal_creation"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS.7df8cc23d3": ["model.solana_models.core__fact_proposal_creation"], "model.solana_models.bronze__transactions2": ["source.solana_models.solana_external.block_txs_api"], "model.solana_models.core__fact_votes_agg_block": ["model.solana_models.silver__votes_agg_block"], "model.solana_models.core__fact_staking_lp_actions": ["model.solana_models.silver__staking_lp_actions"], "model.solana_models.core__fact_proposal_votes": ["model.solana_models.silver__proposal_votes_marinade", "model.solana_models.silver__proposal_votes_realms"], "model.solana_models.core__fact_blocks": ["model.solana_models.silver__blocks"], "model.solana_models.core__fact_nft_sales": ["model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_opensea", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__nft_sales_yawww"], "model.solana_models.core__fact_gauges_creates": ["model.solana_models.silver__gauges_creates_marinade"], "model.solana_models.core__dim_labels": ["source.solana_models.crosschain.address_labels"], "model.solana_models.core__fact_nft_mints": ["model.solana_models.silver__nft_mints"], "model.solana_models.core__dim_nft_metadata": ["model.solana_models.silver__nft_metadata"], "model.solana_models.core__fact_gauges_votes": ["model.solana_models.silver__gauges_votes_marinade", "model.solana_models.silver__gauges_votes_saber"], "model.solana_models.core__fact_events": ["model.solana_models.silver__events"], "model.solana_models.core__fact_transfers": ["model.solana_models.silver__transfers"], "model.solana_models.core__fact_swaps": ["model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex"], "model.solana_models.core__fact_transactions": ["model.solana_models.silver__transactions"], "model.solana_models.core__fact_gov_actions": ["model.solana_models.silver__gov_actions_marinade", "model.solana_models.silver__gov_actions_saber"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf": ["model.solana_models.core__fact_votes_agg_block"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01": ["model.solana_models.core__fact_votes_agg_block"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22": ["model.solana_models.core__fact_votes_agg_block"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM.2cb8a6da8c": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME.efb5564020": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP.14fda90e1f": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID.69f6c939cd": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID.61c6807300": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED.a8a02b1128": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER.b4aedc2103": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT.074485b34b": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT.b4094d7e9b": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL.bd26e9f162": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID.3d82f13fb8": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE.89d479b8f1": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK.ace5c19a48": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT.42dffdb7a0": ["model.solana_models.core__fact_proposal_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER.4e646f66c0": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME.4cbc2d8fab": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP.e10bb18371": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID.b790453a41": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID.c646678622": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED.0912c5b5e1": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER.eb41a65847": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE.3505020721": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER.021b1a23cd": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT.27233d80a9": ["model.solana_models.core__fact_gauges_creates"], "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.solana_models.core__dim_labels"], "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.solana_models.core__dim_labels"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT.81c4874581": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED.559da89930": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT.50baab0134": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f": ["model.solana_models.core__fact_gov_actions"], "source.solana_models.prod.solana_blocks": [], "source.solana_models.prod.solana_txs": [], "source.solana_models.crosschain.address_labels": [], "source.solana_models.shared.prices_v2": [], "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827": [], "source.solana_models.solana_external.decoded_instructions_data_api": [], "source.solana_models.solana_external.validator_metadata_api": [], "source.solana_models.solana_external.stake_account_tx_ids_api": [], "source.solana_models.solana_external.txs_api": [], "source.solana_models.solana_external.blocks_api": [], "source.solana_models.solana_external.block_rewards_api": [], "source.solana_models.solana_external.block_txs_api": []}, "child_map": {"model.solana_models.bronze__blocks": ["model.solana_models.silver__blocks"], "model.solana_models.bronze__transactions": ["model.solana_models.silver__transactions", "model.solana_models.silver__votes"], "model.solana_models.core__ez_staking_lp_actions": ["model.solana_models.silver___all_unknown_stake_vote_accounts", "model.solana_models.silver___all_unknown_stake_vote_accounts", "model.solana_models.solana_share__ez_staking_lp_actions", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID.89b6d6552d", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP.8e9cefa953", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION.aabf523728", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE.b67e8cf6eb", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX.ba6651aba1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY.44f420bb81", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE.8ec3223bae", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE.be14980ebe", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS.5edbe73369", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT.9d236e667f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY.243622350c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED.7aef76b713", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID.9d42019d95", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK.43a29632b7", "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT.ad8dfe8b7c"], "model.solana_models.silver__blocks": ["model.solana_models.core__fact_blocks", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e", "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35", "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6", "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444", "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5", "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.solana_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "test.solana_models.test_silver__blocks__block_hash-assert-no-gaps", "test.solana_models.test_silver__transactions__block_id-assert-no-gaps"], "model.solana_models.silver__decoded_instructions_data": ["model.solana_models.silver__gauges_creates_marinade", "model.solana_models.silver__gauges_votes_marinade", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX.3c25f52606", "test.solana_models.not_null_silver__decoded_instructions_data_DATA.904e098152", "test.solana_models.not_null_silver__decoded_instructions_data_EVENT_INDEX.d3bf02c7f1", "test.solana_models.not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.abc0ebff70", "test.solana_models.not_null_silver__decoded_instructions_data_PROGRAM_ID.64985194e2", "test.solana_models.not_null_silver__decoded_instructions_data_TX_ID.0d023c1b85", "test.solana_models.not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.625e5704ff"], "model.solana_models.silver__events": ["model.solana_models.core__fact_events", "model.solana_models.silver___all_undecoded_instructions_data", "model.solana_models.silver___all_undecoded_instructions_data", "model.solana_models.silver__gauges_creates_marinade", "model.solana_models.silver__gauges_votes_marinade", "model.solana_models.silver__gauges_votes_saber", "model.solana_models.silver__gov_actions_marinade", "model.solana_models.silver__gov_actions_marinade", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_saber", "model.solana_models.silver__gov_actions_saber", "model.solana_models.silver__nft_bids_yawww", "model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_opensea", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__nft_sales_yawww", "model.solana_models.silver__nft_sales_yawww", "model.solana_models.silver__proposal_creation_realms", "model.solana_models.silver__proposal_votes_marinade", "model.solana_models.silver__proposal_votes_marinade", "model.solana_models.silver__proposal_votes_marinade", "model.solana_models.silver__proposal_votes_realms", "model.solana_models.silver__staking_lp_actions", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3", "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd", "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75", "test.solana_models.not_null_silver__events_INDEX.9a860b1d59", "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872", "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7", "test.solana_models.not_null_silver__events_SUCCEEDED.14f8e6ee9d", "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636", "test.solana_models.not_null_silver__events__INSERTED_TIMESTAMP.7505ba4015"], "model.solana_models.silver__staking_lp_actions": ["model.solana_models.core__ez_staking_lp_actions", "model.solana_models.core__fact_staking_lp_actions", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa", "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000", "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8", "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f", "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face", "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77", "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0", "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52", "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f", "test.solana_models.not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.413356b53a"], "model.solana_models.silver__transactions": ["model.solana_models.core__fact_transactions", "model.solana_models.silver___inner_instructions", "model.solana_models.silver___instructions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances", "model.solana_models.silver__gauges_creates_marinade", "model.solana_models.silver__gauges_votes_marinade", "model.solana_models.silver__gauges_votes_saber", "model.solana_models.silver__gov_actions_marinade", "model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_saber", "model.solana_models.silver__nft_bids_yawww", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_opensea", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__nft_sales_yawww", "model.solana_models.silver__proposal_creation_realms", "model.solana_models.silver__proposal_votes_marinade", "model.solana_models.silver__proposal_votes_realms", "model.solana_models.silver__staking_lp_actions", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__transfers", "model.solana_models.silver__votes_agg_block", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6", "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1", "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d", "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c", "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f", "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539", "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339", "test.solana_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0", "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466", "test.solana_models.test_silver__transactions__block_id-assert-no-gaps"], "model.solana_models.silver__transfers": ["model.solana_models.core__fact_transfers", "model.solana_models.silver__nft_mints_tmp", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02", "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b", "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.solana_models.not_null_silver__transfers_INDEX.d7de164538", "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4", "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b", "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe", "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2", "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7", "test.solana_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a"], "model.solana_models.silver__votes": ["model.solana_models.silver__votes_agg_block", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994", "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d", "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936", "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6", "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be", "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1", "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c", "test.solana_models.not_null_silver__votes_TX_ID.e428472813", "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9", "test.solana_models.not_null_silver__votes__INSERTED_TIMESTAMP.741e592bd1", "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5", "test.solana_models.test_silver__transactions__block_id-assert-no-gaps"], "model.solana_models.silver__votes_agg_block": ["model.solana_models.core__fact_votes_agg_block", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56", "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466", "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c", "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a"], "model.solana_models.silver___all_undecoded_instructions_data": [], "model.solana_models.silver___all_unknown_stake_vote_accounts": [], "model.solana_models.silver___all_unknown_tx_details": [], "model.solana_models.silver___historical_staking_lp_actions": ["model.solana_models.core__ez_staking_lp_actions", "test.solana_models.dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX.4df18388e4", "test.solana_models.not_null_silver___historical_staking_lp_actions_BLOCK_ID.fbefcaf8d2", "test.solana_models.not_null_silver___historical_staking_lp_actions_INDEX.9f9d298a76", "test.solana_models.not_null_silver___historical_staking_lp_actions_INSTRUCTION.e152e4f7bc", "test.solana_models.not_null_silver___historical_staking_lp_actions_PROGRAM_ID.ffcc8836da", "test.solana_models.not_null_silver___historical_staking_lp_actions_SUCCEEDED.f3d5339ed0", "test.solana_models.not_null_silver___historical_staking_lp_actions_TX_ID.5a59286ba2"], "model.solana_models.silver___inner_instructions": ["model.solana_models.silver__events", "model.solana_models.silver__staking_lp_actions", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd", "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601", "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e", "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa", "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429", "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef", "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e", "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0", "test.solana_models.not_null_silver___inner_instructions__INSERTED_TIMESTAMP.cfe9e2c6cf"], "model.solana_models.silver___instructions": ["model.solana_models.silver__events", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8", "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c", "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d", "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f", "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7", "test.solana_models.not_null_silver___instructions_SUCCEEDED.a2f8a7a3ae", "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847", "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea", "test.solana_models.not_null_silver___instructions__INSERTED_TIMESTAMP.c55b5e3da3"], "model.solana_models.silver___post_token_balances": ["model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__gov_actions_saber", "model.solana_models.silver__nft_mints_tmp", "model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_opensea", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a", "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231", "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4", "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff", "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d", "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432", "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0", "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778", "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f", "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d", "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1", "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a", "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c", "test.solana_models.not_null_silver___post_token_balances__INSERTED_TIMESTAMP.743b56887f"], "model.solana_models.silver___pre_token_balances": ["model.solana_models.silver__gov_actions_marinade_tmp", "model.solana_models.silver__transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246", "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693", "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e", "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436", "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0", "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6", "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4", "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd", "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044", "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903", "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d", "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d", "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed", "test.solana_models.not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.18c805b0ff"], "model.solana_models.silver___prices": ["test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42", "test.solana_models.not_null_silver___prices_PRICE.538411960a", "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3", "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5"], "model.solana_models.solana_share__dim_labels": [], "model.solana_models.solana_share__ez_staking_lp_actions": [], "model.solana_models.solana_share__fact_blocks": [], "model.solana_models.solana_share__fact_events": [], "model.solana_models.solana_share__fact_staking_lp_actions": [], "model.solana_models.solana_share__fact_transactions": [], "model.solana_models.solana_share__fact_transfers": [], "model.solana_models.solana_share__fact_votes_agg_block": [], "model.solana_models.streamline__all_unknown_blocks_historical": [], "model.solana_models.streamline__all_unknown_blocks_real_time": [], "model.solana_models.streamline__all_unknown_block_rewards_historical": [], "model.solana_models.streamline__all_unknown_block_rewards_real_time": [], "model.solana_models.streamline__all_unknown_block_txs_historical": [], "model.solana_models.streamline__all_unknown_block_txs_real_time": [], "model.solana_models.streamline__complete_blocks": ["model.solana_models.streamline__all_unknown_blocks_historical", "model.solana_models.streamline__all_unknown_blocks_real_time", "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID.1ba4c0ccdc", "test.solana_models.not_null_streamline__complete_blocks_BLOCK_ID.b5cf662eab", "test.solana_models.not_null_streamline__complete_blocks__INSERTED_DATE.425fede01f"], "model.solana_models.streamline__complete_block_rewards": ["model.solana_models.streamline__all_unknown_block_rewards_historical", "model.solana_models.streamline__all_unknown_block_rewards_historical", "model.solana_models.streamline__all_unknown_block_rewards_real_time", "model.solana_models.streamline__all_unknown_block_rewards_real_time", "model.solana_models.streamline__all_unknown_block_rewards_real_time", "model.solana_models.streamline__all_unknown_block_rewards_real_time", "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID.2d196b4953", "test.solana_models.not_null_streamline__complete_block_rewards_BLOCK_ID.7ed53b986d", "test.solana_models.not_null_streamline__complete_block_rewards__PARTITION_ID.7e887fbe6e"], "model.solana_models.streamline__complete_block_txs": ["model.solana_models.streamline__all_unknown_block_txs_historical", "model.solana_models.streamline__all_unknown_block_txs_historical", "model.solana_models.streamline__all_unknown_block_txs_real_time", "model.solana_models.streamline__all_unknown_block_txs_real_time", "model.solana_models.streamline__all_unknown_block_txs_real_time", "model.solana_models.streamline__all_unknown_block_txs_real_time", "model.solana_models.streamline__all_unknown_blocks_real_time", "model.solana_models.streamline__all_unknown_blocks_real_time", "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID.3802e1f2d9", "test.solana_models.not_null_streamline__complete_block_txs_BLOCK_ID.b2ca3dc9e6", "test.solana_models.not_null_streamline__complete_block_txs__PARTITION_ID.a35fe6b303"], "test.solana_models.test_silver__blocks__block_hash-assert-no-gaps": [], "test.solana_models.test_silver__transactions__block_id-assert-no-gaps": [], "operation.solana_models.solana_models-on-run-start-0": [], "operation.solana_models.solana_models-on-run-start-1": [], "operation.solana_models.solana_models-on-run-start-2": [], "operation.solana_models.solana_models-on-run-start-3": [], "operation.solana_models.solana_models-on-run-start-4": [], "operation.solana_models.solana_models-on-run-start-5": [], "operation.solana_models.solana_models-on-run-start-6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_TIMESTAMP.8e9cefa953": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_BLOCK_ID.89b6d6552d": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_TX_ID.9d42019d95": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_INDEX.ba6651aba1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SUCCEEDED.7aef76b713": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_EVENT_TYPE.b67e8cf6eb": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_SIGNERS.5edbe73369": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_AUTHORITY.243622350c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_STAKE_ACCOUNT.9d236e667f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_PRE_TX_STAKED_BALANCE.be14980ebe": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_POST_TX_STAKED_BALANCE.8ec3223bae": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VOTE_ACCOUNT.ad8dfe8b7c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_NODE_PUBKEY.44f420bb81": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_VALIDATOR_RANK.43a29632b7": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__ez_staking_lp_actions_COMMISSION.aabf523728": [], "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba": [], "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": [], "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": [], "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": [], "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": [], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5": [], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444": [], "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6": [], "test.solana_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e": [], "test.solana_models.not_null_silver__decoded_instructions_data_TX_ID.0d023c1b85": [], "test.solana_models.not_null_silver__decoded_instructions_data_EVENT_INDEX.d3bf02c7f1": [], "test.solana_models.not_null_silver__decoded_instructions_data_PROGRAM_ID.64985194e2": [], "test.solana_models.not_null_silver__decoded_instructions_data_INSTRUCTION_TYPE.abc0ebff70": [], "test.solana_models.not_null_silver__decoded_instructions_data_DATA.904e098152": [], "test.solana_models.not_null_silver__decoded_instructions_data__INSERTED_TIMESTAMP.625e5704ff": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__decoded_instructions_data_TX_ID__EVENT_INDEX.3c25f52606": [], "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3": [], "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd": [], "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636": [], "test.solana_models.not_null_silver__events_SUCCEEDED.14f8e6ee9d": [], "test.solana_models.not_null_silver__events_INDEX.9a860b1d59": [], "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7": [], "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872": [], "test.solana_models.not_null_silver__events__INSERTED_TIMESTAMP.7505ba4015": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3": [], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd": [], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000": [], "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f": [], "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face": [], "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52": [], "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0": [], "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f": [], "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77": [], "test.solana_models.not_null_silver__staking_lp_actions__INSERTED_TIMESTAMP.413356b53a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa": [], "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": [], "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": [], "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f": [], "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339": [], "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466": [], "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c": [], "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539": [], "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1": [], "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": [], "test.solana_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": [], "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e": [], "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2": [], "test.solana_models.not_null_silver__transfers_INDEX.d7de164538": [], "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe": [], "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7": [], "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b": [], "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b": [], "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4": [], "test.solana_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02": [], "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375": [], "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d": [], "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1": [], "test.solana_models.not_null_silver__votes_TX_ID.e428472813": [], "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5": [], "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6": [], "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c": [], "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9": [], "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be": [], "test.solana_models.not_null_silver__votes__INSERTED_TIMESTAMP.741e592bd1": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994": [], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92": [], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466": [], "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56": [], "test.solana_models.not_null_silver___historical_staking_lp_actions_BLOCK_ID.fbefcaf8d2": [], "test.solana_models.not_null_silver___historical_staking_lp_actions_TX_ID.5a59286ba2": [], "test.solana_models.not_null_silver___historical_staking_lp_actions_INDEX.9f9d298a76": [], "test.solana_models.not_null_silver___historical_staking_lp_actions_SUCCEEDED.f3d5339ed0": [], "test.solana_models.not_null_silver___historical_staking_lp_actions_PROGRAM_ID.ffcc8836da": [], "test.solana_models.not_null_silver___historical_staking_lp_actions_INSTRUCTION.e152e4f7bc": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___historical_staking_lp_actions_BLOCK_ID__TX_ID__INDEX.4df18388e4": [], "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd": [], "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601": [], "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e": [], "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa": [], "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef": [], "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0": [], "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429": [], "test.solana_models.not_null_silver___inner_instructions__INSERTED_TIMESTAMP.cfe9e2c6cf": [], "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8": [], "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c": [], "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847": [], "test.solana_models.not_null_silver___instructions_SUCCEEDED.a2f8a7a3ae": [], "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f": [], "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea": [], "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7": [], "test.solana_models.not_null_silver___instructions__INSERTED_TIMESTAMP.c55b5e3da3": [], "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a": [], "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff": [], "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1": [], "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0": [], "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4": [], "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f": [], "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d": [], "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432": [], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a": [], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c": [], "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778": [], "test.solana_models.not_null_silver___post_token_balances__INSERTED_TIMESTAMP.743b56887f": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231": [], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246": [], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436": [], "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d": [], "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4": [], "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e": [], "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044": [], "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903": [], "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6": [], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d": [], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed": [], "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd": [], "test.solana_models.not_null_silver___pre_token_balances__INSERTED_TIMESTAMP.18c805b0ff": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42": [], "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5": [], "test.solana_models.not_null_silver___prices_PRICE.538411960a": [], "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3": [], "test.solana_models.not_null_streamline__complete_blocks_BLOCK_ID.b5cf662eab": [], "test.solana_models.not_null_streamline__complete_blocks__INSERTED_DATE.425fede01f": [], "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_blocks_BLOCK_ID.1ba4c0ccdc": [], "test.solana_models.not_null_streamline__complete_block_rewards_BLOCK_ID.7ed53b986d": [], "test.solana_models.not_null_streamline__complete_block_rewards__PARTITION_ID.7e887fbe6e": [], "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_rewards_BLOCK_ID.2d196b4953": [], "test.solana_models.not_null_streamline__complete_block_txs_BLOCK_ID.b2ca3dc9e6": [], "test.solana_models.not_null_streamline__complete_block_txs__PARTITION_ID.a35fe6b303": [], "test.solana_models.dbt_utils_unique_combination_of_columns_streamline__complete_block_txs_BLOCK_ID.3802e1f2d9": [], "model.solana_models.silver__nft_mints": ["model.solana_models.core__fact_nft_mints", "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY.83f9ea3f73", "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211", "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d", "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e", "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695", "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413", "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0", "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884", "test.solana_models.not_null_silver__nft_mints__INSERTED_TIMESTAMP.d96edc2cdd"], "model.solana_models.silver__gauges_votes_saber": ["model.solana_models.core__fact_gauges_votes", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2.fb87b0a75b", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE.15f3bd1b81", "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_ID.2be229f6f0", "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.6ae077e628", "test.solana_models.not_null_silver__gauges_votes_saber_DELEGATED_SHARES.876c99a9bf", "test.solana_models.not_null_silver__gauges_votes_saber_GAUGE.240b87f396", "test.solana_models.not_null_silver__gauges_votes_saber_POWER.af1e6ac76c", "test.solana_models.not_null_silver__gauges_votes_saber_SUCCEEDED.0773c5f9cc", "test.solana_models.not_null_silver__gauges_votes_saber_TX_ID.f58a7640de", "test.solana_models.not_null_silver__gauges_votes_saber_VOTER.0aac8d5a72", "test.solana_models.not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.9aeaff1542"], "model.solana_models.silver__transactions2": ["test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID.8e06686cba", "test.solana_models.not_null_silver__transactions2_ACCOUNT_KEYS.add83fddb9", "test.solana_models.not_null_silver__transactions2_BLOCK_ID.331c02cf61", "test.solana_models.not_null_silver__transactions2_BLOCK_TIMESTAMP.1260483cfb", "test.solana_models.not_null_silver__transactions2_FEE.e974692c87", "test.solana_models.not_null_silver__transactions2_RECENT_BLOCK_HASH.c2f764c258", "test.solana_models.not_null_silver__transactions2_SUCCEEDED.535abe8018", "test.solana_models.not_null_silver__transactions2_TX_ID.d2b387ef86", "test.solana_models.not_null_silver__transactions2__INSERTED_TIMESTAMP.104a002c55", "test.solana_models.null_threshold_silver__transactions2_FEE__0_99.e15c21b151"], "model.solana_models.silver__gauges_votes_marinade": ["model.solana_models.core__fact_gauges_votes", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2.605b04d87d", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE.c078bd8801", "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_ID.f0cfc232c7", "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.bb22dfbbe8", "test.solana_models.not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.bf9e028fad", "test.solana_models.not_null_silver__gauges_votes_marinade_GAUGE.715793551e", "test.solana_models.not_null_silver__gauges_votes_marinade_SUCCEEDED.832007203b", "test.solana_models.not_null_silver__gauges_votes_marinade_TX_ID.8d6976c3ef", "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER.2d4a3e4541", "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER_NFT.7dd18f071d", "test.solana_models.not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.b715e87e8a"], "model.solana_models.silver__proposal_votes_marinade": ["model.solana_models.core__fact_proposal_votes", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL.cd45ca087d", "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_ID.dc4c5b7cec", "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.7f4fb1df77", "test.solana_models.not_null_silver__proposal_votes_marinade_PROPOSAL.df80e9426f", "test.solana_models.not_null_silver__proposal_votes_marinade_SUCCEEDED.c699ebcd91", "test.solana_models.not_null_silver__proposal_votes_marinade_TX_ID.bdbe3e6473", "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER.3cadae8696", "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.0bfe7a95f4", "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_NFT.4e7b99e8f3", "test.solana_models.not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.aa308c1b21"], "model.solana_models.silver__nft_sales_magic_eden_v1": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER.85066a3a10", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SELLER.95475fb609", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.868714bef2"], "model.solana_models.silver__nft_sales_solanart": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba", "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa", "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f", "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca", "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a", "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e", "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508", "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6", "test.solana_models.not_null_silver__nft_sales_solanart_SELLER.28a7c2d0f9", "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2", "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229", "test.solana_models.not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.60da42023e"], "model.solana_models.silver__gauges_creates_marinade": ["model.solana_models.core__fact_gauges_creates", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX.386c43511b", "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_ID.4179d75cc4", "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.73635d54bc", "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGE.cfc7f756b7", "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGEMEISTER.ed4b5d8c4d", "test.solana_models.not_null_silver__gauges_creates_marinade_SIGNER.98e89e2d0b", "test.solana_models.not_null_silver__gauges_creates_marinade_SUCCEEDED.95f0be96de", "test.solana_models.not_null_silver__gauges_creates_marinade_TX_ID.f400687b92", "test.solana_models.not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.6f35428b8b", "test.solana_models.not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.40fbd696a6"], "model.solana_models.silver__proposal_votes_realms": ["model.solana_models.core__fact_proposal_votes", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2.b84f880b5e", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX.b92bd7c953", "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_ID.b1d9cb82b9", "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.ce316551dc", "test.solana_models.not_null_silver__proposal_votes_realms_INDEX.37808c3dba", "test.solana_models.not_null_silver__proposal_votes_realms_PROGRAM_ID.2f23de7b25", "test.solana_models.not_null_silver__proposal_votes_realms_PROPOSAL.390b7e392d", "test.solana_models.not_null_silver__proposal_votes_realms_REALMS_ID.3f90a0192f", "test.solana_models.not_null_silver__proposal_votes_realms_SUCCEEDED.0376a2a567", "test.solana_models.not_null_silver__proposal_votes_realms_TX_ID.3bd06898da", "test.solana_models.not_null_silver__proposal_votes_realms_VOTER.8f724dd0ad", "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.252a5b67e2", "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_CHOICE.4b3d288d88", "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_RANK.86e66d9abd", "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_WEIGHT.62c96157a7", "test.solana_models.not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.6a87726450"], "model.solana_models.silver__gov_actions_marinade": ["model.solana_models.core__fact_gov_actions", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2.44a6e38196", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID.67d5c4a9e0", "test.solana_models.not_null_silver__gov_actions_marinade_ACTION.4a1d219ecf", "test.solana_models.not_null_silver__gov_actions_marinade_AMOUNT.918ce76ba6", "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_ID.a72b05cd24", "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.d0fd8b375a", "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.ac4186ba90", "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_NFT.9b22305c25", "test.solana_models.not_null_silver__gov_actions_marinade_MINT.2d5ed39add", "test.solana_models.not_null_silver__gov_actions_marinade_SIGNER.57c76b61ad", "test.solana_models.not_null_silver__gov_actions_marinade_SUCCEEDED.013f9c87b3", "test.solana_models.not_null_silver__gov_actions_marinade_TX_ID.647bce8bf6", "test.solana_models.not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.b35d82c58e"], "model.solana_models.silver__nft_mints_tmp": ["model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_mints", "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED.7cd7a32618", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3.7de993f66d", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY.77b1adc497", "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_ID.93eddb7cca", "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.4ec41b30bd", "test.solana_models.not_null_silver__nft_mints_tmp_INGESTED_AT.566cc3cbdd", "test.solana_models.not_null_silver__nft_mints_tmp_MINT.404b1612e5", "test.solana_models.not_null_silver__nft_mints_tmp_MINT_CURRENCY.49faeb06ef", "test.solana_models.not_null_silver__nft_mints_tmp_MINT_PRICE.7fdc3b7df1", "test.solana_models.not_null_silver__nft_mints_tmp_PROGRAM_ID.251c1182a5", "test.solana_models.not_null_silver__nft_mints_tmp_PURCHASER.1373f0dad2", "test.solana_models.not_null_silver__nft_mints_tmp_TX_ID.c543ca264b", "test.solana_models.not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.aac460b351"], "model.solana_models.silver__gov_actions_saber": ["model.solana_models.core__fact_gov_actions", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7.4042f35d74", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID.ce7ee21c9c", "test.solana_models.not_null_silver__gov_actions_saber_ACTION.361f79ef61", "test.solana_models.not_null_silver__gov_actions_saber_AMOUNT.c10703a914", "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_ID.e57b17e737", "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.0e1373a9ce", "test.solana_models.not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.ee8c4796e0", "test.solana_models.not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.a93b78adaa", "test.solana_models.not_null_silver__gov_actions_saber_MINT.bd58c5033d", "test.solana_models.not_null_silver__gov_actions_saber_SIGNER.4d64f40393", "test.solana_models.not_null_silver__gov_actions_saber_SUCCEEDED.cec72b1c03", "test.solana_models.not_null_silver__gov_actions_saber_TX_ID.b1d3dcd5b7", "test.solana_models.not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.c01fa19e41"], "model.solana_models.silver__nft_sales_magic_eden_v2": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SELLER.102d39d9f7", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.5fe9a32b3a"], "model.solana_models.silver__swaps_saber_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1", "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db", "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9", "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e", "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218", "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff", "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e", "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5", "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d", "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd", "test.solana_models.not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.79c65c21c1"], "model.solana_models.silver__nft_metadata": ["model.solana_models.core__dim_nft_metadata", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849", "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60", "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff", "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189", "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f", "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4", "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475", "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722", "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e", "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082", "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d", "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a", "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32"], "model.solana_models.silver__swaps_orca_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e", "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a", "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1", "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1", "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa", "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253", "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8", "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e", "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c", "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d", "test.solana_models.not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.85a960973a"], "model.solana_models.silver__nft_sales_solport": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8", "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e", "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf", "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86", "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba", "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44", "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459", "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37", "test.solana_models.not_null_silver__nft_sales_solport_SELLER.7aef62f7e9", "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae", "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d", "test.solana_models.not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.5d64f74072"], "model.solana_models.silver__gov_actions_marinade_tmp": ["model.solana_models.silver__gov_actions_marinade", "model.solana_models.silver__gov_actions_marinade", "model.solana_models.silver__gov_actions_marinade"], "model.solana_models.bronze__blocks2": ["model.solana_models.silver__blocks2", "model.solana_models.silver__blocks2"], "model.solana_models.silver__proposal_creation_realms": ["model.solana_models.core__fact_proposal_creation", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5.f018e56096", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID.f2872abdee", "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_ID.9af4ef943d", "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.8e473b0a82", "test.solana_models.not_null_silver__proposal_creation_realms_INDEX.163253349a", "test.solana_models.not_null_silver__proposal_creation_realms_PROGRAM_ID.9e5b4c6744", "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL.d1899e0b24", "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_NAME.55dbd6390f", "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.a475a6e153", "test.solana_models.not_null_silver__proposal_creation_realms_REALMS_ID.0c95daf7ed", "test.solana_models.not_null_silver__proposal_creation_realms_SUCCEEDED.5bdc0fd83d", "test.solana_models.not_null_silver__proposal_creation_realms_TX_ID.1ac6e10e4b", "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_OPTIONS.fdfc6d924f", "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_TYPE.34d2959fd9", "test.solana_models.not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.5dd86e0cc4"], "model.solana_models.silver__swaps_raydium_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde", "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2", "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a", "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a", "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe", "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079", "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3", "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69", "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282", "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81", "test.solana_models.not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.3c1c88424c"], "model.solana_models.silver__nft_bids_yawww": ["model.solana_models.silver__nft_sales_yawww", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2.a84b7c01df", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID.2c013394c9", "test.solana_models.not_null_silver__nft_bids_yawww_ACCT_2.c4062e4e6f", "test.solana_models.not_null_silver__nft_bids_yawww_BIDDER.9dd9d8dff8", "test.solana_models.not_null_silver__nft_bids_yawww_BID_AMOUNT.9b0ba7707e", "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_ID.9749097c5b", "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.7882aa9704", "test.solana_models.not_null_silver__nft_bids_yawww_SUCCEEDED.673964be11", "test.solana_models.not_null_silver__nft_bids_yawww_TX_ID.6ef944c5f0", "test.solana_models.not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.779932a52b"], "model.solana_models.silver__swaps_jupiter_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515", "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6", "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca", "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff", "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31", "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f", "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86", "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117", "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af", "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1", "test.solana_models.not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.651303cb9e"], "model.solana_models.silver__nft_sales_opensea": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2.c9762e9bdf", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT.f66dcb74ec", "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_ID.2caa773a25", "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.e71af9ab43", "test.solana_models.not_null_silver__nft_sales_opensea_INGESTED_AT.fafe37ae35", "test.solana_models.not_null_silver__nft_sales_opensea_MINT.e1669a6bae", "test.solana_models.not_null_silver__nft_sales_opensea_PROGRAM_ID.88c3057bb1", "test.solana_models.not_null_silver__nft_sales_opensea_PURCHASER.81d8b51f25", "test.solana_models.not_null_silver__nft_sales_opensea_SALES_AMOUNT.7bf01bc93a", "test.solana_models.not_null_silver__nft_sales_opensea_SELLER.d0749d4bee", "test.solana_models.not_null_silver__nft_sales_opensea_SUCCEEDED.31a296fb81", "test.solana_models.not_null_silver__nft_sales_opensea_TX_ID.c5ba3432cb", "test.solana_models.not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.06c60c6c37"], "model.solana_models.silver__nft_sales_smb": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19", "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70", "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c", "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3", "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4", "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b", "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c", "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00", "test.solana_models.not_null_silver__nft_sales_smb_SELLER.ecc06c8686", "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d", "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843", "test.solana_models.not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.7a007575a1"], "model.solana_models.silver__blocks2": ["model.solana_models.silver__transactions2", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID.600f932e22", "test.solana_models.not_null_silver__blocks2_BLOCK_HASH.cd38b2ffa4", "test.solana_models.not_null_silver__blocks2_BLOCK_ID.1b57625e49", "test.solana_models.not_null_silver__blocks2_BLOCK_TIMESTAMP.d27eb04036", "test.solana_models.not_null_silver__blocks2_CHAIN_ID.665f1e1503", "test.solana_models.not_null_silver__blocks2_NETWORK.fecf39aef5", "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.ae3035b946", "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_ID.3f8f35b7af", "test.solana_models.not_null_silver__blocks2__INSERTED_DATE.d069b97c64"], "model.solana_models.silver__nft_sales_yawww": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2.c609719af8", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID.836d894e8e", "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_ID.b53822b948", "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.b165dfae86", "test.solana_models.not_null_silver__nft_sales_yawww_MINT.b541ddfd92", "test.solana_models.not_null_silver__nft_sales_yawww_PROGRAM_ID.bac5a43cf3", "test.solana_models.not_null_silver__nft_sales_yawww_PURCHASER.ef8aa381b0", "test.solana_models.not_null_silver__nft_sales_yawww_SALES_AMOUNT.209049c03c", "test.solana_models.not_null_silver__nft_sales_yawww_SALE_TYPE.c14db0d483", "test.solana_models.not_null_silver__nft_sales_yawww_SELLER.b4c48c28e0", "test.solana_models.not_null_silver__nft_sales_yawww_SUCCEEDED.1c07002f13", "test.solana_models.not_null_silver__nft_sales_yawww_TX_ID.cc4d7cec95", "test.solana_models.not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.8f71fb543a"], "model.solana_models.solana_share__fact_nft_sales": [], "model.solana_models.solana_share__dim_nft_metadata": [], "model.solana_models.solana_share__fact_nft_mints": [], "model.solana_models.solana_share__fact_gauges_votes": [], "model.solana_models.solana_share__fact_swaps": [], "model.solana_models.solana_share__fact_proposal_votes": [], "model.solana_models.core__fact_proposal_creation": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID.3c74143fd3", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP.cb79e567af", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM.1c6148c1a5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME.0cecc44709", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL.aca94a352b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME.c028b3f7e8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER.8336328856", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID.d6f7ce594c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED.c500624a66", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID.a424efa5bc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS.7df8cc23d3", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE.54b95b9487"], "model.solana_models.solana_share__fact_gov_actions": [], "model.solana_models.solana_share__fact_gauges_creates": [], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca": [], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db": [], "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd": [], "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff": [], "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e": [], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e": [], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218": [], "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5": [], "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d": [], "test.solana_models.not_null_silver__swaps_saber_dex__INSERTED_TIMESTAMP.79c65c21c1": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1": [], "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_TIMESTAMP.4ec41b30bd": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_tmp_BLOCK_TIMESTAMP__day__3.7de993f66d": [], "test.solana_models.not_null_silver__nft_mints_tmp_BLOCK_ID.93eddb7cca": [], "test.solana_models.not_null_silver__nft_mints_tmp_TX_ID.c543ca264b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_tmp_SUCCEEDED.7cd7a32618": [], "test.solana_models.not_null_silver__nft_mints_tmp_PROGRAM_ID.251c1182a5": [], "test.solana_models.not_null_silver__nft_mints_tmp_PURCHASER.1373f0dad2": [], "test.solana_models.not_null_silver__nft_mints_tmp_MINT_CURRENCY.49faeb06ef": [], "test.solana_models.not_null_silver__nft_mints_tmp_MINT.404b1612e5": [], "test.solana_models.not_null_silver__nft_mints_tmp_MINT_PRICE.7fdc3b7df1": [], "test.solana_models.not_null_silver__nft_mints_tmp_INGESTED_AT.566cc3cbdd": [], "test.solana_models.not_null_silver__nft_mints_tmp__INSERTED_TIMESTAMP.aac460b351": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_tmp_TX_ID__MINT__MINT_CURRENCY.77b1adc497": [], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c": [], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70": [], "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843": [], "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d": [], "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b": [], "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c": [], "test.solana_models.not_null_silver__nft_sales_smb_SELLER.ecc06c8686": [], "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4": [], "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00": [], "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3": [], "test.solana_models.not_null_silver__nft_sales_smb__INSERTED_TIMESTAMP.7a007575a1": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SELLER.102d39d9f7": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2__INSERTED_TIMESTAMP.5fe9a32b3a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79": [], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c": [], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a": [], "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d": [], "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253": [], "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8": [], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1": [], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa": [], "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e": [], "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c": [], "test.solana_models.not_null_silver__swaps_orca_dex__INSERTED_TIMESTAMP.85a960973a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e": [], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2": [], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2": [], "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81": [], "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079": [], "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3": [], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a": [], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe": [], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69": [], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282": [], "test.solana_models.not_null_silver__swaps_raydium_dex__INSERTED_TIMESTAMP.3c1c88424c": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde": [], "test.solana_models.not_null_silver__transactions2_BLOCK_TIMESTAMP.1260483cfb": [], "test.solana_models.not_null_silver__transactions2_BLOCK_ID.331c02cf61": [], "test.solana_models.not_null_silver__transactions2_RECENT_BLOCK_HASH.c2f764c258": [], "test.solana_models.not_null_silver__transactions2_TX_ID.d2b387ef86": [], "test.solana_models.null_threshold_silver__transactions2_FEE__0_99.e15c21b151": [], "test.solana_models.not_null_silver__transactions2_FEE.e974692c87": [], "test.solana_models.not_null_silver__transactions2_SUCCEEDED.535abe8018": [], "test.solana_models.not_null_silver__transactions2_ACCOUNT_KEYS.add83fddb9": [], "test.solana_models.not_null_silver__transactions2__INSERTED_TIMESTAMP.104a002c55": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions2_TX_ID.8e06686cba": [], "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_TIMESTAMP.73635d54bc": [], "test.solana_models.not_null_silver__gauges_creates_marinade_BLOCK_ID.4179d75cc4": [], "test.solana_models.not_null_silver__gauges_creates_marinade_TX_ID.f400687b92": [], "test.solana_models.not_null_silver__gauges_creates_marinade_SUCCEEDED.95f0be96de": [], "test.solana_models.not_null_silver__gauges_creates_marinade_SIGNER.98e89e2d0b": [], "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGE.cfc7f756b7": [], "test.solana_models.not_null_silver__gauges_creates_marinade_GAUGEMEISTER.ed4b5d8c4d": [], "test.solana_models.not_null_silver__gauges_creates_marinade_VALIDATOR_ACCOUNT.6f35428b8b": [], "test.solana_models.not_null_silver__gauges_creates_marinade__INSERTED_TIMESTAMP.40fbd696a6": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_creates_marinade_TX_ID__INDEX.386c43511b": [], "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_TIMESTAMP.bb22dfbbe8": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_marinade_BLOCK_TIMESTAMP__day__2.605b04d87d": [], "test.solana_models.not_null_silver__gauges_votes_marinade_BLOCK_ID.f0cfc232c7": [], "test.solana_models.not_null_silver__gauges_votes_marinade_TX_ID.8d6976c3ef": [], "test.solana_models.not_null_silver__gauges_votes_marinade_SUCCEEDED.832007203b": [], "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER.2d4a3e4541": [], "test.solana_models.not_null_silver__gauges_votes_marinade_VOTER_NFT.7dd18f071d": [], "test.solana_models.not_null_silver__gauges_votes_marinade_GAUGE.715793551e": [], "test.solana_models.not_null_silver__gauges_votes_marinade_DELEGATED_SHARES.bf9e028fad": [], "test.solana_models.not_null_silver__gauges_votes_marinade__INSERTED_TIMESTAMP.b715e87e8a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_marinade_TX_ID__VOTER__VOTER_NFT__GAUGE.c078bd8801": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af": [], "test.solana_models.not_null_silver__swaps_jupiter_dex__INSERTED_TIMESTAMP.651303cb9e": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515": [], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380": [], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa": [], "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229": [], "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2": [], "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e": [], "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508": [], "test.solana_models.not_null_silver__nft_sales_solanart_SELLER.28a7c2d0f9": [], "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a": [], "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6": [], "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca": [], "test.solana_models.not_null_silver__nft_sales_solanart__INSERTED_TIMESTAMP.60da42023e": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba": [], "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_TIMESTAMP.7f4fb1df77": [], "test.solana_models.not_null_silver__proposal_votes_marinade_BLOCK_ID.dc4c5b7cec": [], "test.solana_models.not_null_silver__proposal_votes_marinade_TX_ID.bdbe3e6473": [], "test.solana_models.not_null_silver__proposal_votes_marinade_SUCCEEDED.c699ebcd91": [], "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER.3cadae8696": [], "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_NFT.4e7b99e8f3": [], "test.solana_models.not_null_silver__proposal_votes_marinade_VOTER_ACCOUNT.0bfe7a95f4": [], "test.solana_models.not_null_silver__proposal_votes_marinade_PROPOSAL.df80e9426f": [], "test.solana_models.not_null_silver__proposal_votes_marinade__INSERTED_TIMESTAMP.aa308c1b21": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_marinade_TX_ID__VOTER_NFT__PROPOSAL.cd45ca087d": [], "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_TIMESTAMP.e71af9ab43": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_opensea_BLOCK_TIMESTAMP__day__2.c9762e9bdf": [], "test.solana_models.not_null_silver__nft_sales_opensea_BLOCK_ID.2caa773a25": [], "test.solana_models.not_null_silver__nft_sales_opensea_TX_ID.c5ba3432cb": [], "test.solana_models.not_null_silver__nft_sales_opensea_SUCCEEDED.31a296fb81": [], "test.solana_models.not_null_silver__nft_sales_opensea_PROGRAM_ID.88c3057bb1": [], "test.solana_models.not_null_silver__nft_sales_opensea_PURCHASER.81d8b51f25": [], "test.solana_models.not_null_silver__nft_sales_opensea_SELLER.d0749d4bee": [], "test.solana_models.not_null_silver__nft_sales_opensea_MINT.e1669a6bae": [], "test.solana_models.not_null_silver__nft_sales_opensea_SALES_AMOUNT.7bf01bc93a": [], "test.solana_models.not_null_silver__nft_sales_opensea_INGESTED_AT.fafe37ae35": [], "test.solana_models.not_null_silver__nft_sales_opensea__INSERTED_TIMESTAMP.06c60c6c37": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_opensea_TX_ID__MINT.f66dcb74ec": [], "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_TIMESTAMP.7882aa9704": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_bids_yawww_BLOCK_TIMESTAMP__day__2.a84b7c01df": [], "test.solana_models.not_null_silver__nft_bids_yawww_BLOCK_ID.9749097c5b": [], "test.solana_models.not_null_silver__nft_bids_yawww_TX_ID.6ef944c5f0": [], "test.solana_models.not_null_silver__nft_bids_yawww_SUCCEEDED.673964be11": [], "test.solana_models.not_null_silver__nft_bids_yawww_BIDDER.9dd9d8dff8": [], "test.solana_models.not_null_silver__nft_bids_yawww_ACCT_2.c4062e4e6f": [], "test.solana_models.not_null_silver__nft_bids_yawww_BID_AMOUNT.9b0ba7707e": [], "test.solana_models.not_null_silver__nft_bids_yawww__INSERTED_TIMESTAMP.779932a52b": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_bids_yawww_TX_ID.2c013394c9": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SELLER.95475fb609": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1__INSERTED_TIMESTAMP.868714bef2": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT__SELLER.85066a3a10": [], "test.solana_models.not_null_silver__blocks2_BLOCK_ID.1b57625e49": [], "test.solana_models.not_null_silver__blocks2_BLOCK_TIMESTAMP.d27eb04036": [], "test.solana_models.not_null_silver__blocks2_NETWORK.fecf39aef5": [], "test.solana_models.not_null_silver__blocks2_CHAIN_ID.665f1e1503": [], "test.solana_models.not_null_silver__blocks2_BLOCK_HASH.cd38b2ffa4": [], "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_ID.3f8f35b7af": [], "test.solana_models.not_null_silver__blocks2_PREVIOUS_BLOCK_HASH.ae3035b946": [], "test.solana_models.not_null_silver__blocks2__INSERTED_DATE.d069b97c64": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks2_BLOCK_ID.600f932e22": [], "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_TIMESTAMP.8e473b0a82": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_creation_realms_BLOCK_TIMESTAMP__day__5.f018e56096": [], "test.solana_models.not_null_silver__proposal_creation_realms_BLOCK_ID.9af4ef943d": [], "test.solana_models.not_null_silver__proposal_creation_realms_TX_ID.1ac6e10e4b": [], "test.solana_models.not_null_silver__proposal_creation_realms_SUCCEEDED.5bdc0fd83d": [], "test.solana_models.not_null_silver__proposal_creation_realms_INDEX.163253349a": [], "test.solana_models.not_null_silver__proposal_creation_realms_PROGRAM_ID.9e5b4c6744": [], "test.solana_models.not_null_silver__proposal_creation_realms_REALMS_ID.0c95daf7ed": [], "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL.d1899e0b24": [], "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_WRITER.a475a6e153": [], "test.solana_models.not_null_silver__proposal_creation_realms_PROPOSAL_NAME.55dbd6390f": [], "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_TYPE.34d2959fd9": [], "test.solana_models.not_null_silver__proposal_creation_realms_VOTE_OPTIONS.fdfc6d924f": [], "test.solana_models.not_null_silver__proposal_creation_realms__INSERTED_TIMESTAMP.5dd86e0cc4": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_creation_realms_TX_ID.f2872abdee": [], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf": [], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e": [], "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d": [], "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae": [], "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44": [], "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459": [], "test.solana_models.not_null_silver__nft_sales_solport_SELLER.7aef62f7e9": [], "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba": [], "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37": [], "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86": [], "test.solana_models.not_null_silver__nft_sales_solport__INSERTED_TIMESTAMP.5d64f74072": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8": [], "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_TIMESTAMP.0e1373a9ce": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_saber_BLOCK_TIMESTAMP__day__7.4042f35d74": [], "test.solana_models.not_null_silver__gov_actions_saber_BLOCK_ID.e57b17e737": [], "test.solana_models.not_null_silver__gov_actions_saber_TX_ID.b1d3dcd5b7": [], "test.solana_models.not_null_silver__gov_actions_saber_SUCCEEDED.cec72b1c03": [], "test.solana_models.not_null_silver__gov_actions_saber_SIGNER.4d64f40393": [], "test.solana_models.not_null_silver__gov_actions_saber_LOCKER_ACCOUNT.a93b78adaa": [], "test.solana_models.not_null_silver__gov_actions_saber_ESCROW_ACCOUNT.ee8c4796e0": [], "test.solana_models.not_null_silver__gov_actions_saber_MINT.bd58c5033d": [], "test.solana_models.not_null_silver__gov_actions_saber_ACTION.361f79ef61": [], "test.solana_models.not_null_silver__gov_actions_saber_AMOUNT.c10703a914": [], "test.solana_models.not_null_silver__gov_actions_saber__INSERTED_TIMESTAMP.c01fa19e41": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_saber_TX_ID.ce7ee21c9c": [], "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a": [], "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": [], "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884": [], "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9": [], "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413": [], "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0": [], "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695": [], "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e": [], "test.solana_models.not_null_silver__nft_mints__INSERTED_TIMESTAMP.d96edc2cdd": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__MINT__MINT_CURRENCY.83f9ea3f73": [], "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_TIMESTAMP.6ae077e628": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gauges_votes_saber_BLOCK_TIMESTAMP__day__2.fb87b0a75b": [], "test.solana_models.not_null_silver__gauges_votes_saber_BLOCK_ID.2be229f6f0": [], "test.solana_models.not_null_silver__gauges_votes_saber_TX_ID.f58a7640de": [], "test.solana_models.not_null_silver__gauges_votes_saber_SUCCEEDED.0773c5f9cc": [], "test.solana_models.not_null_silver__gauges_votes_saber_VOTER.0aac8d5a72": [], "test.solana_models.not_null_silver__gauges_votes_saber_GAUGE.240b87f396": [], "test.solana_models.not_null_silver__gauges_votes_saber_DELEGATED_SHARES.876c99a9bf": [], "test.solana_models.not_null_silver__gauges_votes_saber_POWER.af1e6ac76c": [], "test.solana_models.not_null_silver__gauges_votes_saber__INSERTED_TIMESTAMP.9aeaff1542": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gauges_votes_saber_TX_ID__VOTER__GAUGE.15f3bd1b81": [], "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60": [], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff": [], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189": [], "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f": [], "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4": [], "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475": [], "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722": [], "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849": [], "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_TIMESTAMP.d0fd8b375a": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__gov_actions_marinade_BLOCK_TIMESTAMP__day__2.44a6e38196": [], "test.solana_models.not_null_silver__gov_actions_marinade_BLOCK_ID.a72b05cd24": [], "test.solana_models.not_null_silver__gov_actions_marinade_TX_ID.647bce8bf6": [], "test.solana_models.not_null_silver__gov_actions_marinade_SUCCEEDED.013f9c87b3": [], "test.solana_models.not_null_silver__gov_actions_marinade_SIGNER.57c76b61ad": [], "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_ACCOUNT.ac4186ba90": [], "test.solana_models.not_null_silver__gov_actions_marinade_LOCKER_NFT.9b22305c25": [], "test.solana_models.not_null_silver__gov_actions_marinade_MINT.2d5ed39add": [], "test.solana_models.not_null_silver__gov_actions_marinade_ACTION.4a1d219ecf": [], "test.solana_models.not_null_silver__gov_actions_marinade_AMOUNT.918ce76ba6": [], "test.solana_models.not_null_silver__gov_actions_marinade__INSERTED_TIMESTAMP.b35d82c58e": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__gov_actions_marinade_TX_ID.67d5c4a9e0": [], "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_TIMESTAMP.ce316551dc": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__proposal_votes_realms_BLOCK_TIMESTAMP__day__2.b84f880b5e": [], "test.solana_models.not_null_silver__proposal_votes_realms_BLOCK_ID.b1d9cb82b9": [], "test.solana_models.not_null_silver__proposal_votes_realms_TX_ID.3bd06898da": [], "test.solana_models.not_null_silver__proposal_votes_realms_SUCCEEDED.0376a2a567": [], "test.solana_models.not_null_silver__proposal_votes_realms_INDEX.37808c3dba": [], "test.solana_models.not_null_silver__proposal_votes_realms_PROGRAM_ID.2f23de7b25": [], "test.solana_models.not_null_silver__proposal_votes_realms_REALMS_ID.3f90a0192f": [], "test.solana_models.not_null_silver__proposal_votes_realms_PROPOSAL.390b7e392d": [], "test.solana_models.not_null_silver__proposal_votes_realms_VOTER.8f724dd0ad": [], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_ACCOUNT.252a5b67e2": [], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_CHOICE.4b3d288d88": [], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_RANK.86e66d9abd": [], "test.solana_models.not_null_silver__proposal_votes_realms_VOTE_WEIGHT.62c96157a7": [], "test.solana_models.not_null_silver__proposal_votes_realms__INSERTED_TIMESTAMP.6a87726450": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__proposal_votes_realms_TX_ID__INDEX.b92bd7c953": [], "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_TIMESTAMP.b165dfae86": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_yawww_BLOCK_TIMESTAMP__day__2.c609719af8": [], "test.solana_models.not_null_silver__nft_sales_yawww_BLOCK_ID.b53822b948": [], "test.solana_models.not_null_silver__nft_sales_yawww_TX_ID.cc4d7cec95": [], "test.solana_models.not_null_silver__nft_sales_yawww_SUCCEEDED.1c07002f13": [], "test.solana_models.not_null_silver__nft_sales_yawww_PROGRAM_ID.bac5a43cf3": [], "test.solana_models.not_null_silver__nft_sales_yawww_PURCHASER.ef8aa381b0": [], "test.solana_models.not_null_silver__nft_sales_yawww_SELLER.b4c48c28e0": [], "test.solana_models.not_null_silver__nft_sales_yawww_MINT.b541ddfd92": [], "test.solana_models.not_null_silver__nft_sales_yawww_SALES_AMOUNT.209049c03c": [], "test.solana_models.not_null_silver__nft_sales_yawww_SALE_TYPE.c14db0d483": [], "test.solana_models.not_null_silver__nft_sales_yawww__INSERTED_TIMESTAMP.8f71fb543a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_yawww_TX_ID.836d894e8e": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_GOVERNANCE_PLATFORM.1c6148c1a5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_TIMESTAMP.cb79e567af": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_BLOCK_ID.3c74143fd3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_TX_ID.a424efa5bc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_SUCCEEDED.c500624a66": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROGRAM_NAME.0cecc44709": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_REALMS_ID.d6f7ce594c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL.aca94a352b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_WRITER.8336328856": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_PROPOSAL_NAME.c028b3f7e8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_TYPE.54b95b9487": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_creation_VOTE_OPTIONS.7df8cc23d3": [], "model.solana_models.bronze__transactions2": ["model.solana_models.silver__transactions2"], "model.solana_models.core__fact_votes_agg_block": ["model.solana_models.solana_share__fact_votes_agg_block", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22"], "model.solana_models.core__fact_staking_lp_actions": ["model.solana_models.solana_share__fact_staking_lp_actions", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7"], "model.solana_models.core__fact_proposal_votes": ["model.solana_models.solana_share__fact_proposal_votes", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID.69f6c939cd", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP.14fda90e1f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM.2cb8a6da8c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME.efb5564020", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL.bd26e9f162", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID.3d82f13fb8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED.a8a02b1128", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID.61c6807300", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER.b4aedc2103", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT.074485b34b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT.b4094d7e9b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE.89d479b8f1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK.ace5c19a48", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT.42dffdb7a0"], "model.solana_models.core__fact_blocks": ["model.solana_models.solana_share__fact_blocks", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da"], "model.solana_models.core__fact_nft_sales": ["model.solana_models.solana_share__fact_nft_sales", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER.4e646f66c0", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16"], "model.solana_models.core__fact_gauges_creates": ["model.solana_models.solana_share__fact_gauges_creates", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID.b790453a41", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP.e10bb18371", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE.3505020721", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER.021b1a23cd", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME.4cbc2d8fab", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER.eb41a65847", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED.0912c5b5e1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID.c646678622", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT.27233d80a9"], "model.solana_models.core__dim_labels": ["model.solana_models.core__ez_staking_lp_actions", "model.solana_models.solana_share__dim_labels", "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8", "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d", "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed"], "model.solana_models.core__fact_nft_mints": ["model.solana_models.solana_share__fact_nft_mints", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1"], "model.solana_models.core__dim_nft_metadata": ["model.solana_models.solana_share__dim_nft_metadata", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231"], "model.solana_models.core__fact_gauges_votes": ["model.solana_models.solana_share__fact_gauges_votes", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT.81c4874581"], "model.solana_models.core__fact_events": ["model.solana_models.solana_share__fact_events", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED.559da89930", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3"], "model.solana_models.core__fact_transfers": ["model.solana_models.solana_share__fact_transfers", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb"], "model.solana_models.core__fact_swaps": ["model.solana_models.solana_share__fact_swaps", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4"], "model.solana_models.core__fact_transactions": ["model.solana_models.solana_share__fact_transactions", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6"], "model.solana_models.core__fact_gov_actions": ["model.solana_models.solana_share__fact_gov_actions", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT.50baab0134", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_GOVERNANCE_PLATFORM.2cb8a6da8c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROGRAM_NAME.efb5564020": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_TIMESTAMP.14fda90e1f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_BLOCK_ID.69f6c939cd": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_TX_ID.61c6807300": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_SUCCEEDED.a8a02b1128": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER.b4aedc2103": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_ACCOUNT.074485b34b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTER_NFT.b4094d7e9b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_PROPOSAL.bd26e9f162": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_REALMS_ID.3d82f13fb8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_CHOICE.89d479b8f1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_RANK.ace5c19a48": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_proposal_votes_VOTE_WEIGHT.42dffdb7a0": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SELLER.4e646f66c0": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_PROGRAM_NAME.4cbc2d8fab": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_TIMESTAMP.e10bb18371": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_BLOCK_ID.b790453a41": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_TX_ID.c646678622": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SUCCEEDED.0912c5b5e1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_SIGNER.eb41a65847": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGE.3505020721": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_GAUGEMEISTER.021b1a23cd": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_creates_VALIDATOR_ACCOUNT.27233d80a9": [], "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": [], "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d": [], "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER_NFT.81c4874581": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_SUCCEEDED.559da89930": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_NFT.50baab0134": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f": [], "source.solana_models.prod.solana_blocks": ["model.solana_models.bronze__blocks"], "source.solana_models.prod.solana_txs": ["model.solana_models.bronze__transactions"], "source.solana_models.crosschain.address_labels": ["model.solana_models.core__dim_labels", "model.solana_models.silver__proposal_creation_realms", "model.solana_models.silver__proposal_votes_realms"], "source.solana_models.shared.prices_v2": ["model.solana_models.silver___prices"], "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827": ["model.solana_models.silver__nft_metadata"], "source.solana_models.solana_external.decoded_instructions_data_api": ["model.solana_models.silver___all_undecoded_instructions_data", "model.solana_models.silver__decoded_instructions_data"], "source.solana_models.solana_external.validator_metadata_api": ["model.solana_models.core__ez_staking_lp_actions", "model.solana_models.silver___all_unknown_stake_vote_accounts"], "source.solana_models.solana_external.stake_account_tx_ids_api": ["model.solana_models.silver___all_unknown_stake_vote_accounts", "model.solana_models.silver___all_unknown_tx_details"], "source.solana_models.solana_external.txs_api": ["model.solana_models.silver___all_unknown_tx_details", "model.solana_models.silver___historical_staking_lp_actions", "model.solana_models.silver___historical_staking_lp_actions", "model.solana_models.silver___historical_staking_lp_actions"], "source.solana_models.solana_external.blocks_api": ["model.solana_models.bronze__blocks2", "model.solana_models.streamline__complete_blocks", "model.solana_models.streamline__complete_blocks"], "source.solana_models.solana_external.block_rewards_api": ["model.solana_models.streamline__complete_block_rewards"], "source.solana_models.solana_external.block_txs_api": ["model.solana_models.bronze__transactions2", "model.solana_models.streamline__complete_block_txs"]}}