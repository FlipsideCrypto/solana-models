{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.1", "generated_at": "2022-04-08T19:56:42.010225Z", "invocation_id": "cd44263c-b9fa-413e-bbd4-634d9e0cdae2", "env": {}, "project_id": "aa409298ed4cba8bed8a1a82eb42bc54", "user_id": "3be3c54b-56d2-4dbe-9c2f-3d41d9eafe36", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.solana_models.core__fact_events": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    index,\n    event_type,\n    program_id,\n    instruction,\n    inner_instruction\nFROM\n    {{ ref('silver__events') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_events"], "unique_id": "model.solana_models.core__fact_events", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_events.sql", "original_file_path": "models/core/core__fact_events.sql", "name": "core__fact_events", "alias": "fact_events", "checksum": {"name": "sha256", "checksum": "ffb5bdb81f71578f41e248720ee07906d1832971e532e8647659352ecd1112ae"}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "An instruction specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_events.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.1447968, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    index,\n    event_type,\n    program_id,\n    instruction,\n    inner_instruction\nFROM\n    SOLANA.silver.events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_events"}, "model.solana_models.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages\nFROM\n    {{ ref('silver__transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_transactions"], "unique_id": "model.solana_models.core__fact_transactions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_transactions.sql", "original_file_path": "models/core/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "47d87e9688360fb197fbcf87534e376e3dd8f3310e017e9e6f124abd557e593d"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_MESSAGES": {"name": "LOG_MESSAGES", "description": "Array of log messages written by the program for this transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_transactions.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.119008, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages\nFROM\n    SOLANA.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_transactions"}, "model.solana_models.core__dim_nft_metadata": {"raw_sql": "{{ \n    config(\n      materialized='view'\n    ) \n}}\n\nSELECT \n    blockchain,\n    contract_address,\n    contract_name,\n    created_at_timestamp,\n    mint,\n    creator_address,\n    creator_name,\n    image_url,\n    project_name,\n    token_id,\n    token_metadata,\n    token_metadata_uri,\n    token_name\nFROM {{ ref('silver__nft_metadata') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__dim_nft_metadata"], "unique_id": "model.solana_models.core__dim_nft_metadata", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__dim_nft_metadata.sql", "original_file_path": "models/core/core__dim_nft_metadata.sql", "name": "core__dim_nft_metadata", "alias": "dim_nft_metadata", "checksum": {"name": "sha256", "checksum": "5704440d975cab994a7a94973fa09ecd73dee9a6f832598f42f7b7e58eeee7c7"}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Solana. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Address unique to an NFT series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "Name of the contract that identifies an NFT series. Example - tcgdragons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT_TIMESTAMP": {"name": "CREATED_AT_TIMESTAMP", "description": "timestamp in UTC that the NFT was minted at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "address provided by the creator of the project where mint payments and secondary market royalties are sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_NAME": {"name": "CREATOR_NAME", "description": "name of the project creator - this can be an individual or a company name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_URL": {"name": "IMAGE_URL", "description": "URL that links to the image on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the project the NFT token belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "Numeric value that identifies the NFT within it's series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "a block of json that describes the traits of an NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA_URI": {"name": "TOKEN_METADATA_URI", "description": "URL that links to the token metadata on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_NAME": {"name": "TOKEN_NAME", "description": "Name of the NFT token - this is unique to token. Example SMB #284", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__dim_nft_metadata.yml", "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.09243, "compiled_sql": "\n\nSELECT \n    blockchain,\n    contract_address,\n    contract_name,\n    created_at_timestamp,\n    mint,\n    creator_address,\n    creator_name,\n    image_url,\n    project_name,\n    token_id,\n    token_metadata,\n    token_metadata_uri,\n    token_name\nFROM SOLANA.silver.nft_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.dim_nft_metadata"}, "model.solana_models.core__fact_staking_lp_actions": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    index,\n    event_type,\n    program_id,\n    signers,\n    account_keys,\n    instruction,\n    inner_instruction,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances\nFROM\n    {{ ref('silver__staking_lp_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_staking_lp_actions"], "unique_id": "model.solana_models.core__fact_staking_lp_actions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_staking_lp_actions.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.sql", "name": "core__fact_staking_lp_actions", "alias": "fact_staking_lp_actions", "checksum": {"name": "sha256", "checksum": "7aae515d68b958643c45eeb049795f1f0c5d965fa2bfd877aac3696394a7666d"}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_staking_lp_actions.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.0618298, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    index,\n    event_type,\n    program_id,\n    signers,\n    account_keys,\n    instruction,\n    inner_instruction,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances\nFROM\n    SOLANA.silver.staking_lp_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_staking_lp_actions"}, "model.solana_models.core__fact_swaps": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    'jupiter aggregator v2' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt AS swap_from_amount,\n    from_mint AS swap_from_mint,\n    to_amt AS swap_to_amount,\n    to_mint AS swap_to_mint\nFROM\n    {{ ref('silver__swaps_jupiter_dex') }}\nUNION\nSELECT\n    'orca' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    {{ ref('silver__swaps_orca_dex') }}\nUNION\nSELECT\n    'raydium v4' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    {{ ref('silver__swaps_raydium_dex') }}\nUNION\nSELECT\n    'saber' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    {{ ref('silver__swaps_saber_dex') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_swaps"], "unique_id": "model.solana_models.core__fact_swaps", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_swaps.sql", "original_file_path": "models/core/core__fact_swaps.sql", "name": "core__fact_swaps", "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "d4e7db4bbf922f2dec1593cc5d50e5c1356977e70d617300053344644197aa57"}, "tags": [], "refs": [["silver__swaps_jupiter_dex"], ["silver__swaps_orca_dex"], ["silver__swaps_raydium_dex"], ["silver__swaps_saber_dex"]], "sources": [], "description": "Records with swaps on specific apps", "columns": {"SWAP_PROGRAM": {"name": "SWAP_PROGRAM", "description": "name of decentralized exchange used to perform the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_AMOUNT": {"name": "SWAP_FROM_AMOUNT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_FROM_MINT": {"name": "SWAP_FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_AMOUNT": {"name": "SWAP_TO_AMOUNT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_TO_MINT": {"name": "SWAP_TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_swaps.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.1593149, "compiled_sql": "\n\nSELECT\n    'jupiter aggregator v2' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt AS swap_from_amount,\n    from_mint AS swap_from_mint,\n    to_amt AS swap_to_amount,\n    to_mint AS swap_to_mint\nFROM\n    SOLANA.silver.swaps_jupiter_dex\nUNION\nSELECT\n    'orca' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    SOLANA.silver.swaps_orca_dex\nUNION\nSELECT\n    'raydium v4' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    SOLANA.silver.swaps_raydium_dex\nUNION\nSELECT\n    'saber' AS swap_program,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amt,\n    from_mint,\n    to_amt,\n    to_mint\nFROM\n    SOLANA.silver.swaps_saber_dex", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_swaps"}, "model.solana_models.core__fact_votes_agg_block": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_timestamp,\n    block_id,\n    num_votes\nFROM\n    {{ ref('silver__votes_agg_block') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_votes_agg_block"], "unique_id": "model.solana_models.core__fact_votes_agg_block", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_votes_agg_block.sql", "original_file_path": "models/core/core__fact_votes_agg_block.sql", "name": "core__fact_votes_agg_block", "alias": "fact_votes_agg_block", "checksum": {"name": "sha256", "checksum": "9cbfbcc5c5826bf93c285b04fe3241fa31cde2223cc2797557676f1291306ffd"}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUM_VOTES": {"name": "NUM_VOTES", "description": "The number of vote events that occurred within the block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_votes_agg_block.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_votes_agg_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.009244, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    num_votes\nFROM\n    SOLANA.silver.votes_agg_block", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_votes_agg_block"}, "model.solana_models.core__fact_nft_mints": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded, \n    program_id,\n    purchaser,  \n    mint_price,\n    mint_currency, \n    mint \nFROM \n    {{ ref('silver__nft_mints') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_nft_mints"], "unique_id": "model.solana_models.core__fact_nft_mints", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_nft_mints.sql", "original_file_path": "models/core/core__fact_nft_mints.sql", "name": "core__fact_nft_mints", "alias": "fact_nft_mints", "checksum": {"name": "sha256", "checksum": "de5ff1daa78b666678ee17dcc38dcfd6c7f9428b3416baf9649106e0ee510c94"}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "Price that it cost to mint the NFT in SOL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_CURRENCY": {"name": "MINT_CURRENCY", "description": "Currency used to pay for the NFT mint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_nft_mints.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.0237591, "compiled_sql": "\n\nSELECT\n    block_timestamp, \n    block_id, \n    tx_id, \n    succeeded, \n    program_id,\n    purchaser,  \n    mint_price,\n    mint_currency, \n    mint \nFROM \n    SOLANA.silver.nft_mints", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_nft_mints"}, "model.solana_models.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_id,\n    block_timestamp, \n    network,\n    chain_id,\n    tx_count,\n    block_height, \n    block_hash, \n    previous_block_id, \n    previous_block_hash\nFROM\n    {{ ref('silver__blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_blocks"], "unique_id": "model.solana_models.core__fact_blocks", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_blocks.sql", "original_file_path": "models/core/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "ea00e1db4b5aa370b772492c67a93440e6ca05104f6d7992ebb9aae3b41c6f1c"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "solana network name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "chain identifier, this will always be solana.  Field is used in joins with crosschain tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "number of transactions within this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "heigh of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "hash of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_ID": {"name": "PREVIOUS_BLOCK_ID", "description": "previous slot value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_HASH": {"name": "PREVIOUS_BLOCK_HASH", "description": "previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_blocks.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.042536, "compiled_sql": "\n\nSELECT \n    block_id,\n    block_timestamp, \n    network,\n    chain_id,\n    tx_count,\n    block_height, \n    block_hash, \n    previous_block_id, \n    previous_block_hash\nFROM\n    SOLANA.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_blocks"}, "model.solana_models.core__fact_gov_actions": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    'saber' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    locker_account,\n    mint,\n    action,\n    amount\nFROM\n    {{ ref('silver__saber_gov_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_gov_actions"], "unique_id": "model.solana_models.core__fact_gov_actions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_gov_actions.sql", "original_file_path": "models/core/core__fact_gov_actions.sql", "name": "core__fact_gov_actions", "alias": "fact_gov_actions", "checksum": {"name": "sha256", "checksum": "dd2107c5524dc9f3e1d5b9dc16396d0d20308572d2bf265493ac1e657064c2ee"}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {"PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "name of solana program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the LOCK or EXIT action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_ACCOUNT": {"name": "LOCKER_ACCOUNT", "description": "Account holding tokens for LOCK or EXIT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Mint being locked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "LOCK or EXIT action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_gov_actions.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.2083788, "compiled_sql": "\n\nSELECT \n    'saber' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    signer,\n    locker_account,\n    mint,\n    action,\n    amount\nFROM\n    SOLANA.silver.saber_gov_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_gov_actions"}, "model.solana_models.core__fact_transfers": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    index,\n    tx_from,\n    tx_to,\n    amount,\n    mint\nFROM\n    {{ ref('silver__transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_transfers"], "unique_id": "model.solana_models.core__fact_transfers", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_transfers.sql", "original_file_path": "models/core/core__fact_transfers.sql", "name": "core__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "d38835426c8c6f0827eb522e06957a5bfaf0342ab5e6cf98a930e4fa0a53eb9e"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "A unique key that identifies the event's position within a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address that initiated an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The wallet address that receives tokens in an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The number of tokens sent during an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_transfers.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.2489312, "compiled_sql": "\n\nSELECT \n    block_timestamp,\n    block_id,\n    tx_id,\n    index,\n    tx_from,\n    tx_to,\n    amount,\n    mint\nFROM\n    SOLANA.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_transfers"}, "model.solana_models.core__fact_gauges_votes": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    'saber' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    gauge,\n    power,\n    delegated_shares\nFROM\n    {{ ref('silver__saber_gauges_votes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_gauges_votes"], "unique_id": "model.solana_models.core__fact_gauges_votes", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_gauges_votes.sql", "original_file_path": "models/core/core__fact_gauges_votes.sql", "name": "core__fact_gauges_votes", "alias": "fact_gauges_votes", "checksum": {"name": "sha256", "checksum": "c3c76fa66ec6086dc87c818a10fbf30ce45648f84075f36ddf694198bddbe2ba"}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {"PROGRAM_NAME": {"name": "PROGRAM_NAME", "description": "name of solana program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address performing the vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Gauge that is being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATED_SHARES": {"name": "DELEGATED_SHARES", "description": "Number of shares delegated to vote for this Gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POWER": {"name": "POWER", "description": "Total voting power of the voter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_gauges_votes.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.230273, "compiled_sql": "\n\nSELECT \n    'saber' as program_name,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    voter,\n    gauge,\n    power,\n    delegated_shares\nFROM\n    SOLANA.silver.saber_gauges_votes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_gauges_votes"}, "model.solana_models.core__fact_nft_sales": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    'magic eden v1' AS marketplace,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    {{ ref('silver__nft_sales_magic_eden_v1') }}\nUNION\nSELECT\n    'magic eden v2',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    {{ ref('silver__nft_sales_magic_eden_v2') }}\n\nUNION\nSELECT\n    'solanart',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    {{ ref('silver__nft_sales_solanart') }}\n\nUNION\nSELECT\n    'solana monkey business marketplace',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    {{ ref('silver__nft_sales_smb') }}\n\nUNION\nSELECT\n    'solport',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    {{ ref('silver__nft_sales_solport') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__fact_nft_sales"], "unique_id": "model.solana_models.core__fact_nft_sales", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__fact_nft_sales.sql", "original_file_path": "models/core/core__fact_nft_sales.sql", "name": "core__fact_nft_sales", "alias": "fact_nft_sales", "checksum": {"name": "sha256", "checksum": "2d9d91e97eff2cffd7c89f6abc69a41638d9db3438e61cc03b3dbfbe878ff3fb"}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"], ["silver__nft_sales_magic_eden_v2"], ["silver__nft_sales_solanart"], ["silver__nft_sales_smb"], ["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__fact_nft_sales.yml", "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.179913, "compiled_sql": "\n\nSELECT\n    'magic eden v1' AS marketplace,\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    SOLANA.silver.nft_sales_magic_eden_v1\nUNION\nSELECT\n    'magic eden v2',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    SOLANA.silver.nft_sales_magic_eden_v2\n\nUNION\nSELECT\n    'solanart',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    SOLANA.silver.nft_sales_solanart\n\nUNION\nSELECT\n    'solana monkey business marketplace',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    SOLANA.silver.nft_sales_smb\n\nUNION\nSELECT\n    'solport',\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    program_id,\n    purchaser,\n    mint,\n    sales_amount\nFROM\n    SOLANA.silver.nft_sales_solport", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.fact_nft_sales"}, "model.solana_models.core__dim_labels": {"raw_sql": "{{ config(\n      materialized='view'\n    ) \n}}\n\nSELECT\n  blockchain, \n  creator, \n  address,\n  l1_label as label_type,\n  l2_label as label_subtype,\n  project_name as label, \n  address_name as address_name\nFROM {{ source(\n        'crosschain',\n        'address_labels'\n    ) }} \nWHERE blockchain = 'solana'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.crosschain.address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "core", "fqn": ["solana_models", "core", "core__dim_labels"], "unique_id": "model.solana_models.core__dim_labels", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "core/core__dim_labels.sql", "original_file_path": "models/core/core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "adc9a0430928eb0abda0549092af056a0f5622a3f58d72a10dc674eaaad469be"}, "tags": [], "refs": [], "sources": [["crosschain", "address_labels"]], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/core/core__dim_labels.yml", "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.196185, "compiled_sql": "\n\nSELECT\n  blockchain, \n  creator, \n  address,\n  l1_label as label_type,\n  l2_label as label_subtype,\n  project_name as label, \n  address_name as address_name\nFROM flipside_prod_db.silver_crosschain.address_labels \nWHERE blockchain = 'solana'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.core.dim_labels"}, "model.solana_models.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT \n    record_id, \n    offset_id AS block_id, \n    block_id AS offset_id, \n    block_timestamp, \n    network, \n    chain_id, \n    tx_count, \n    header, \n    ingested_at\nFROM \n    {{ source(\n      'prod',\n      'solana_blocks'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.prod.solana_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "bronze", "fqn": ["solana_models", "bronze", "bronze__blocks"], "unique_id": "model.solana_models.bronze__blocks", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "90d2d45fb2d9116d1eb2632c59afba2aa2f2947dd2a7c1b5eb8292d04022c194"}, "tags": [], "refs": [], "sources": [["prod", "solana_blocks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447654.8717551, "compiled_sql": "\n\nSELECT \n    record_id, \n    offset_id AS block_id, \n    block_id AS offset_id, \n    block_timestamp, \n    network, \n    chain_id, \n    tx_count, \n    header, \n    ingested_at\nFROM \n    chainwalkers.prod.solana_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.bronze.blocks"}, "model.solana_models.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n   record_id, \n   tx_id, \n   tx_block_index, \n   offset_id AS block_id, \n   block_id AS offset_id, \n   block_timestamp, \n   network, \n   chain_id, \n   tx, \n   ingested_at\nFROM \n    {{ source(\n      'prod',\n      'solana_txs'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.prod.solana_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "bronze", "fqn": ["solana_models", "bronze", "bronze__transactions"], "unique_id": "model.solana_models.bronze__transactions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "8e1aa2f3b26f552ac3686ee3501ae10f68ec3b6a4e59340bb45b69c219a9df91"}, "tags": [], "refs": [], "sources": [["prod", "solana_txs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447654.872885, "compiled_sql": "\n\nSELECT\n   record_id, \n   tx_id, \n   tx_block_index, \n   offset_id AS block_id, \n   block_id AS offset_id, \n   block_timestamp, \n   network, \n   chain_id, \n   tx, \n   ingested_at\nFROM \n    chainwalkers.prod.solana_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.bronze.transactions"}, "model.solana_models.silver___instructions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n) }}\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    e.index,\n    e.value,\n    ingested_at\nFROM\n    {{ ref('silver__transactions') }}\n    t,\n    TABLE(FLATTEN(instructions)) AS e\nWHERE\n    COALESCE(\n        e.value :programId :: STRING,\n        ''\n    ) NOT IN (\n        -- exclude Pyth Oracle programs\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\n    )\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver___instructions"], "unique_id": "model.solana_models.silver___instructions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver___instructions.sql", "original_file_path": "models/silver/silver___instructions.sql", "name": "silver___instructions", "alias": "_instructions", "checksum": {"name": "sha256", "checksum": "277097d23cfe45e270262b5433f59534b21f712339409b46bfc785b44afda437"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the instruction within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "json object that contains the instruction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver___instructions.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1649447655.362077, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    e.index,\n    e.value,\n    ingested_at\nFROM\n    SOLANA.silver.transactions\n    t,\n    TABLE(FLATTEN(instructions)) AS e\nWHERE\n    COALESCE(\n        e.value :programId :: STRING,\n        ''\n    ) NOT IN (\n        -- exclude Pyth Oracle programs\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\n    )\n\n\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver._instructions"}, "model.solana_models.silver__nft_sales_magic_eden_v1": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"CONCAT_WS('-', tx_id, mint)\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH sales_inner_instructions AS (\n\n  SELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    t.succeeded,\n    e.program_id,\n    e.index,\n    COALESCE(\n      i.value :parsed :info :lamports :: NUMBER,\n      0\n    ) AS amount,\n    e.instruction :accounts [0] :: STRING AS purchaser,\n    e.instruction :accounts [1] :: STRING AS nft_account,\n    e.instruction :accounts [2] :: STRING AS nft_account_2,\n    e.ingested_at\n  FROM\n    {{ ref('silver__events') }} e\n    INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = e.tx_id\n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  WHERE\n    program_id = 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8' -- Magic Eden V1 Program ID\n    AND ARRAY_SIZE(\n      inner_instruction :instructions\n    ) > 2\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\npost_token_balances AS (\n  SELECT\n    DISTINCT tx_id,\n    account,\n    mint\n  FROM\n    {{ ref('silver___post_token_balances') }}\n    p\n\n{% if is_incremental() %}\nWHERE\n  p.ingested_at :: DATE >= current_date - 2\n{% endif %}\n)\nSELECT\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  COALESCE(\n    p.mint,\n    p2.mint\n  ) AS mint,\n  s.purchaser,\n  SUM(\n    s.amount\n  ) / pow(\n    10,\n    9\n  ) AS sales_amount,\n  s.ingested_at\nFROM\n  sales_inner_instructions s\n  LEFT OUTER JOIN post_token_balances p\n  ON p.tx_id = s.tx_id\n  AND p.account = s.nft_account\n  LEFT OUTER JOIN post_token_balances p2\n  ON p2.tx_id = s.tx_id\n  AND p2.account = s.nft_account_2\nGROUP BY\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  COALESCE(\n    p.mint,\n    p2.mint\n  ),\n  s.purchaser,\n  s.ingested_at", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_sales_magic_eden_v1"], "unique_id": "model.solana_models.silver__nft_sales_magic_eden_v1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_sales_magic_eden_v1.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.sql", "name": "silver__nft_sales_magic_eden_v1", "alias": "nft_sales_magic_eden_v1", "checksum": {"name": "sha256", "checksum": "7b28fb8eb671d0e5b719ac1c435081b9412270e78e27fb85fdccbe740c85d272"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_sales_magic_eden_v1.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.371165, "compiled_sql": "\n\nWITH sales_inner_instructions AS (\n\n  SELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    t.succeeded,\n    e.program_id,\n    e.index,\n    COALESCE(\n      i.value :parsed :info :lamports :: NUMBER,\n      0\n    ) AS amount,\n    e.instruction :accounts [0] :: STRING AS purchaser,\n    e.instruction :accounts [1] :: STRING AS nft_account,\n    e.instruction :accounts [2] :: STRING AS nft_account_2,\n    e.ingested_at\n  FROM\n    SOLANA.silver.events e\n    INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  WHERE\n    program_id = 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8' -- Magic Eden V1 Program ID\n    AND ARRAY_SIZE(\n      inner_instruction :instructions\n    ) > 2\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\npost_token_balances AS (\n  SELECT\n    DISTINCT tx_id,\n    account,\n    mint\n  FROM\n    SOLANA.silver._post_token_balances\n    p\n\n\nWHERE\n  p.ingested_at :: DATE >= current_date - 2\n\n)\nSELECT\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  COALESCE(\n    p.mint,\n    p2.mint\n  ) AS mint,\n  s.purchaser,\n  SUM(\n    s.amount\n  ) / pow(\n    10,\n    9\n  ) AS sales_amount,\n  s.ingested_at\nFROM\n  sales_inner_instructions s\n  LEFT OUTER JOIN post_token_balances p\n  ON p.tx_id = s.tx_id\n  AND p.account = s.nft_account\n  LEFT OUTER JOIN post_token_balances p2\n  ON p2.tx_id = s.tx_id\n  AND p2.account = s.nft_account_2\nGROUP BY\n  s.block_timestamp,\n  s.block_id,\n  s.tx_id,\n  s.succeeded,\n  s.program_id,\n  COALESCE(\n    p.mint,\n    p2.mint\n  ),\n  s.purchaser,\n  s.ingested_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_sales_magic_eden_v1"}, "model.solana_models.silver__events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['ingested_at::DATE','program_id'],\n  post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH base_i AS (\n  SELECT\n    block_timestamp, \n    block_id, \n    tx_id, \n    index :: INTEGER AS index, \n    value:parsed:type AS event_type, \n    value:programId AS program_id, \n    value, \n    ingested_at\n  FROM {{ ref('silver___instructions') }} \n\n{% if is_incremental() %}\n  WHERE ingested_at >= getdate() - interval '2 days'\n{% endif %}\n), \n\nbase_ii AS (\n  SELECT\n    block_id, \n    tx_id, \n    mapped_instruction_index :: INTEGER AS mapped_instruction_index, \n    value,  \n    ingested_at\n  FROM {{ ref('silver___inner_instructions') }}\n\n{% if is_incremental() %}\n  WHERE ingested_at >= getdate() - interval '2 days'\n{% endif %}\n) \n\nSELECT\n  i.block_timestamp,\n  i.block_id,\n  i.tx_id,\n  i.index,\n  i.event_type :: STRING AS event_type,\n  i.program_id :: STRING AS program_id, \n  i.value AS instruction,\n  ii.value AS inner_instruction,\n  i.ingested_at\nFROM\n  base_i\n  i\n  LEFT OUTER JOIN base_ii\n  ii\n  ON ii.block_id = i.block_id\n  AND ii.tx_id = i.tx_id\n  AND ii.mapped_instruction_index = i.index", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___instructions", "model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE", "program_id"], "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__events"], "unique_id": "model.solana_models.silver__events", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__events.sql", "original_file_path": "models/silver/silver__events.sql", "name": "silver__events", "alias": "events", "checksum": {"name": "sha256", "checksum": "e4114ce7ffc291d6586e1737b84c6dac90d95626ae5ee5119cb422a2408d6792"}, "tags": [], "refs": [["silver___instructions"], ["silver___inner_instructions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "An instruction specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__events.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE", "program_id"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1649447655.4346611, "compiled_sql": "\n\nWITH base_i AS (\n  SELECT\n    block_timestamp, \n    block_id, \n    tx_id, \n    index :: INTEGER AS index, \n    value:parsed:type AS event_type, \n    value:programId AS program_id, \n    value, \n    ingested_at\n  FROM SOLANA.silver._instructions \n\n\n  WHERE ingested_at >= getdate() - interval '2 days'\n\n), \n\nbase_ii AS (\n  SELECT\n    block_id, \n    tx_id, \n    mapped_instruction_index :: INTEGER AS mapped_instruction_index, \n    value,  \n    ingested_at\n  FROM SOLANA.silver._inner_instructions\n\n\n  WHERE ingested_at >= getdate() - interval '2 days'\n\n) \n\nSELECT\n  i.block_timestamp,\n  i.block_id,\n  i.tx_id,\n  i.index,\n  i.event_type :: STRING AS event_type,\n  i.program_id :: STRING AS program_id, \n  i.value AS instruction,\n  ii.value AS inner_instruction,\n  i.ingested_at\nFROM\n  base_i\n  i\n  LEFT OUTER JOIN base_ii\n  ii\n  ON ii.block_id = i.block_id\n  AND ii.tx_id = i.tx_id\n  AND ii.mapped_instruction_index = i.index", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.events"}, "model.solana_models.silver__nft_sales_smb": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"tx_id\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH base_table AS (\n    SELECT \n        e.block_timestamp, \n        e.block_id, \n        e.tx_id, \n        t.succeeded, \n        e.program_id, \n        instruction :accounts[0] :: STRING AS acct_1, \n        instruction :accounts[1] :: STRING AS mint, \n        e.ingested_at\n    FROM {{ ref('silver__events') }} e\n    \n    INNER JOIN {{ ref('silver__transactions') }} t\n    ON t.tx_id = e.tx_id \n  \n    WHERE program_id = 'J7RagMKwSD5zJSbRQZU56ypHUtux8LRDkUpAPSKH4WPp' -- solana monke business marketplace\n\n    {% if is_incremental() %}\n        AND e.ingested_at :: DATE >= current_date - 2\n        AND t.ingested_at :: DATE >= current_date - 2\n    {% endif %}\n), \n\nprice AS (\n    SELECT \n        b.tx_id, \n        e.instruction :parsed :info :lamports :: NUMBER AS amount \n    FROM {{ ref('silver__events') }} e\n  \n    INNER JOIN base_table b \n    ON e.tx_id = b.tx_id \n    \n    WHERE e.event_type = 'transfer'\n\n    {% if is_incremental() %}\n        AND b.ingested_at :: DATE >= current_date - 2\n    {% endif %}\n) \n\nSELECT \n     b.block_timestamp, \n     b.block_id, \n     b.tx_id, \n     b.succeeded, \n     b.program_id, \n     b.mint, \n     b.acct_1 AS purchaser, \n     p.amount / POW(10,9) AS sales_amount, \n     b.ingested_at\nFROM base_table b\n\nINNER JOIN price p\nON b.tx_id = p.tx_id\n\nWHERE p.amount <> 0 -- To ignore internal wallet transfers on the marketplace\nAND b.mint <> 'So11111111111111111111111111111111111111112'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "tx_id", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_sales_smb"], "unique_id": "model.solana_models.silver__nft_sales_smb", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_sales_smb.sql", "original_file_path": "models/silver/silver__nft_sales_smb.sql", "name": "silver__nft_sales_smb", "alias": "nft_sales_smb", "checksum": {"name": "sha256", "checksum": "8bab54c171470b5302dbe59ad72c5985df413d1105c597e24a4911ff96e388d3"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_sales_smb.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.4209542, "compiled_sql": "\n\nWITH base_table AS (\n    SELECT \n        e.block_timestamp, \n        e.block_id, \n        e.tx_id, \n        t.succeeded, \n        e.program_id, \n        instruction :accounts[0] :: STRING AS acct_1, \n        instruction :accounts[1] :: STRING AS mint, \n        e.ingested_at\n    FROM SOLANA.silver.events e\n    \n    INNER JOIN SOLANA.silver.transactions t\n    ON t.tx_id = e.tx_id \n  \n    WHERE program_id = 'J7RagMKwSD5zJSbRQZU56ypHUtux8LRDkUpAPSKH4WPp' -- solana monke business marketplace\n\n    \n        AND e.ingested_at :: DATE >= current_date - 2\n        AND t.ingested_at :: DATE >= current_date - 2\n    \n), \n\nprice AS (\n    SELECT \n        b.tx_id, \n        e.instruction :parsed :info :lamports :: NUMBER AS amount \n    FROM SOLANA.silver.events e\n  \n    INNER JOIN base_table b \n    ON e.tx_id = b.tx_id \n    \n    WHERE e.event_type = 'transfer'\n\n    \n        AND b.ingested_at :: DATE >= current_date - 2\n    \n) \n\nSELECT \n     b.block_timestamp, \n     b.block_id, \n     b.tx_id, \n     b.succeeded, \n     b.program_id, \n     b.mint, \n     b.acct_1 AS purchaser, \n     p.amount / POW(10,9) AS sales_amount, \n     b.ingested_at\nFROM base_table b\n\nINNER JOIN price p\nON b.tx_id = p.tx_id\n\nWHERE p.amount <> 0 -- To ignore internal wallet transfers on the marketplace\nAND b.mint <> 'So11111111111111111111111111111111111111112'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_sales_smb"}, "model.solana_models.silver__nft_sales_magic_eden_v2": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_id\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH txs AS (\n\n    SELECT\n        e.tx_id,\n        t.succeeded,\n        MAX(INDEX) AS max_event_index\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        program_id = 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K' -- Magic Eden V2 Program ID\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\nGROUP BY\n    1,\n    2\nHAVING\n    COUNT(\n        e.tx_id\n    ) >= 2\n),\nbase_tmp AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        t.succeeded,\n        e.index AS event_index,\n        i.index AS inner_index,\n        e.program_id,\n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER,\n            0\n        ) AS amount,\n        instruction :accounts [7] :: STRING AS nft_account,\n        instruction :accounts [0] :: STRING AS purchaser,\n        i.value :parsed :type :: STRING AS inner_instruction_type,\n        LAG(inner_instruction_type) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                inner_index\n        ) AS preceding_inner_instruction_type,\n        -- some mints do not map to a token account because of post purchase transfers within same transaction...need to use this when it is available\n        LAST_VALUE(\n            i.value :parsed :info :mint :: STRING ignore nulls\n        ) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                inner_index\n        ) AS nft_account_mint,\n        ingested_at\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN txs t\n        ON t.tx_id = e.tx_id\n        AND t.max_event_index = e.index\n        AND ARRAY_SIZE(\n            e.inner_instruction :instructions\n        ) > 1\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        (\n            (\n                amount <> 0\n                AND inner_instruction_type = 'transfer'\n            )\n            OR inner_instruction_type = 'create'\n        )\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nbase AS (\n    SELECT\n        *\n    FROM\n        base_tmp\n    WHERE\n        inner_instruction_type = 'transfer'\n        AND COALESCE(\n            preceding_inner_instruction_type,\n            ''\n        ) <> 'create'\n),\npost_token_balances AS (\n    SELECT\n        DISTINCT tx_id,\n        account,\n        mint\n    FROM\n        {{ ref('silver___post_token_balances') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n)\nSELECT\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    COALESCE(\n        b.nft_account_mint,\n        p.mint\n    ) AS mint,\n    b.purchaser,\n    SUM(\n        b.amount\n    ) / pow(\n        10,\n        9\n    ) AS sales_amount,\n    b.ingested_at\nFROM\n    base b\n    LEFT OUTER JOIN post_token_balances p\n    ON p.tx_id = b.tx_id\n    AND p.account = b.nft_account\nGROUP BY\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    COALESCE(\n        b.nft_account_mint,\n        p.mint\n    ),\n    b.purchaser,\n    b.ingested_at", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "tx_id", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_sales_magic_eden_v2"], "unique_id": "model.solana_models.silver__nft_sales_magic_eden_v2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_sales_magic_eden_v2.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.sql", "name": "silver__nft_sales_magic_eden_v2", "alias": "nft_sales_magic_eden_v2", "checksum": {"name": "sha256", "checksum": "9248a2339f5394f0608e5bbf335524df21c776752e2f1b00f7de377c5e78131c"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"], ["silver___post_token_balances"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_sales_magic_eden_v2.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.407016, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        e.tx_id,\n        t.succeeded,\n        MAX(INDEX) AS max_event_index\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        program_id = 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K' -- Magic Eden V2 Program ID\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\nGROUP BY\n    1,\n    2\nHAVING\n    COUNT(\n        e.tx_id\n    ) >= 2\n),\nbase_tmp AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        t.succeeded,\n        e.index AS event_index,\n        i.index AS inner_index,\n        e.program_id,\n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER,\n            0\n        ) AS amount,\n        instruction :accounts [7] :: STRING AS nft_account,\n        instruction :accounts [0] :: STRING AS purchaser,\n        i.value :parsed :type :: STRING AS inner_instruction_type,\n        LAG(inner_instruction_type) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                inner_index\n        ) AS preceding_inner_instruction_type,\n        -- some mints do not map to a token account because of post purchase transfers within same transaction...need to use this when it is available\n        LAST_VALUE(\n            i.value :parsed :info :mint :: STRING ignore nulls\n        ) over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                inner_index\n        ) AS nft_account_mint,\n        ingested_at\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN txs t\n        ON t.tx_id = e.tx_id\n        AND t.max_event_index = e.index\n        AND ARRAY_SIZE(\n            e.inner_instruction :instructions\n        ) > 1\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        (\n            (\n                amount <> 0\n                AND inner_instruction_type = 'transfer'\n            )\n            OR inner_instruction_type = 'create'\n        )\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nbase AS (\n    SELECT\n        *\n    FROM\n        base_tmp\n    WHERE\n        inner_instruction_type = 'transfer'\n        AND COALESCE(\n            preceding_inner_instruction_type,\n            ''\n        ) <> 'create'\n),\npost_token_balances AS (\n    SELECT\n        DISTINCT tx_id,\n        account,\n        mint\n    FROM\n        SOLANA.silver._post_token_balances\n\n\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n\n)\nSELECT\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    COALESCE(\n        b.nft_account_mint,\n        p.mint\n    ) AS mint,\n    b.purchaser,\n    SUM(\n        b.amount\n    ) / pow(\n        10,\n        9\n    ) AS sales_amount,\n    b.ingested_at\nFROM\n    base b\n    LEFT OUTER JOIN post_token_balances p\n    ON p.tx_id = b.tx_id\n    AND p.account = b.nft_account\nGROUP BY\n    b.block_timestamp,\n    b.block_id,\n    b.tx_id,\n    b.succeeded,\n    b.program_id,\n    COALESCE(\n        b.nft_account_mint,\n        p.mint\n    ),\n    b.purchaser,\n    b.ingested_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_sales_magic_eden_v2"}, "model.solana_models.silver___post_token_balances": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n) }}\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    b.index,\n    b.value :accountIndex :: INTEGER AS account_index,\n    t.account_keys [account_index] :pubkey :: STRING AS account,\n    b.value :mint :: STRING AS mint,\n    b.value :owner :: STRING AS owner,\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\n    b.value :uiTokenAmount :decimals AS DECIMAL,\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\n    ingested_at\nFROM\n    {{ ref('silver__transactions') }}\n    t,\n    TABLE(FLATTEN(post_token_balances)) b\n{% if is_incremental() %}\nWHERE\n    ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver___post_token_balances"], "unique_id": "model.solana_models.silver___post_token_balances", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver___post_token_balances.sql", "original_file_path": "models/silver/silver___post_token_balances.sql", "name": "silver___post_token_balances", "alias": "_post_token_balances", "checksum": {"name": "sha256", "checksum": "10af90c7598d12010dee379c5cdaa17c8dd4712811d72f4a3b220df400d54f03"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the post token balance entry within the array for a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_INDEX": {"name": "ACCOUNT_INDEX", "description": "Location corresponding to the index in the account_keys array", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "Address of the owner of the token account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Number of decimals in the token value, need to divide amount by 10^decimal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNT": {"name": "UIAMOUNT", "description": "Amount of the token in the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNTSTRING": {"name": "UIAMOUNTSTRING", "description": "Amount of the token in the transaction in string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver___post_token_balances.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1649447655.4766269, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    b.index,\n    b.value :accountIndex :: INTEGER AS account_index,\n    t.account_keys [account_index] :pubkey :: STRING AS account,\n    b.value :mint :: STRING AS mint,\n    b.value :owner :: STRING AS owner,\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\n    b.value :uiTokenAmount :decimals AS DECIMAL,\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\n    ingested_at\nFROM\n    SOLANA.silver.transactions\n    t,\n    TABLE(FLATTEN(post_token_balances)) b\n\nWHERE\n    ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver._post_token_balances"}, "model.solana_models.silver__swaps_jupiter_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH jupiter_dex_txs AS (\n\n    SELECT\n        DISTINCT i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        t.fee,\n        t.succeeded,\n        t.signers\n    FROM\n        {{ ref('silver___instructions') }}\n        i\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = i.tx_id\n    WHERE\n        i.value :programId :: STRING = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo' -- jupiter aggregator v2\n        AND i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\n\n{% if is_incremental() %}\nAND i.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        jupiter_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index DESC)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        {{ ref('silver___post_token_balances') }}\n        b\n        INNER JOIN jupiter_dex_txs t\n        ON t.tx_id = b.tx_id\n\n{% if is_incremental() %}\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN jupiter_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) <> '11111111111111111111111111111111'\n        AND e.program_id = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo'\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___instructions", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__swaps_jupiter_dex"], "unique_id": "model.solana_models.silver__swaps_jupiter_dex", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__swaps_jupiter_dex.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.sql", "name": "silver__swaps_jupiter_dex", "alias": "swaps_jupiter_dex", "checksum": {"name": "sha256", "checksum": "6ac0c04300bb4af04789d2cf72aaa53e336dde0817125732de179f13e1896ba2"}, "tags": [], "refs": [["silver___instructions"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__swaps_jupiter_dex.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.461762, "compiled_sql": "\n\nWITH jupiter_dex_txs AS (\n\n    SELECT\n        DISTINCT i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        t.fee,\n        t.succeeded,\n        t.signers\n    FROM\n        SOLANA.silver._instructions\n        i\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = i.tx_id\n    WHERE\n        i.value :programId :: STRING = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo' -- jupiter aggregator v2\n        AND i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\n\n\nAND i.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        jupiter_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index DESC)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA.silver._post_token_balances\n        b\n        INNER JOIN jupiter_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN jupiter_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) <> '11111111111111111111111111111111'\n        AND e.program_id = 'JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo'\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.swaps_jupiter_dex"}, "model.solana_models.silver__transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        tx :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN IS_NULL_VALUE(\n                tx :meta :err\n            ) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        tx :transaction :message :accountKeys :: ARRAY AS account_keys,\n        tx :meta :preBalances :: ARRAY AS pre_balances,\n        tx :meta :postBalances :: ARRAY AS post_balances,\n        tx :meta :preTokenBalances :: ARRAY AS pre_token_balances,\n        tx :meta :postTokenBalances :: ARRAY AS post_token_balances,\n        tx :transaction :message :instructions :: ARRAY AS instructions,\n        tx :meta :innerInstructions :: ARRAY AS inner_instructions,\n        tx :meta :logMessages :: ARRAY AS log_messages,\n        ingested_at\n    FROM\n        {{ ref('bronze__transactions') }}\n        t\n    WHERE\n        COALESCE(\n            tx :transaction :message :instructions [0] :programId :: STRING,\n            ''\n        ) <> 'Vote111111111111111111111111111111111111111'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n{% endif %}\n),\ntrans_tmp AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        b.tx_id,\n        recent_block_hash,\n        fee,\n        succeeded,\n        account_keys,\n        pre_balances,\n        post_balances,\n        pre_token_balances,\n        post_token_balances,\n        instructions,\n        inner_instructions,\n        log_messages,\n        ingested_at\n    FROM\n        base b \n        qualify(ROW_NUMBER() over(PARTITION BY b.block_id, b.tx_id\n    ORDER BY\n        b.ingested_at DESC)) = 1\n),\nsigners_flattened AS (\n    SELECT\n        b.tx_id,\n        A.index AS signer_index,\n        A.value :pubkey :: STRING AS acct\n    FROM\n        trans_tmp b,\n        TABLE(FLATTEN(b.account_keys)) A\n    WHERE\n        A.value :signer = TRUE\n),\nsigners_arr AS (\n    SELECT\n        tx_id,\n        ARRAY_AGG(acct) within GROUP (\n            ORDER BY\n                signer_index\n        ) AS signers\n    FROM\n        signers_flattened\n    GROUP BY\n        1\n)\nSELECT\n    block_timestamp,\n    block_id,\n    b.tx_id,\n    recent_block_hash,\n    s.signers AS signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages,\n    ingested_at\nFROM\n    trans_tmp b\n    LEFT OUTER JOIN signers_arr s\n    ON b.tx_id = s.tx_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__transactions"], "unique_id": "model.solana_models.silver__transactions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "c395b7d3d35e1132c591b7e0b7682f695e2da691470cc85fb822c5afe7367f55"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_MESSAGES": {"name": "LOG_MESSAGES", "description": "Array of log messages written by the program for this transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1649447655.446892, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        tx :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN IS_NULL_VALUE(\n                tx :meta :err\n            ) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        tx :transaction :message :accountKeys :: ARRAY AS account_keys,\n        tx :meta :preBalances :: ARRAY AS pre_balances,\n        tx :meta :postBalances :: ARRAY AS post_balances,\n        tx :meta :preTokenBalances :: ARRAY AS pre_token_balances,\n        tx :meta :postTokenBalances :: ARRAY AS post_token_balances,\n        tx :transaction :message :instructions :: ARRAY AS instructions,\n        tx :meta :innerInstructions :: ARRAY AS inner_instructions,\n        tx :meta :logMessages :: ARRAY AS log_messages,\n        ingested_at\n    FROM\n        SOLANA.bronze.transactions\n        t\n    WHERE\n        COALESCE(\n            tx :transaction :message :instructions [0] :programId :: STRING,\n            ''\n        ) <> 'Vote111111111111111111111111111111111111111'\n\n\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n\n),\ntrans_tmp AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        b.tx_id,\n        recent_block_hash,\n        fee,\n        succeeded,\n        account_keys,\n        pre_balances,\n        post_balances,\n        pre_token_balances,\n        post_token_balances,\n        instructions,\n        inner_instructions,\n        log_messages,\n        ingested_at\n    FROM\n        base b \n        qualify(ROW_NUMBER() over(PARTITION BY b.block_id, b.tx_id\n    ORDER BY\n        b.ingested_at DESC)) = 1\n),\nsigners_flattened AS (\n    SELECT\n        b.tx_id,\n        A.index AS signer_index,\n        A.value :pubkey :: STRING AS acct\n    FROM\n        trans_tmp b,\n        TABLE(FLATTEN(b.account_keys)) A\n    WHERE\n        A.value :signer = TRUE\n),\nsigners_arr AS (\n    SELECT\n        tx_id,\n        ARRAY_AGG(acct) within GROUP (\n            ORDER BY\n                signer_index\n        ) AS signers\n    FROM\n        signers_flattened\n    GROUP BY\n        1\n)\nSELECT\n    block_timestamp,\n    block_id,\n    b.tx_id,\n    recent_block_hash,\n    s.signers AS signers,\n    fee,\n    succeeded,\n    account_keys,\n    pre_balances,\n    post_balances,\n    pre_token_balances,\n    post_token_balances,\n    instructions,\n    inner_instructions,\n    log_messages,\n    ingested_at\nFROM\n    trans_tmp b\n    LEFT OUTER JOIN signers_arr s\n    ON b.tx_id = s.tx_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.transactions"}, "model.solana_models.silver__transfers": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n) }}\n\nWITH base_transfers AS (\n\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        e.instruction,\n        e.ingested_at\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = e.tx_id\n\n{% if is_incremental() %}\nAND t.ingested_at >= CURRENT_DATE - 2\n{% endif %}\nWHERE\n    e.event_type IN (\n        'transfer',\n        'transferChecked'\n    )\n    AND t.succeeded = TRUE\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nbase_post_token_balances AS (\n    SELECT\n        tx_id,\n        owner,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        {{ ref('silver___post_token_balances') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nbase_pre_token_balances AS (\n    SELECT\n        tx_id,\n        owner,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        {{ ref('silver___pre_token_balances') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nspl_transfers AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        COALESCE(\n            p.owner,\n            e.instruction :parsed :info :authority :: STRING\n        ) AS tx_from,\n        COALESCE(\n            p2.owner,\n            instruction :parsed :info :destination :: STRING\n        ) AS tx_to,\n        COALESCE(\n            e.instruction :parsed :info :tokenAmount: decimals,\n            p.decimal,\n            p2.decimal,\n            p3.decimal,\n            p4.decimal\n        ) AS decimal_adj,\n        COALESCE (\n            e.instruction :parsed :info :amount :: INTEGER,\n            e.instruction :parsed :info :tokenAmount :amount :: INTEGER\n        ) / pow(\n            10,\n            decimal_adj\n        ) AS amount,\n        COALESCE(\n            p.mint,\n            p2.mint,\n            p3.mint,\n            p4.mint\n        ) AS mint,\n        e.ingested_at\n    FROM\n        base_transfers e\n        LEFT OUTER JOIN base_pre_token_balances p\n        ON e.tx_id = p.tx_id\n        AND e.instruction :parsed :info :source :: STRING = p.account\n        LEFT OUTER JOIN base_post_token_balances p2\n        ON e.tx_id = p2.tx_id\n        AND e.instruction :parsed :info :destination :: STRING = p2.account\n        LEFT OUTER JOIN base_post_token_balances p3\n        ON e.tx_id = p3.tx_id\n        AND e.instruction :parsed :info :source :: STRING = p3.account\n        LEFT OUTER JOIN base_pre_token_balances p4\n        ON e.tx_id = p4.tx_id\n        AND e.instruction :parsed :info :destination :: STRING = p4.account\n    WHERE\n        e.instruction :parsed :info :authority :: STRING IS NOT NULL\n),\nsol_transfers AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        instruction :parsed :info :source :: STRING AS tx_from,\n        instruction :parsed :info :destination :: STRING AS tx_to,\n        instruction :parsed :info :lamports / pow(\n            10,\n            9\n        ) AS amount,\n        'So11111111111111111111111111111111111111112' AS mint,\n        e.ingested_at\n    FROM\n        base_transfers e\n    WHERE\n        instruction :parsed :info :lamports :: STRING IS NOT NULL\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    tx_from,\n    tx_to,\n    amount,\n    mint,\n    ingested_at\nFROM\n    spl_transfers\nUNION\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    tx_from,\n    tx_to,\n    amount,\n    mint,\n    ingested_at\nFROM\n    sol_transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__transfers"], "unique_id": "model.solana_models.silver__transfers", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "e988a141043921c8041117e988c1c3c54a58eaf7b016275497f396b3e9bdd01b"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"], ["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "A unique key that identifies the event's position within a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address that initiated an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The wallet address that receives tokens in an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The number of tokens sent during an event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1649447655.492238, "compiled_sql": "\n\nWITH base_transfers AS (\n\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        e.instruction,\n        e.ingested_at\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n\n\nAND t.ingested_at >= CURRENT_DATE - 2\n\nWHERE\n    e.event_type IN (\n        'transfer',\n        'transferChecked'\n    )\n    AND t.succeeded = TRUE\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nbase_post_token_balances AS (\n    SELECT\n        tx_id,\n        owner,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        SOLANA.silver._post_token_balances\n\n\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nbase_pre_token_balances AS (\n    SELECT\n        tx_id,\n        owner,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        SOLANA.silver._pre_token_balances\n\n\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nspl_transfers AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        COALESCE(\n            p.owner,\n            e.instruction :parsed :info :authority :: STRING\n        ) AS tx_from,\n        COALESCE(\n            p2.owner,\n            instruction :parsed :info :destination :: STRING\n        ) AS tx_to,\n        COALESCE(\n            e.instruction :parsed :info :tokenAmount: decimals,\n            p.decimal,\n            p2.decimal,\n            p3.decimal,\n            p4.decimal\n        ) AS decimal_adj,\n        COALESCE (\n            e.instruction :parsed :info :amount :: INTEGER,\n            e.instruction :parsed :info :tokenAmount :amount :: INTEGER\n        ) / pow(\n            10,\n            decimal_adj\n        ) AS amount,\n        COALESCE(\n            p.mint,\n            p2.mint,\n            p3.mint,\n            p4.mint\n        ) AS mint,\n        e.ingested_at\n    FROM\n        base_transfers e\n        LEFT OUTER JOIN base_pre_token_balances p\n        ON e.tx_id = p.tx_id\n        AND e.instruction :parsed :info :source :: STRING = p.account\n        LEFT OUTER JOIN base_post_token_balances p2\n        ON e.tx_id = p2.tx_id\n        AND e.instruction :parsed :info :destination :: STRING = p2.account\n        LEFT OUTER JOIN base_post_token_balances p3\n        ON e.tx_id = p3.tx_id\n        AND e.instruction :parsed :info :source :: STRING = p3.account\n        LEFT OUTER JOIN base_pre_token_balances p4\n        ON e.tx_id = p4.tx_id\n        AND e.instruction :parsed :info :destination :: STRING = p4.account\n    WHERE\n        e.instruction :parsed :info :authority :: STRING IS NOT NULL\n),\nsol_transfers AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        e.index,\n        instruction :parsed :info :source :: STRING AS tx_from,\n        instruction :parsed :info :destination :: STRING AS tx_to,\n        instruction :parsed :info :lamports / pow(\n            10,\n            9\n        ) AS amount,\n        'So11111111111111111111111111111111111111112' AS mint,\n        e.ingested_at\n    FROM\n        base_transfers e\n    WHERE\n        instruction :parsed :info :lamports :: STRING IS NOT NULL\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    tx_from,\n    tx_to,\n    amount,\n    mint,\n    ingested_at\nFROM\n    spl_transfers\nUNION\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    tx_from,\n    tx_to,\n    amount,\n    mint,\n    ingested_at\nFROM\n    sol_transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.transfers"}, "model.solana_models.silver__swaps_saber_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH saber_dex_txs AS (\n\n    SELECT\n        DISTINCT t.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.succeeded,\n        t.signers,\n        e.program_id\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        saber_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        {{ ref('silver___post_token_balances') }}\n        b\n        INNER JOIN saber_dex_txs t\n        ON t.tx_id = b.tx_id\n\n{% if is_incremental() %}\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN saber_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND e.program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__swaps_saber_dex"], "unique_id": "model.solana_models.silver__swaps_saber_dex", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__swaps_saber_dex.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.sql", "name": "silver__swaps_saber_dex", "alias": "swaps_saber_dex", "checksum": {"name": "sha256", "checksum": "0f7ec55c7665b3f4b048784b121e88d0ff35bb3531f7cbaa8fab855abd93fc5b"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__swaps_saber_dex.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.265611, "compiled_sql": "\n\nWITH saber_dex_txs AS (\n\n    SELECT\n        DISTINCT t.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.succeeded,\n        t.signers,\n        e.program_id\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        saber_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA.silver._post_token_balances\n        b\n        INNER JOIN saber_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN saber_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND e.program_id = 'Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t'\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.swaps_saber_dex"}, "model.solana_models.silver__nft_sales_solanart": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"CONCAT_WS('-', tx_id, mint)\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH sales_inner_instructions AS (\n    SELECT \n        e.block_timestamp, \n        e.block_id, \n        e.tx_id, \n        t.succeeded, \n        e.program_id, \n        e.index, \n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER, \n            0\n        ) AS amount, \n        e.instruction :accounts [0] :: STRING AS purchaser, \n        e.instruction :accounts [1] :: STRING AS nft_account, \n        e.ingested_at \n    FROM {{ ref('silver__events') }} e\n    INNER JOIN {{ ref('silver__transactions') }} t\n    ON t.tx_id = e.tx_id\n  \n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  \n    WHERE e.program_id = 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz' -- Solanart Program ID \n\n    {% if is_incremental() %}\n        AND e.ingested_at :: DATE >= current_date - 2\n        AND t.ingested_at :: DATE >= current_date - 2\n    {% endif %}\n   \n), \n\npost_token_balances AS (\n    SELECT \n        tx_id, \n        account, \n        mint \n    FROM {{ ref('silver___post_token_balances') }} p \n    WHERE amount <> 0 -- Removes random account transfers with no NFT \n\n    {% if is_incremental() %}\n        AND p.ingested_at :: DATE >= current_date - 2\n    {% endif %}\n)\n\nSELECT \n    s.block_timestamp, \n    s.block_id, \n    s.tx_id, \n    s.succeeded, \n    s.program_id, \n    p.mint AS mint, \n    s.purchaser, \n    SUM(s.amount) / POW(10,9) AS sales_amount, \n    s.ingested_at\nFROM sales_inner_instructions s\n\nINNER JOIN post_token_balances p\nON s.tx_id = p.tx_id AND s.nft_account = p.account\n\nGROUP BY s.block_timestamp, s.block_id, s.tx_id, s.succeeded, s.program_id, p.mint, s.purchaser, s.ingested_at\n\nHAVING SUM(s.amount) > 0 -- Removes transfers", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_sales_solanart"], "unique_id": "model.solana_models.silver__nft_sales_solanart", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_sales_solanart.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.sql", "name": "silver__nft_sales_solanart", "alias": "nft_sales_solanart", "checksum": {"name": "sha256", "checksum": "80c87411cbf93114ea60edc991dff74eb11bc77541788c9d3fd164209dc6f9d7"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_sales_solanart.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.290313, "compiled_sql": "\n\nWITH sales_inner_instructions AS (\n    SELECT \n        e.block_timestamp, \n        e.block_id, \n        e.tx_id, \n        t.succeeded, \n        e.program_id, \n        e.index, \n        COALESCE(\n            i.value :parsed :info :lamports :: NUMBER, \n            0\n        ) AS amount, \n        e.instruction :accounts [0] :: STRING AS purchaser, \n        e.instruction :accounts [1] :: STRING AS nft_account, \n        e.ingested_at \n    FROM SOLANA.silver.events e\n    INNER JOIN SOLANA.silver.transactions t\n    ON t.tx_id = e.tx_id\n  \n    LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  \n    WHERE e.program_id = 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz' -- Solanart Program ID \n\n    \n        AND e.ingested_at :: DATE >= current_date - 2\n        AND t.ingested_at :: DATE >= current_date - 2\n    \n   \n), \n\npost_token_balances AS (\n    SELECT \n        tx_id, \n        account, \n        mint \n    FROM SOLANA.silver._post_token_balances p \n    WHERE amount <> 0 -- Removes random account transfers with no NFT \n\n    \n        AND p.ingested_at :: DATE >= current_date - 2\n    \n)\n\nSELECT \n    s.block_timestamp, \n    s.block_id, \n    s.tx_id, \n    s.succeeded, \n    s.program_id, \n    p.mint AS mint, \n    s.purchaser, \n    SUM(s.amount) / POW(10,9) AS sales_amount, \n    s.ingested_at\nFROM sales_inner_instructions s\n\nINNER JOIN post_token_balances p\nON s.tx_id = p.tx_id AND s.nft_account = p.account\n\nGROUP BY s.block_timestamp, s.block_id, s.tx_id, s.succeeded, s.program_id, p.mint, s.purchaser, s.ingested_at\n\nHAVING SUM(s.amount) > 0 -- Removes transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_sales_solanart"}, "model.solana_models.silver__saber_gauges_votes": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', tx_id, voter, gauge)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH all_saber_gauges_events AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        index,\n        instruction\n    FROM\n        {{ ref('silver__events') }}\n    WHERE\n        program_id = 'GaugesLJrnVjNNWLReiw3Q7xQhycSBRgeHGTMDUaX231'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ntx_logs AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.value :: STRING AS message,\n        CASE\n            WHEN l.value LIKE 'Program log: Instruction:%' THEN 'instruction_name'\n            ELSE 'vote'\n        END AS log_type,\n        conditional_true_event(\n            l.value LIKE 'Program log: Instruction:%'\n        ) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index\n        ) - 1 AS event_index\n    FROM\n        {{ ref('silver__transactions') }}\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                all_saber_gauges_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        (\n            l.value :: STRING LIKE 'Program log: Instruction:%'\n            OR l.value :: STRING LIKE 'Program log: power:%'\n        )\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    e.instruction :accounts [7] :: STRING AS voter,\n    e.instruction :accounts [1] :: STRING AS gauge,\n    REPLACE(\n        REGEXP_SUBSTR(\n            l.message,\n            'Program log: power: \\\\d+'\n        ),\n        'Program log: power: '\n    ) :: NUMBER AS power,\n    REPLACE(\n        REGEXP_SUBSTR(\n            l.message,\n            'shares: \\\\d+'\n        ),\n        'shares: '\n    ) :: NUMBER AS delegated_shares\nFROM\n    all_saber_gauges_events e\n    LEFT OUTER JOIN tx_logs l\n    ON l.tx_id = e.tx_id\n    AND e.index = l.event_index\nWHERE\n    l.log_type = 'vote'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', tx_id, voter, gauge)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__saber_gauges_votes"], "unique_id": "model.solana_models.silver__saber_gauges_votes", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__saber_gauges_votes.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.sql", "name": "silver__saber_gauges_votes", "alias": "saber_gauges_votes", "checksum": {"name": "sha256", "checksum": "fe5ebf60510f44f1931adf4c23de042bcd1e3ff0a6729e8af27b86e5a0977fe0"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTER": {"name": "VOTER", "description": "Address performing the vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAUGE": {"name": "GAUGE", "description": "Gauge that is being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATED_SHARES": {"name": "DELEGATED_SHARES", "description": "Number of shares delegated to vote for this Gauge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POWER": {"name": "POWER", "description": "Total voting power of the voter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__saber_gauges_votes.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, voter, gauge)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.304138, "compiled_sql": "\n\nWITH all_saber_gauges_events AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        index,\n        instruction\n    FROM\n        SOLANA.silver.events\n    WHERE\n        program_id = 'GaugesLJrnVjNNWLReiw3Q7xQhycSBRgeHGTMDUaX231'\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ntx_logs AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.value :: STRING AS message,\n        CASE\n            WHEN l.value LIKE 'Program log: Instruction:%' THEN 'instruction_name'\n            ELSE 'vote'\n        END AS log_type,\n        conditional_true_event(\n            l.value LIKE 'Program log: Instruction:%'\n        ) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index\n        ) - 1 AS event_index\n    FROM\n        SOLANA.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                all_saber_gauges_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        (\n            l.value :: STRING LIKE 'Program log: Instruction:%'\n            OR l.value :: STRING LIKE 'Program log: power:%'\n        )\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    e.instruction :accounts [7] :: STRING AS voter,\n    e.instruction :accounts [1] :: STRING AS gauge,\n    REPLACE(\n        REGEXP_SUBSTR(\n            l.message,\n            'Program log: power: \\\\d+'\n        ),\n        'Program log: power: '\n    ) :: NUMBER AS power,\n    REPLACE(\n        REGEXP_SUBSTR(\n            l.message,\n            'shares: \\\\d+'\n        ),\n        'shares: '\n    ) :: NUMBER AS delegated_shares\nFROM\n    all_saber_gauges_events e\n    LEFT OUTER JOIN tx_logs l\n    ON l.tx_id = e.tx_id\n    AND e.index = l.event_index\nWHERE\n    l.log_type = 'vote'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.saber_gauges_votes"}, "model.solana_models.silver__swaps_raydium_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH raydium_dex_txs AS (\n\n    SELECT\n        DISTINCT t.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.succeeded,\n        t.signers,\n        e.program_id\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        (\n            (\n                program_id = '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'\n                AND instruction :accounts [2] :: STRING = '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'\n            )\n            OR (\n                program_id = '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h'\n                AND instruction :accounts [1] :: STRING = '2EXiumdi14E9b8Fy62QcA5Uh6WdHS2b38wtSxp72Mibj'\n            )\n            OR program_id IN (\n                '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\n                'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\n            )\n        )\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        raydium_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        {{ ref('silver___post_token_balances') }}\n        b\n        INNER JOIN raydium_dex_txs t\n        ON t.tx_id = b.tx_id\n\n{% if is_incremental() %}\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN raydium_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND e.program_id IN (\n            '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',\n            '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h',\n            '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\n            'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\n        )\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__swaps_raydium_dex"], "unique_id": "model.solana_models.silver__swaps_raydium_dex", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__swaps_raydium_dex.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.sql", "name": "silver__swaps_raydium_dex", "alias": "swaps_raydium_dex", "checksum": {"name": "sha256", "checksum": "af2629970ab0843481ada016f7253ec656fc949234ae7ae5720d01a14336868a"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__swaps_raydium_dex.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.348709, "compiled_sql": "\n\nWITH raydium_dex_txs AS (\n\n    SELECT\n        DISTINCT t.block_timestamp,\n        t.block_id,\n        t.tx_id,\n        t.succeeded,\n        t.signers,\n        e.program_id\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        (\n            (\n                program_id = '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'\n                AND instruction :accounts [2] :: STRING = '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'\n            )\n            OR (\n                program_id = '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h'\n                AND instruction :accounts [1] :: STRING = '2EXiumdi14E9b8Fy62QcA5Uh6WdHS2b38wtSxp72Mibj'\n            )\n            OR program_id IN (\n                '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\n                'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\n            )\n        )\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nsigners AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        raydium_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s qualify(ROW_NUMBER() over (PARTITION BY t.tx_id\n    ORDER BY\n        s.index)) = 1\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA.silver._post_token_balances\n        b\n        INNER JOIN raydium_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN raydium_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND e.program_id IN (\n            '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',\n            '5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h',\n            '93BgeoLHo5AdNbpqy9bD12dtfxtA5M2fh3rj72bE35Y3',\n            'routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS'\n        )\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        s.acct AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.swaps_raydium_dex"}, "model.solana_models.silver__votes": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        tx :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN is_null_value(tx :meta :err) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        tx :transaction :message :instructions [0] :parsed :info :voteAccount :: STRING AS vote_account,\n        tx :transaction :message :instructions [0] :parsed :info :voteAuthority :: STRING AS vote_authority,\n        tx :transaction :message :instructions [0] :parsed :info :vote :hash :: STRING AS vote_hash,\n        tx :transaction :message :instructions [0] :parsed :info :vote :slots :: ARRAY AS vote_slots,\n        ingested_at\n    FROM\n        {{ ref('bronze__transactions') }}\n        t\n    WHERE\n        tx :transaction :message :instructions [0] :parsed :type :: STRING IS NOT NULL\n        AND tx :transaction :message :instructions [0] :programId :: STRING = 'Vote111111111111111111111111111111111111111'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n{% endif %}\n)\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    fee,\n    succeeded,\n    vote_account,\n    vote_authority,\n    vote_hash,\n    vote_slots,\n    ingested_at\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY block_id, tx_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__votes"], "unique_id": "model.solana_models.silver__votes", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__votes.sql", "original_file_path": "models/silver/silver__votes.sql", "name": "silver__votes", "alias": "votes", "checksum": {"name": "sha256", "checksum": "f8708505f2ef420678209050ae44c7d789e3f940def9b47c0645ff6bdeb2e196"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECENT_BLOCK_HASH": {"name": "RECENT_BLOCK_HASH", "description": "Previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "Transaction fee (in lamports)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_ACCOUNT": {"name": "VOTE_ACCOUNT", "description": "Account belonging to the voting delegator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_AUTHORITY": {"name": "VOTE_AUTHORITY", "description": "Authority for the voting delegator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_HASH": {"name": "VOTE_HASH", "description": "Unique hash representing this set of votes(?)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOTE_SLOTS": {"name": "VOTE_SLOTS", "description": "Slots being voted on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__votes.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1649447655.332028, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx :transaction :message :recentBlockhash :: STRING AS recent_block_hash,\n        tx :meta :fee :: NUMBER AS fee,\n        CASE\n            WHEN is_null_value(tx :meta :err) THEN TRUE\n            ELSE FALSE\n        END AS succeeded,\n        tx :transaction :message :instructions [0] :parsed :info :voteAccount :: STRING AS vote_account,\n        tx :transaction :message :instructions [0] :parsed :info :voteAuthority :: STRING AS vote_authority,\n        tx :transaction :message :instructions [0] :parsed :info :vote :hash :: STRING AS vote_hash,\n        tx :transaction :message :instructions [0] :parsed :info :vote :slots :: ARRAY AS vote_slots,\n        ingested_at\n    FROM\n        SOLANA.bronze.transactions\n        t\n    WHERE\n        tx :transaction :message :instructions [0] :parsed :type :: STRING IS NOT NULL\n        AND tx :transaction :message :instructions [0] :programId :: STRING = 'Vote111111111111111111111111111111111111111'\n\n\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n\n)\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    recent_block_hash,\n    fee,\n    succeeded,\n    vote_account,\n    vote_authority,\n    vote_hash,\n    vote_slots,\n    ingested_at\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY block_id, tx_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.votes"}, "model.solana_models.silver__blocks": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"block_id\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['ingested_at::DATE'],\n  post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH base_tables AS (\n  SELECT  \n      *\n  FROM \n    {{ ref('bronze__blocks') }}\n\n{% if is_incremental() %}\n     WHERE ingested_at::date >= current_date - 2\n{% endif %}\n)\n\nSELECT\n    block_id,\n    block_timestamp, \n    network,\n    chain_id,\n    tx_count,\n    header :blockHeight :: INTEGER AS block_height, \n    header :blockhash :: VARCHAR AS block_hash, \n    header :parentSlot :: INTEGER AS previous_block_id, \n    header :previousBlockhash :: VARCHAR AS previous_block_hash,  \n    ingested_at\nFROM \n   base_tables \n\n qualify(ROW_NUMBER() over(PARTITION BY block_id\n  ORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "block_id", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__blocks"], "unique_id": "model.solana_models.silver__blocks", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "a7b8e47168b4482c5fb77c2637dd49bc0560c41343083267ce06784604bef8fa"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "solana network name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "chain identifier, this will always be solana.  Field is used in joins with crosschain tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "number of transactions within this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "heigh of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "hash of the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_ID": {"name": "PREVIOUS_BLOCK_ID", "description": "previous slot value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREVIOUS_BLOCK_HASH": {"name": "PREVIOUS_BLOCK_HASH", "description": "previous block's hash value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1649447655.317528, "compiled_sql": "\n\nWITH base_tables AS (\n  SELECT  \n      *\n  FROM \n    SOLANA.bronze.blocks\n\n\n     WHERE ingested_at::date >= current_date - 2\n\n)\n\nSELECT\n    block_id,\n    block_timestamp, \n    network,\n    chain_id,\n    tx_count,\n    header :blockHeight :: INTEGER AS block_height, \n    header :blockhash :: VARCHAR AS block_hash, \n    header :parentSlot :: INTEGER AS previous_block_id, \n    header :previousBlockhash :: VARCHAR AS previous_block_hash,  \n    ingested_at\nFROM \n   base_tables \n\n qualify(ROW_NUMBER() over(PARTITION BY block_id\n  ORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.blocks"}, "model.solana_models.silver__nft_sales_solport": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"CONCAT_WS('-', tx_id, mint)\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH sales_inner_instructions AS (  \n  SELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    t.succeeded,\n    e.program_id,\n    e.index,\n    COALESCE(\n      i.value :parsed :info :lamports :: NUMBER,\n      0\n    ) AS amount,\n    e.instruction :accounts [0] :: STRING AS purchaser,\n    e.instruction :accounts [3] :: STRING AS nft_account,\n    e.ingested_at\n  FROM {{ ref('silver__events') }} e\n  \n  INNER JOIN {{ ref('silver__transactions') }} t\n  ON t.tx_id = e.tx_id\n  \n  LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  \n  WHERE program_id = 'SPf5WqNywtPrRXSU5enq5z9bPPhREaSYf2LhN5fUxcj' -- Solport Program ID\n  \n  {% if is_incremental() %}\n    AND e.ingested_at :: DATE >= current_date - 2\n    AND t.ingested_at :: DATE >= current_date - 2\n  {% endif %}\n), \n\npost_token_balances AS (\n    SELECT \n        tx_id, \n        account, \n        amount, \n        mint\n    FROM {{ ref('silver___post_token_balances') }} p \n\n    WHERE amount > 0\n\n    {% if is_incremental() %}\n        AND p.ingested_at :: DATE >= current_date - 2\n    {% endif %}\n) \n\nSELECT \n    s.block_timestamp, \n    s.block_id, \n    s.tx_id, \n    s.succeeded, \n    s.program_id, \n    p.mint AS mint, \n    s.purchaser, \n    SUM(s.amount) / POW(10,9) AS sales_amount, \n    s.ingested_at\nFROM sales_inner_instructions s\n\nINNER JOIN post_token_balances p\nON s.tx_id = p.tx_id AND s.nft_account = p.account \n\nGROUP BY s.block_timestamp, s.block_id, s.tx_id, s.succeeded, s.program_id, p.mint, s.purchaser, s.ingested_at", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_sales_solport"], "unique_id": "model.solana_models.silver__nft_sales_solport", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_sales_solport.sql", "original_file_path": "models/silver/silver__nft_sales_solport.sql", "name": "silver__nft_sales_solport", "alias": "nft_sales_solport", "checksum": {"name": "sha256", "checksum": "4f2f4b1d5c3ff3797b96b854804d1c3378d2f3015e5044783541e59731a97939"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver___post_token_balances"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SALES_AMOUNT": {"name": "SALES_AMOUNT", "description": "The amount of Solana the NFT was purchased for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_sales_solport.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, mint)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.595753, "compiled_sql": "\n\nWITH sales_inner_instructions AS (  \n  SELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    t.succeeded,\n    e.program_id,\n    e.index,\n    COALESCE(\n      i.value :parsed :info :lamports :: NUMBER,\n      0\n    ) AS amount,\n    e.instruction :accounts [0] :: STRING AS purchaser,\n    e.instruction :accounts [3] :: STRING AS nft_account,\n    e.ingested_at\n  FROM SOLANA.silver.events e\n  \n  INNER JOIN SOLANA.silver.transactions t\n  ON t.tx_id = e.tx_id\n  \n  LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n  \n  WHERE program_id = 'SPf5WqNywtPrRXSU5enq5z9bPPhREaSYf2LhN5fUxcj' -- Solport Program ID\n  \n  \n    AND e.ingested_at :: DATE >= current_date - 2\n    AND t.ingested_at :: DATE >= current_date - 2\n  \n), \n\npost_token_balances AS (\n    SELECT \n        tx_id, \n        account, \n        amount, \n        mint\n    FROM SOLANA.silver._post_token_balances p \n\n    WHERE amount > 0\n\n    \n        AND p.ingested_at :: DATE >= current_date - 2\n    \n) \n\nSELECT \n    s.block_timestamp, \n    s.block_id, \n    s.tx_id, \n    s.succeeded, \n    s.program_id, \n    p.mint AS mint, \n    s.purchaser, \n    SUM(s.amount) / POW(10,9) AS sales_amount, \n    s.ingested_at\nFROM sales_inner_instructions s\n\nINNER JOIN post_token_balances p\nON s.tx_id = p.tx_id AND s.nft_account = p.account \n\nGROUP BY s.block_timestamp, s.block_id, s.tx_id, s.succeeded, s.program_id, p.mint, s.purchaser, s.ingested_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_sales_solport"}, "model.solana_models.silver__saber_gov_actions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_id\",\n    incremental_strategy = 'delete+insert',\n) }}\n\nWITH post_token_balances AS (\n\n    SELECT\n        tx_id,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        {{ ref('silver___post_token_balances') }}\n    WHERE\n        mint = 'Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nsaber_gov_lock_events AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        e.index,\n        e.instruction :accounts [3] :: STRING AS lock_signer,\n        e.instruction :accounts [2] :: STRING AS exit_signer,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount :: NUMBER AS amount\n    FROM\n        {{ ref('silver__events') }}\n        e,\n        TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        program_id = 'LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ntx_logs AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.value :: STRING AS message,\n        CASE\n            WHEN l.value LIKE 'Program log: Instruction: Exit%' THEN 'EXIT'\n            WHEN l.value LIKE 'Program log: Instruction: Lock%' THEN 'LOCK'\n            ELSE NULL\n        END AS action,\n        conditional_true_event(\n            l.value LIKE 'Program log: Instruction:%'\n        ) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index\n        ) - 1 AS event_index\n    FROM\n        {{ ref('silver__transactions') }}\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                saber_gov_lock_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        l.value :: STRING LIKE 'Program log: Instruction: %'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    CASE\n        WHEN l.action = 'EXIT' THEN e.exit_signer\n        ELSE e.lock_signer\n    END AS signer,\n    CASE\n        WHEN l.action = 'EXIT' THEN e.source\n        ELSE e.destination\n    END AS locker_account,\n    p.mint,\n    l.action,\n    e.amount / pow(\n        10,\n        p.decimal\n    ) AS amount\nFROM\n    saber_gov_lock_events e\n    INNER JOIN post_token_balances p\n    ON p.tx_id = e.tx_id\n    AND p.account = e.destination\n    LEFT OUTER JOIN tx_logs l\n    ON l.tx_id = e.tx_id\n    AND l.event_index = e.index", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "unique_key": "tx_id", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__saber_gov_actions"], "unique_id": "model.solana_models.silver__saber_gov_actions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__saber_gov_actions.sql", "original_file_path": "models/silver/silver__saber_gov_actions.sql", "name": "silver__saber_gov_actions", "alias": "saber_gov_actions", "checksum": {"name": "sha256", "checksum": "d16ba499ecfc01f79ec483e29a83bd4e8296ba764ab077a363f8851d0370870a"}, "tags": [], "refs": [["silver___post_token_balances"], ["silver__events"], ["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNER": {"name": "SIGNER", "description": "Address initiating the LOCK or EXIT action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCKER_ACCOUNT": {"name": "LOCKER_ACCOUNT", "description": "Account holding tokens for LOCK or EXIT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Mint being locked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "LOCK or EXIT action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Amount being locked or exited", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__saber_gov_actions.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert"}, "created_at": 1649447655.610833, "compiled_sql": "\n\nWITH post_token_balances AS (\n\n    SELECT\n        tx_id,\n        account,\n        mint,\n        DECIMAL\n    FROM\n        SOLANA.silver._post_token_balances\n    WHERE\n        mint = 'Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1'\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nsaber_gov_lock_events AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        e.tx_id,\n        e.index,\n        e.instruction :accounts [3] :: STRING AS lock_signer,\n        e.instruction :accounts [2] :: STRING AS exit_signer,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount :: NUMBER AS amount\n    FROM\n        SOLANA.silver.events\n        e,\n        TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        program_id = 'LocktDzaV1W2Bm9DeZeiyz4J9zs4fRqNiYqQyracRXw'\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ntx_logs AS (\n    SELECT\n        t.tx_id,\n        t.succeeded,\n        l.value :: STRING AS message,\n        CASE\n            WHEN l.value LIKE 'Program log: Instruction: Exit%' THEN 'EXIT'\n            WHEN l.value LIKE 'Program log: Instruction: Lock%' THEN 'LOCK'\n            ELSE NULL\n        END AS action,\n        conditional_true_event(\n            l.value LIKE 'Program log: Instruction:%'\n        ) over (\n            PARTITION BY t.tx_id\n            ORDER BY\n                l.index\n        ) - 1 AS event_index\n    FROM\n        SOLANA.silver.transactions\n        t\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_id\n            FROM\n                saber_gov_lock_events\n        ) g\n        ON t.tx_id = g.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(t.log_messages)) l\n    WHERE\n        l.value :: STRING LIKE 'Program log: Instruction: %'\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n)\nSELECT\n    e.block_timestamp,\n    e.block_id,\n    e.tx_id,\n    l.succeeded,\n    CASE\n        WHEN l.action = 'EXIT' THEN e.exit_signer\n        ELSE e.lock_signer\n    END AS signer,\n    CASE\n        WHEN l.action = 'EXIT' THEN e.source\n        ELSE e.destination\n    END AS locker_account,\n    p.mint,\n    l.action,\n    e.amount / pow(\n        10,\n        p.decimal\n    ) AS amount\nFROM\n    saber_gov_lock_events e\n    INNER JOIN post_token_balances p\n    ON p.tx_id = e.tx_id\n    AND p.account = e.destination\n    LEFT OUTER JOIN tx_logs l\n    ON l.tx_id = e.tx_id\n    AND l.event_index = e.index", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.saber_gov_actions"}, "model.solana_models.silver__nft_metadata": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', contract_address, token_id)\",\n    incremental_strategy = 'delete+insert',\n) }}\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        {{ source(\n            'legacy_bronze',\n            'prod_nft_metadata_uploads_1828572827'\n        ) }}\n    WHERE\n        SPLIT(\n            record_content :model :sinks [0] :destination :: STRING,\n            '.'\n        ) [2] :: STRING = 'nft_metadata'\n        AND record_content :model :blockchain :: STRING = 'solana'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        {{ this }}\n)\n{% endif %}\n)\nSELECT\n    (\n        b.record_metadata :CreateTime :: INT / 1000\n    ) :: TIMESTAMP AS system_created_at,\n    record_content :model :blockchain :: STRING AS blockchain,\n    t.value :contract_address :: STRING AS contract_address,\n    t.value :contract_name :: STRING AS contract_name,\n    t.value :created_at_timestamp :: TIMESTAMP AS created_at_timestamp,\n    t.value :mint_address :: STRING AS mint,\n    t.value :creator_address :: STRING AS creator_address,\n    t.value :creator_name :: STRING AS creator_name,\n    t.value :image_url :: STRING AS image_url,\n    t.value :project_name :: STRING AS project_name,\n    t.value :token_id :: STRING AS token_id,\n    t.value :token_metadata :: OBJECT AS token_metadata,\n    t.value :token_metadata_uri :: STRING AS token_metadata_uri,\n    t.value :token_name :: STRING AS token_name,\n    b._inserted_timestamp\nFROM\n    base b,\n    LATERAL FLATTEN(\n        input => record_content: results\n    ) t\nWHERE\n    blockchain = 'solana' qualify(ROW_NUMBER() over(PARTITION BY contract_address, token_id\nORDER BY\n    created_at_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "unique_key": "CONCAT_WS('-', contract_address, token_id)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_metadata"], "unique_id": "model.solana_models.silver__nft_metadata", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_metadata.sql", "original_file_path": "models/silver/silver__nft_metadata.sql", "name": "silver__nft_metadata", "alias": "nft_metadata", "checksum": {"name": "sha256", "checksum": "4790c824ffb6ebeae9051b433f2dd2e4aba5cdc38d47c96ad5d35fe4bafeaf88"}, "tags": [], "refs": [], "sources": [["legacy_bronze", "prod_nft_metadata_uploads_1828572827"]], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Solana. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Address unique to an NFT series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "Name of the contract that identifies an NFT series. Example - tcgdragons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT_TIMESTAMP": {"name": "CREATED_AT_TIMESTAMP", "description": "timestamp in UTC that the NFT was minted at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "address provided by the creator of the project where mint payments and secondary market royalties are sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_NAME": {"name": "CREATOR_NAME", "description": "name of the project creator - this can be an individual or a company name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE_URL": {"name": "IMAGE_URL", "description": "URL that links to the image on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the project the NFT token belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "Numeric value that identifies the NFT within it's series", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "a block of json that describes the traits of an NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA_URI": {"name": "TOKEN_METADATA_URI", "description": "URL that links to the token metadata on the ipfs service", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_NAME": {"name": "TOKEN_NAME", "description": "Name of the NFT token - this is unique to token. Example SMB #284", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_metadata.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', contract_address, token_id)", "incremental_strategy": "delete+insert"}, "created_at": 1649447655.626237, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        flipside_prod_db.bronze.prod_nft_metadata_uploads_1828572827\n    WHERE\n        SPLIT(\n            record_content :model :sinks [0] :destination :: STRING,\n            '.'\n        ) [2] :: STRING = 'nft_metadata'\n        AND record_content :model :blockchain :: STRING = 'solana'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        SOLANA.silver.nft_metadata\n)\n\n)\nSELECT\n    (\n        b.record_metadata :CreateTime :: INT / 1000\n    ) :: TIMESTAMP AS system_created_at,\n    record_content :model :blockchain :: STRING AS blockchain,\n    t.value :contract_address :: STRING AS contract_address,\n    t.value :contract_name :: STRING AS contract_name,\n    t.value :created_at_timestamp :: TIMESTAMP AS created_at_timestamp,\n    t.value :mint_address :: STRING AS mint,\n    t.value :creator_address :: STRING AS creator_address,\n    t.value :creator_name :: STRING AS creator_name,\n    t.value :image_url :: STRING AS image_url,\n    t.value :project_name :: STRING AS project_name,\n    t.value :token_id :: STRING AS token_id,\n    t.value :token_metadata :: OBJECT AS token_metadata,\n    t.value :token_metadata_uri :: STRING AS token_metadata_uri,\n    t.value :token_name :: STRING AS token_name,\n    b._inserted_timestamp\nFROM\n    base b,\n    LATERAL FLATTEN(\n        input => record_content: results\n    ) t\nWHERE\n    blockchain = 'solana' qualify(ROW_NUMBER() over(PARTITION BY contract_address, token_id\nORDER BY\n    created_at_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_metadata"}, "model.solana_models.silver___inner_instructions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, mapped_instruction_index)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n) }}\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    e.index,\n    e.value :index :: NUMBER AS mapped_instruction_index,\n    e.value,\n    ingested_at\nFROM\n    {{ ref('silver__transactions') }}\n    t,\n    TABLE(FLATTEN(inner_instructions)) AS e\nWHERE\n    COALESCE(\n        e.value :programId :: STRING,\n        ''\n    ) NOT IN (\n        -- exclude Pyth Oracle programs\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\n    )\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id, mapped_instruction_index)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver___inner_instructions"], "unique_id": "model.solana_models.silver___inner_instructions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver___inner_instructions.sql", "original_file_path": "models/silver/silver___inner_instructions.sql", "name": "silver___inner_instructions", "alias": "_inner_instructions", "checksum": {"name": "sha256", "checksum": "bfdf48d95254c3bb07c42a233317778f0c5ad514ee2369d93ed20efb00577ead"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the inner_instruction within the inner_instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAPPED_INSTRUCTION_INDEX": {"name": "MAPPED_INSTRUCTION_INDEX", "description": "Specifies the instruction which this inner_instruction applies", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "json object that contains the inner instruction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver___inner_instructions.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, mapped_instruction_index)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1649447655.5323892, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    e.index,\n    e.value :index :: NUMBER AS mapped_instruction_index,\n    e.value,\n    ingested_at\nFROM\n    SOLANA.silver.transactions\n    t,\n    TABLE(FLATTEN(inner_instructions)) AS e\nWHERE\n    COALESCE(\n        e.value :programId :: STRING,\n        ''\n    ) NOT IN (\n        -- exclude Pyth Oracle programs\n        'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',\n        'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM'\n    )\n\n\nAND ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver._inner_instructions"}, "model.solana_models.silver___pre_token_balances": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['ingested_at::DATE'],\n) }}\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    b.index,\n    b.value :accountIndex :: INTEGER AS account_index,\n    t.account_keys [account_index] :pubkey :: STRING AS account,\n    b.value :mint :: STRING AS mint,\n    b.value :owner :: STRING AS owner,\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\n    b.value :uiTokenAmount :decimals AS DECIMAL,\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\n    ingested_at\nFROM\n    {{ ref('silver__transactions') }}\n    t,\n    TABLE(FLATTEN(pre_token_balances)) b\n{% if is_incremental() %}\nWHERE\n    ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["ingested_at::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver___pre_token_balances"], "unique_id": "model.solana_models.silver___pre_token_balances", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver___pre_token_balances.sql", "original_file_path": "models/silver/silver___pre_token_balances.sql", "name": "silver___pre_token_balances", "alias": "_pre_token_balances", "checksum": {"name": "sha256", "checksum": "73dae3ddf1f32442150a06c4100c0a5a61ccea6b826ee855c9cf3daf0f51b851"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the pre token balance entry within the array for a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_INDEX": {"name": "ACCOUNT_INDEX", "description": "Location corresponding to the index in the accounts array", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "Address of the owner of the token account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Number of decimals in the token value, need to divide amount by 10^decimal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNT": {"name": "UIAMOUNT", "description": "Amount of the token in the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UIAMOUNTSTRING": {"name": "UIAMOUNTSTRING", "description": "Amount of the token in the transaction in string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Time the record was ingested by the source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver___pre_token_balances.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1649447655.515983, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    b.index,\n    b.value :accountIndex :: INTEGER AS account_index,\n    t.account_keys [account_index] :pubkey :: STRING AS account,\n    b.value :mint :: STRING AS mint,\n    b.value :owner :: STRING AS owner,\n    b.value :uiTokenAmount :amount :: INTEGER AS amount,\n    b.value :uiTokenAmount :decimals AS DECIMAL,\n    b.value :uiTokenAmount :uiAmount AS uiAmount,\n    b.value :uiTokenAmount :uiAmountString AS uiAmountString,\n    ingested_at\nFROM\n    SOLANA.silver.transactions\n    t,\n    TABLE(FLATTEN(pre_token_balances)) b\n\nWHERE\n    ingested_at :: DATE >= getdate() - INTERVAL '2 days'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver._pre_token_balances"}, "model.solana_models.silver__votes_agg_block": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_id\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH v AS (\n  SELECT \n    block_id, \n    count(block_id) AS num_votes\n  FROM {{ ref('silver__votes') }}\n  \n  {% if is_incremental() %}\n     WHERE ingested_at >= getdate() - interval '2 days'\n  {% endif %}\n\n  GROUP BY block_id\n)\n\nSELECT \n  t.block_timestamp,\n  v.block_id, \n  num_votes\n\nFROM v\n\nINNER JOIN (SELECT DISTINCT block_id, block_timestamp FROM {{ ref('silver__transactions') }}) t \nON v.block_id = t.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__votes", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "block_id", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__votes_agg_block"], "unique_id": "model.solana_models.silver__votes_agg_block", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__votes_agg_block.sql", "original_file_path": "models/silver/silver__votes_agg_block.sql", "name": "silver__votes_agg_block", "alias": "votes_agg_block", "checksum": {"name": "sha256", "checksum": "e71b18b82548c502fcd89f0ea16d6978a97f94781e101f10aae4939918ef0df3"}, "tags": [], "refs": [["silver__votes"], ["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUM_VOTES": {"name": "NUM_VOTES", "description": "The number of vote events that occurred within the block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__votes_agg_block.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__votes_agg_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.506146, "compiled_sql": "\n\nWITH v AS (\n  SELECT \n    block_id, \n    count(block_id) AS num_votes\n  FROM SOLANA.silver.votes\n  \n  \n     WHERE ingested_at >= getdate() - interval '2 days'\n  \n\n  GROUP BY block_id\n)\n\nSELECT \n  t.block_timestamp,\n  v.block_id, \n  num_votes\n\nFROM v\n\nINNER JOIN (SELECT DISTINCT block_id, block_timestamp FROM SOLANA.silver.transactions) t \nON v.block_id = t.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.votes_agg_block"}, "model.solana_models.silver__nft_mints": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', tx_id, index, mint, mint_currency)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH mint_tx AS (\n\n    SELECT\n        DISTINCT t.tx_id, \n        t.signers[0]::string as signer,\n        case when array_size(t.signers) > 1 then\n            t.signers[1]::string\n        else \n            null\n        end as potential_nft_mint,\n        t.succeeded\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        event_type = 'mintTo'\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ntxs AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        t.tx_id,\n        t.succeeded AS succeeded,\n        t.signer,\n        t.potential_nft_mint,\n        program_id,\n        e.index,\n        i.index AS inner_index,\n        COALESCE(\n            i.value :parsed :info :lamports :: INTEGER,\n            i.value :parsed :info :amount :: INTEGER\n        ) AS sales_amount,\n        LAST_VALUE(\n            i.value :parsed :info :mint :: STRING ignore nulls\n        ) over (\n            PARTITION BY t.tx_id,\n            e.index\n            ORDER BY\n                inner_index\n        ) AS nft,\n        LAST_VALUE(\n            i.value :parsed :info :multisigAuthority :: STRING ignore nulls\n        ) over (\n            PARTITION BY t.tx_id,\n            e.index\n            ORDER BY\n                inner_index\n        ) AS wallet,\n        i.value :parsed :info :authority :: STRING AS authority,\n        i.value :parsed :info :source :: STRING AS source,\n        i.value: parsed :info :destination :: STRING AS destination,\n        e.ingested_at\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN mint_tx t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        e.event_type IS NULL\n        AND ARRAY_CONTAINS(\n            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' :: variant,\n            e.instruction :accounts :: ARRAY\n        )\n        AND t.succeeded = TRUE\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nmint_currency AS (\n    SELECT\n        DISTINCT t.tx_id,\n        p.mint as mint_paid,\n        p.account,\n        p.decimal\n    FROM\n        txs t\n        INNER JOIN {{ ref('silver___post_token_balances') }}\n        p\n        ON t.tx_id = p.tx_id\n    WHERE\n        source = p.account\n\n{% if is_incremental() %}\nAND p.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n)\nSELECT\n    block_timestamp,\n    block_id,\n    t.tx_id,\n    succeeded,\n    program_id,\n    INDEX,\n    coalesce(wallet,signer) as purchaser,  \n    SUM(sales_amount / pow(10, COALESCE(p.decimal, 9))) AS mint_price,\n    COALESCE(\n        p.mint_paid,\n        'So11111111111111111111111111111111111111111'\n    ) AS mint_currency,\n    coalesce(potential_nft_mint, NFT) as mint,\n    ingested_at\nFROM\n    txs t\n    LEFT OUTER JOIN mint_currency p\n    ON p.tx_id = t.tx_id\n    AND p.account = t.source\nWHERE\n    sales_amount is not null\nAND\n    destination is not null\nGROUP BY\n    block_timestamp,\n    block_id,\n    t.tx_id,\n    program_id,\n    INDEX,\n    purchaser,\n    succeeded,\n    mint_currency,\n    mint,\n    ingested_at", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions", "model.solana_models.silver__events", "model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', tx_id, index, mint, mint_currency)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__nft_mints"], "unique_id": "model.solana_models.silver__nft_mints", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__nft_mints.sql", "original_file_path": "models/silver/silver__nft_mints.sql", "name": "silver__nft_mints", "alias": "nft_mints", "checksum": {"name": "sha256", "checksum": "d4c797e889e04993ad18621e39161a919c567cc4151a1d7523ac85d2980d0d24"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"], ["silver__events"], ["silver___post_token_balances"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PURCHASER": {"name": "PURCHASER", "description": "The wallet address that purchased the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_CURRENCY": {"name": "MINT_CURRENCY", "description": "Currency used to pay for the NFT mint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT": {"name": "MINT", "description": "Unique address representing a specific token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "Price that it cost to mint the NFT in SOL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": " Time the record was ingested by the source ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__nft_mints.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, index, mint, mint_currency)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.5434968, "compiled_sql": "\n\nWITH mint_tx AS (\n\n    SELECT\n        DISTINCT t.tx_id, \n        t.signers[0]::string as signer,\n        case when array_size(t.signers) > 1 then\n            t.signers[1]::string\n        else \n            null\n        end as potential_nft_mint,\n        t.succeeded\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = e.tx_id\n    WHERE\n        event_type = 'mintTo'\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ntxs AS (\n    SELECT\n        e.block_timestamp,\n        e.block_id,\n        t.tx_id,\n        t.succeeded AS succeeded,\n        t.signer,\n        t.potential_nft_mint,\n        program_id,\n        e.index,\n        i.index AS inner_index,\n        COALESCE(\n            i.value :parsed :info :lamports :: INTEGER,\n            i.value :parsed :info :amount :: INTEGER\n        ) AS sales_amount,\n        LAST_VALUE(\n            i.value :parsed :info :mint :: STRING ignore nulls\n        ) over (\n            PARTITION BY t.tx_id,\n            e.index\n            ORDER BY\n                inner_index\n        ) AS nft,\n        LAST_VALUE(\n            i.value :parsed :info :multisigAuthority :: STRING ignore nulls\n        ) over (\n            PARTITION BY t.tx_id,\n            e.index\n            ORDER BY\n                inner_index\n        ) AS wallet,\n        i.value :parsed :info :authority :: STRING AS authority,\n        i.value :parsed :info :source :: STRING AS source,\n        i.value: parsed :info :destination :: STRING AS destination,\n        e.ingested_at\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN mint_tx t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) i\n    WHERE\n        e.event_type IS NULL\n        AND ARRAY_CONTAINS(\n            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' :: variant,\n            e.instruction :accounts :: ARRAY\n        )\n        AND t.succeeded = TRUE\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nmint_currency AS (\n    SELECT\n        DISTINCT t.tx_id,\n        p.mint as mint_paid,\n        p.account,\n        p.decimal\n    FROM\n        txs t\n        INNER JOIN SOLANA.silver._post_token_balances\n        p\n        ON t.tx_id = p.tx_id\n    WHERE\n        source = p.account\n\n\nAND p.ingested_at :: DATE >= CURRENT_DATE - 2\n\n)\nSELECT\n    block_timestamp,\n    block_id,\n    t.tx_id,\n    succeeded,\n    program_id,\n    INDEX,\n    coalesce(wallet,signer) as purchaser,  \n    SUM(sales_amount / pow(10, COALESCE(p.decimal, 9))) AS mint_price,\n    COALESCE(\n        p.mint_paid,\n        'So11111111111111111111111111111111111111111'\n    ) AS mint_currency,\n    coalesce(potential_nft_mint, NFT) as mint,\n    ingested_at\nFROM\n    txs t\n    LEFT OUTER JOIN mint_currency p\n    ON p.tx_id = t.tx_id\n    AND p.account = t.source\nWHERE\n    sales_amount is not null\nAND\n    destination is not null\nGROUP BY\n    block_timestamp,\n    block_id,\n    t.tx_id,\n    program_id,\n    INDEX,\n    purchaser,\n    succeeded,\n    mint_currency,\n    mint,\n    ingested_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.nft_mints"}, "model.solana_models.silver__swaps_orca_dex": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH base_i AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver___instructions') }}\n        i\n    WHERE\n        i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\n\n{% if is_incremental() %}\nAND i.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\norca_dex_txs AS (\n    SELECT\n        DISTINCT i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        t.fee,\n        t.succeeded,\n        t.signers\n    FROM\n        base_i i\n        INNER JOIN {{ ref('silver__transactions') }}\n        t\n        ON t.tx_id = i.tx_id\n    WHERE\n        i.value :programId :: STRING IN (\n            -- unknown orca swaps version, seems related to v2\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\n            -- orca swaps v2\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\n            -- orca swaps v1\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\n        )\n\n{% if is_incremental() %}\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndelegates_map_tmp AS (\n    SELECT\n        i.tx_id,\n        VALUE :parsed :info :delegate :: STRING AS delegate,\n        VALUE :parsed :info :owner :: STRING AS owner\n    FROM\n        base_i i\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = i.tx_id\n    WHERE\n        delegate IS NOT NULL\n),\ndelegates_map AS (\n    SELECT\n        tx_id,\n        delegate,\n        owner\n    FROM\n        delegates_map_tmp\n    GROUP BY\n        1,\n        2,\n        3\n),\nsigners_tmp AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        orca_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s\n),\nsigners AS (\n    SELECT\n        s.tx_id,\n        s.acct,\n        dm.owner AS delegate_owner\n    FROM\n        signers_tmp s\n        LEFT OUTER JOIN delegates_map dm\n        ON dm.tx_id = s.tx_id\n        AND s.acct = dm.delegate\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        {{ ref('silver___post_token_balances') }}\n        b\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = b.tx_id\n\n{% if is_incremental() %}\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        {{ ref('silver__events') }}\n        e\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) <> '11111111111111111111111111111111'\n        AND e.program_id IN (\n            -- unknown orca swaps version, seems related to v2\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\n            -- orca swaps v2\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\n            -- orca swaps v1\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\n        )\n\n{% if is_incremental() %}\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        COALESCE(\n            s.delegate_owner,\n            s.acct\n        ) AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver___instructions", "model.solana_models.silver__transactions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__swaps_orca_dex"], "unique_id": "model.solana_models.silver__swaps_orca_dex", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__swaps_orca_dex.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.sql", "name": "silver__swaps_orca_dex", "alias": "swaps_orca_dex", "checksum": {"name": "sha256", "checksum": "3b02a50b83e6e5f1e749b70691d09672c8a26fa5d4a7ad2cdbd44343f6e4e2b6"}, "tags": [], "refs": [["silver___instructions"], ["silver__transactions"], ["silver___post_token_balances"], ["silver__events"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "Address that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMT": {"name": "FROM_AMT", "description": "Total amount of the token sent in to initiate the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_MINT": {"name": "FROM_MINT", "description": "Token being sent or swapped from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMT": {"name": "TO_AMT", "description": "Total amount of the token received in the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_MINT": {"name": "TO_MINT", "description": "Token being received or swapped for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__swaps_orca_dex.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.559529, "compiled_sql": "\n\nWITH base_i AS (\n\n    SELECT\n        *\n    FROM\n        SOLANA.silver._instructions\n        i\n    WHERE\n        i.block_id > 111442741 -- token balances owner field not guaranteed to populated bofore this slot\n\n\nAND i.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\norca_dex_txs AS (\n    SELECT\n        DISTINCT i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        t.fee,\n        t.succeeded,\n        t.signers\n    FROM\n        base_i i\n        INNER JOIN SOLANA.silver.transactions\n        t\n        ON t.tx_id = i.tx_id\n    WHERE\n        i.value :programId :: STRING IN (\n            -- unknown orca swaps version, seems related to v2\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\n            -- orca swaps v2\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\n            -- orca swaps v1\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\n        )\n\n\nAND t.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndelegates_map_tmp AS (\n    SELECT\n        i.tx_id,\n        VALUE :parsed :info :delegate :: STRING AS delegate,\n        VALUE :parsed :info :owner :: STRING AS owner\n    FROM\n        base_i i\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = i.tx_id\n    WHERE\n        delegate IS NOT NULL\n),\ndelegates_map AS (\n    SELECT\n        tx_id,\n        delegate,\n        owner\n    FROM\n        delegates_map_tmp\n    GROUP BY\n        1,\n        2,\n        3\n),\nsigners_tmp AS (\n    SELECT\n        t.tx_id,\n        s.value :: STRING AS acct,\n        s.index\n    FROM\n        orca_dex_txs t,\n        TABLE(FLATTEN(t.signers)) s\n),\nsigners AS (\n    SELECT\n        s.tx_id,\n        s.acct,\n        dm.owner AS delegate_owner\n    FROM\n        signers_tmp s\n        LEFT OUTER JOIN delegates_map dm\n        ON dm.tx_id = s.tx_id\n        AND s.acct = dm.delegate\n),\npost_balances_acct_map AS (\n    SELECT\n        b.tx_id,\n        b.account AS middle_acct,\n        b.owner,\n        b.mint,\n        b.decimal,\n        b.amount\n    FROM\n        SOLANA.silver._post_token_balances\n        b\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = b.tx_id\n\n\nWHERE\n    b.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestinations AS (\n    SELECT\n        e.block_id,\n        e.block_timestamp,\n        e.tx_id,\n        t.succeeded,\n        e.index,\n        ii.index AS inner_index,\n        ii.value :parsed :info :destination :: STRING AS destination,\n        ii.value :parsed :info :authority :: STRING AS authority,\n        ii.value :parsed :info :source :: STRING AS source,\n        ii.value :parsed :info :amount AS amount,\n        ROW_NUMBER() over (\n            PARTITION BY e.tx_id\n            ORDER BY\n                e.index,\n                inner_index\n        ) AS rn\n    FROM\n        SOLANA.silver.events\n        e\n        INNER JOIN orca_dex_txs t\n        ON t.tx_id = e.tx_id\n        LEFT OUTER JOIN TABLE(FLATTEN(inner_instruction :instructions)) ii\n    WHERE\n        destination IS NOT NULL\n        AND COALESCE(\n            ii.value :programId :: STRING,\n            ''\n        ) <> '11111111111111111111111111111111'\n        AND e.program_id IN (\n            -- unknown orca swaps version, seems related to v2\n            'MEV1HDn99aybER3U3oa9MySSXqoEZNDEQ4miAimTjaW',\n            -- orca swaps v2\n            '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP',\n            -- orca swaps v1\n            'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1'\n        )\n\n\nAND e.ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\ndestination_acct_map AS (\n    SELECT\n        tx_id,\n        authority,\n        source\n    FROM\n        destinations\n    GROUP BY\n        1,\n        2,\n        3\n),\nswaps_tmp_1 AS (\n    SELECT\n        COALESCE(\n            s.delegate_owner,\n            s.acct\n        ) AS swapper,\n        COALESCE(\n            p1.owner,\n            d2.authority\n        ) AS destination_owner,\n        COALESCE(\n            p1.mint,\n            p2.mint\n        ) AS mint,\n        COALESCE(\n            p1.decimal,\n            p2.decimal\n        ) AS DECIMAL,\n        d.*\n    FROM\n        destinations d\n        LEFT OUTER JOIN signers s\n        ON s.acct = d.authority\n        AND s.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p1\n        ON p1.middle_acct = d.destination\n        AND p1.tx_id = d.tx_id\n        LEFT OUTER JOIN post_balances_acct_map p2\n        ON p2.middle_acct = d.source\n        AND p2.tx_id = d.tx_id\n        LEFT OUTER JOIN destination_acct_map d2\n        ON d2.source = d.destination\n        AND d2.tx_id = d.tx_id\n),\nswapper_min_rn AS (\n    SELECT\n        DISTINCT s.tx_id,\n        MIN(rn) over (\n            PARTITION BY s.tx_id\n        ) AS min_swapper_rn\n    FROM\n        swaps_tmp_1 s\n    WHERE\n        swapper IS NOT NULL\n),\nswaps_tmp AS (\n    SELECT\n        s.block_id,\n        s.block_timestamp,\n        s.tx_id,\n        s.succeeded,\n        s.swapper,\n        s.destination_owner,\n        s.mint,\n        s.decimal,\n        s.index,\n        s.inner_index,\n        s.destination,\n        s.authority,\n        s.source,\n        s.amount,\n        ROW_NUMBER() over (\n            PARTITION BY s.tx_id\n            ORDER BY\n                s.index,\n                s.inner_index\n        ) AS rn\n    FROM\n        swaps_tmp_1 s\n        INNER JOIN swapper_min_rn m\n        ON s.tx_id = m.tx_id\n    WHERE\n        s.rn >= m.min_swapper_rn\n),\nmint_acct_map AS (\n    SELECT\n        tx_id,\n        source,\n        mint,\n        DECIMAL\n    FROM\n        swaps_tmp\n    GROUP BY\n        1,\n        2,\n        3,\n        4\n),\nswap_actions AS (\n    SELECT\n        s1.block_id,\n        s1.block_timestamp,\n        s1.tx_id,\n        s1.succeeded,\n        s1.swapper,\n        s1.destination_owner,\n        s1.destination,\n        s1.source,\n        COALESCE(\n            s1.mint,\n            s2.mint\n        ) AS mint,\n        COALESCE(\n            s1.decimal,\n            s2.decimal\n        ) AS DECIMAL,\n        s1.amount :: bigint AS amount,\n        s1.rn\n    FROM\n        swaps_tmp s1\n        LEFT OUTER JOIN mint_acct_map s2\n        ON s1.destination = s2.source\n        AND s1.tx_id = s2.tx_id\n),\nswap_actions_with_refund AS (\n    SELECT\n        s1.*,\n        s3.mint AS originating_mint,\n        CASE\n            WHEN s2.amount < s1.amount THEN s2.amount\n            ELSE NULL\n        END AS refund,\n        MAX(refund) over (\n            PARTITION BY s1.tx_id\n        ) AS max_refund,\n        s1.amount - COALESCE(\n            refund,\n            0\n        ) AS final_amt\n    FROM\n        swap_actions s1\n        LEFT OUTER JOIN swap_actions s2\n        ON s1.tx_id = s2.tx_id\n        AND s1.swapper = s2.destination_owner\n        AND s1.mint = s2.mint\n        AND s1.rn = 1\n        LEFT OUTER JOIN swap_actions s3\n        ON s1.tx_id = s3.tx_id\n        AND s3.rn = 1\n),\nswap_actions_final AS (\n    SELECT\n        *\n    FROM\n        swap_actions_with_refund\n    WHERE\n        swapper IS NOT NULL\n        OR mint <> originating_mint\n        OR (\n            originating_mint = mint\n            AND max_refund IS NULL\n        ) -- need to do this for situations where it appears the user swaps back to the same mint...\n),\nagg_tmp AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        swapper,\n        mint,\n        DECIMAL,\n        SUM(final_amt) AS amt,\n        MIN(rn) AS rn\n    FROM\n        swap_actions_final\n    GROUP BY\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n),\nagg AS (\n    SELECT\n        *,\n        MAX(rn) over (\n            PARTITION BY tx_id\n        ) AS max_rn\n    FROM\n        agg_tmp\n    WHERE\n        amt <> 0\n)\nSELECT\n    a1.block_id,\n    a1.block_timestamp,\n    a1.tx_id,\n    a1.succeeded,\n    a1.swapper,\n    a1.mint AS from_mint,\n    CASE\n        WHEN a1.succeeded THEN a1.amt * pow(\n            10,- a1.decimal\n        )\n        ELSE 0\n    END AS from_amt,\n    a2.mint AS to_mint,\n    CASE\n        WHEN a1.succeeded THEN a2.amt * pow(\n            10,- a2.decimal\n        )\n        ELSE 0\n    END AS to_amt\nFROM\n    agg a1\n    LEFT OUTER JOIN agg a2\n    ON a1.tx_id = a2.tx_id\n    AND a1.rn <> a2.rn\n    AND a2.rn = a2.max_rn\nWHERE\n    a1.rn = 1\n    AND to_amt IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.swaps_orca_dex"}, "model.solana_models.silver__staking_lp_actions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', block_id, tx_id, index)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH base_e AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        INDEX,\n        event_type,\n        program_id,\n        instruction,\n        inner_instruction\n    FROM\n        {{ ref('silver__events') }}\n    WHERE\n         program_id = 'Stake11111111111111111111111111111111111111'\n\n{% if is_incremental() %}\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nbase_t AS (\n    SELECT\n        block_id,\n        tx_id,\n        succeeded,\n        signers,\n        pre_balances,\n        post_balances,\n        pre_token_balances,\n        post_token_balances,\n        account_keys\n    FROM\n        {{ ref('silver__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n)\nSELECT\n    e.block_id,\n    e.block_timestamp,\n    e.tx_id,\n    t.succeeded,\n    e.index,\n    e.event_type,\n    e.program_id,\n    t.signers,\n    t.account_keys,\n    e.instruction,\n    e.inner_instruction,\n    t.pre_balances,\n    t.post_balances,\n    t.pre_token_balances,\n    t.post_token_balances\nFROM\n    base_e e\n    LEFT OUTER JOIN base_t t\n    ON t.block_id = e.block_id\n    AND t.tx_id = e.tx_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver__staking_lp_actions"], "unique_id": "model.solana_models.silver__staking_lp_actions", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver__staking_lp_actions.sql", "original_file_path": "models/silver/silver__staking_lp_actions.sql", "name": "silver__staking_lp_actions", "alias": "staking_lp_actions", "checksum": {"name": "sha256", "checksum": "b2ed15a5385aff220f1c8d0565565ad344000eccf11fe19bc5dc6687a94f3874"}, "tags": [], "refs": [["silver__events"], ["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "Slot for which a block can be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "Location of the event within the instructions of a transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "True when a transaction is successful, otherwise false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIGNERS": {"name": "SIGNERS", "description": "List of accounts that signed the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACCOUNT_KEYS": {"name": "ACCOUNT_KEYS", "description": "List of accounts that are referenced by pre/post sol/token balances objects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSTRUCTION": {"name": "INSTRUCTION", "description": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INNER_INSTRUCTION": {"name": "INNER_INSTRUCTION", "description": "A call from one smart contract program to another", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_BALANCES": {"name": "PRE_BALANCES", "description": "List of pre-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_BALANCES": {"name": "POST_BALANCES", "description": "List of post-transaction balances for different accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRE_TOKEN_BALANCES": {"name": "PRE_TOKEN_BALANCES", "description": "List of pre-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POST_TOKEN_BALANCES": {"name": "POST_TOKEN_BALANCES", "description": "List of post-transaction token balances for different token accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver__staking_lp_actions.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', block_id, tx_id, index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1649447655.574355, "compiled_sql": "\n\nWITH base_e AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        INDEX,\n        event_type,\n        program_id,\n        instruction,\n        inner_instruction\n    FROM\n        SOLANA.silver.events\n    WHERE\n         program_id = 'Stake11111111111111111111111111111111111111'\n\n\nAND ingested_at :: DATE >= CURRENT_DATE - 2\n\n),\nbase_t AS (\n    SELECT\n        block_id,\n        tx_id,\n        succeeded,\n        signers,\n        pre_balances,\n        post_balances,\n        pre_token_balances,\n        post_token_balances,\n        account_keys\n    FROM\n        SOLANA.silver.transactions\n\n\nWHERE\n    ingested_at :: DATE >= CURRENT_DATE - 2\n\n)\nSELECT\n    e.block_id,\n    e.block_timestamp,\n    e.tx_id,\n    t.succeeded,\n    e.index,\n    e.event_type,\n    e.program_id,\n    t.signers,\n    t.account_keys,\n    e.instruction,\n    e.inner_instruction,\n    t.pre_balances,\n    t.post_balances,\n    t.pre_token_balances,\n    t.post_token_balances\nFROM\n    base_e e\n    LEFT OUTER JOIN base_t t\n    ON t.block_id = e.block_id\n    AND t.tx_id = e.tx_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver.staking_lp_actions"}, "model.solana_models.silver___prices": {"raw_sql": "{{ config(\n    materialized = 'view',\n) }}\n\nSELECT\n    recorded_at,\n    symbol,\n    price,\n    total_supply,\n    volume_24h,\n    provider\nFROM\n    {{ source(\n        'shared',\n        'prices_v2'\n    ) }}\nWHERE\n    (\n        provider = 'coinmarketcap'\n        AND (\n            asset_id = '5426'\n            OR asset_id = '8526'\n            OR asset_id = '11461'\n            OR asset_id = '9549'\n            OR asset_id = '12297'\n            OR asset_id = '9015'\n            OR asset_id = '7978'\n            OR asset_id = '12236'\n            OR asset_id = '11171'\n            OR asset_id = '13524'\n            OR asset_id = '6187'\n            OR asset_id = '3408'\n            OR asset_id = '825'\n            OR asset_id = '7129'\n            OR asset_id = '4195'\n            OR asset_id = '11181'\n        )\n    )\n    OR (\n        provider = 'coingecko'\n        AND (\n            asset_id = 'solana'\n            OR asset_id = 'cope'\n            OR asset_id = 'bonfida'\n            OR asset_id = 'jet'\n            OR asset_id = 'mercurial'\n            OR asset_id = 'mango-markets'\n            OR asset_id = 'msol'\n            OR asset_id = 'raydium'\n            OR asset_id = 'saber'\n            OR asset_id = 'solend'\n            OR asset_id = 'serum'\n            OR asset_id = 'lido-staked-sol'\n            OR asset_id = 'ftx-token'\n            OR asset_id = 'usd-coin'\n            OR asset_id = 'tether'\n            OR asset_id = 'terrausd'\n        )\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.solana_models.shared.prices_v2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "silver", "fqn": ["solana_models", "silver", "silver___prices"], "unique_id": "model.solana_models.silver___prices", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "silver/silver___prices.sql", "original_file_path": "models/silver/silver___prices.sql", "name": "silver___prices", "alias": "_prices", "checksum": {"name": "sha256", "checksum": "b37d603be76266cfcc2a254eb99fb31eb95aa3fa1c656ee7d1a3fafbefcc3f5e"}, "tags": [], "refs": [], "sources": [["shared", "prices_v2"]], "description": "", "columns": {"RECORDED_AT": {"name": "RECORDED_AT", "description": "Time that the price was recorded at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "Symbol of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "Price of the token at the recorded time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SUPPLY": {"name": "TOTAL_SUPPLY", "description": "Total supply of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOLUME_24H": {"name": "VOLUME_24H", "description": "Total volume of token traded in a 24H time period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROVIDER": {"name": "PROVIDER", "description": "Name of the provider of the price information", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "solana_models://models/silver/silver___prices.yml", "compiled_path": "target/compiled/solana_models/models/silver/silver___prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1649447655.587094, "compiled_sql": "\n\nSELECT\n    recorded_at,\n    symbol,\n    price,\n    total_supply,\n    volume_24h,\n    provider\nFROM\n    flipside_prod_db.silver.prices_v2\nWHERE\n    (\n        provider = 'coinmarketcap'\n        AND (\n            asset_id = '5426'\n            OR asset_id = '8526'\n            OR asset_id = '11461'\n            OR asset_id = '9549'\n            OR asset_id = '12297'\n            OR asset_id = '9015'\n            OR asset_id = '7978'\n            OR asset_id = '12236'\n            OR asset_id = '11171'\n            OR asset_id = '13524'\n            OR asset_id = '6187'\n            OR asset_id = '3408'\n            OR asset_id = '825'\n            OR asset_id = '7129'\n            OR asset_id = '4195'\n            OR asset_id = '11181'\n        )\n    )\n    OR (\n        provider = 'coingecko'\n        AND (\n            asset_id = 'solana'\n            OR asset_id = 'cope'\n            OR asset_id = 'bonfida'\n            OR asset_id = 'jet'\n            OR asset_id = 'mercurial'\n            OR asset_id = 'mango-markets'\n            OR asset_id = 'msol'\n            OR asset_id = 'raydium'\n            OR asset_id = 'saber'\n            OR asset_id = 'solend'\n            OR asset_id = 'serum'\n            OR asset_id = 'lido-staked-sol'\n            OR asset_id = 'ftx-token'\n            OR asset_id = 'usd-coin'\n            OR asset_id = 'tether'\n            OR asset_id = 'terrausd'\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SOLANA.silver._prices"}, "operation.solana_models.solana_models-on-run-start-0": {"raw_sql": "{{create_sps()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "solana_models-on-run-start-0", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-0"], "unique_id": "operation.solana_models.solana_models-on-run-start-0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "hooks/solana_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "solana_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "800af90524e5f61c2f35aad4f362132cc2745f8b0534929f7a91de7d7a752e28"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/./dbt_project.yml/hooks/solana_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1649447654.978113, "compiled_sql": "\n    \n        CREATE SCHEMA IF NOT EXISTS _internal;\n        create or replace procedure _internal.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$;\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.solana_models.solana_models-on-run-start-1": {"raw_sql": "{{create_tasks()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.solana_models.create_tasks"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "SOLANA", "schema": "solana_models-on-run-start-1", "fqn": ["solana_models", "hooks", "solana_models-on-run-start-1"], "unique_id": "operation.solana_models.solana_models-on-run-start-1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "hooks/solana_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "solana_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "800af90524e5f61c2f35aad4f362132cc2745f8b0534929f7a91de7d7a752e28"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/./dbt_project.yml/hooks/solana_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1649447654.981743, "compiled_sql": "\n    \n        CREATE SCHEMA IF NOT EXISTS _internal;\n        create or replace task _internal.run_sp_create_prod_clone\n        warehouse = dbt_cloud\n        schedule = 'USING CRON 15 10 * * * UTC'\n    as\n        call _internal.create_prod_clone('solana', 'solana_dev', 'internal_dev');\n\n    alter task _internal.run_sp_create_prod_clone resume;\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9.sql", "original_file_path": "models/core/core__fact_votes_agg_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP", "alias": "fact_votes_agg_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_votes_agg_block.yml/dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d5f9b9a7456fc6d7ba6b4bac598b4da9"}, "created_at": 1649447655.0129988, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_votes_agg_block"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e.sql", "original_file_path": "models/core/core__fact_votes_agg_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID", "alias": "fact_votes_agg_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_votes_agg_block.yml/dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_57f0f413292d4dd5c74f41bd562b5f7e"}, "created_at": 1649447655.018656, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_votes_agg_block"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NUM_VOTES", "model": "{{ get_where_subquery(ref('core__fact_votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06.sql", "original_file_path": "models/core/core__fact_votes_agg_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES", "alias": "fact_votes_agg_block_NUM_VOTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_votes_agg_block.yml/dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cb344a99cc4f1360f8cdc44c67ecea06"}, "created_at": 1649447655.020572, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'NUM_VOTES' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUM_VOTES", "file_key_name": "models.core__fact_votes_agg_block"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP", "alias": "fact_nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5049de8729bc5d8a15a58db2ea50452e"}, "created_at": 1649447655.024162, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID", "alias": "fact_nft_mints_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_28fd3d0743732df780c113088f49123b"}, "created_at": 1649447655.026033, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID", "alias": "fact_nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a292f98a3ef6ab04afb7182a0167d99a"}, "created_at": 1649447655.027937, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED", "alias": "fact_nft_mints_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_29934d9f7fd374c9c85a52b6efa25a67"}, "created_at": 1649447655.029705, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID", "alias": "fact_nft_mints_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f9c17d3f22d2884076d0ca1fd38c8ad6"}, "created_at": 1649447655.031605, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROGRAM_ID' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER", "alias": "fact_nft_mints_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c800d613f146551365b5ef4a6916d64a"}, "created_at": 1649447655.0334988, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PURCHASER' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE", "alias": "fact_nft_mints_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2831f161d06164bb6d6bd449eeb57882"}, "created_at": 1649447655.035278, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT_PRICE' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT_PRICE", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT_CURRENCY", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY", "alias": "fact_nft_mints_MINT_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_72f2d3c3985ebd450c3bb7abf59b4d85"}, "created_at": 1649447655.037455, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT_CURRENCY' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT_CURRENCY", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT", "alias": "fact_nft_mints_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_mints.yml/dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4e41305c4dd9538105982a01d2f7111"}, "created_at": 1649447655.039354, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.core__fact_nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295"}, "created_at": 1649447655.042932, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6"}, "created_at": 1649447655.044832, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK", "alias": "fact_blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4"}, "created_at": 1649447655.046605, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'NETWORK' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NETWORK", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6"}, "created_at": 1649447655.048477, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'CHAIN_ID' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a"}, "created_at": 1649447655.0503669, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_COUNT' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dff22e7b0640b30d4e4c195e15e70e35"}, "created_at": 1649447655.052141, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_HEIGHT' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_065a1414150952b1a2e1542323685686\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_065a1414150952b1a2e1542323685686.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686"}, "created_at": 1649447655.0540211, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_HASH' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PREVIOUS_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID", "alias": "fact_blocks_PREVIOUS_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3bd05ca4121040b06c5d338f5a667a44"}, "created_at": 1649447655.055912, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PREVIOUS_BLOCK_ID' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREVIOUS_BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PREVIOUS_BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH", "alias": "fact_blocks_PREVIOUS_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dd1e96a18587c65278225a3b10aba7d4"}, "created_at": 1649447655.057678, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PREVIOUS_BLOCK_HASH' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREVIOUS_BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP", "alias": "fact_staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_def19d5bcdf933c142884ca0cbca2959"}, "created_at": 1649447655.062231, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID", "alias": "fact_staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c540cb2b753466abbbf19a7ec1f9fbc5"}, "created_at": 1649447655.064121, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID", "alias": "fact_staking_lp_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_37b76c976f924f7d87988bd2fbaeb9e3"}, "created_at": 1649447655.065894, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX", "alias": "fact_staking_lp_actions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fee3a0112ead16e1405e900512002b1d"}, "created_at": 1649447655.067776, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INDEX' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED", "alias": "fact_staking_lp_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a2de4af29c1638dc545112b2667a53df"}, "created_at": 1649447655.069816, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID", "alias": "fact_staking_lp_actions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_61d838eb46c539bc8580f9f07eb371c5"}, "created_at": 1649447655.0715818, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROGRAM_ID' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE", "alias": "fact_staking_lp_actions_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6a312c0670f53ec7a2f26f5ab37b2f2a"}, "created_at": 1649447655.073452, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'EVENT_TYPE' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNERS", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS", "alias": "fact_staking_lp_actions_SIGNERS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3f9184481c21b212b6fe5577f58640e9"}, "created_at": 1649447655.075326, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SIGNERS' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNERS", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS", "alias": "fact_staking_lp_actions_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_80ff0970bb75525f76c7ca15deaa7f2e"}, "created_at": 1649447655.077085, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'ACCOUNT_KEYS' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_KEYS", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fe006260673f2013100162afceccf965\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fe006260673f2013100162afceccf965", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_fe006260673f2013100162afceccf965.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION", "alias": "fact_staking_lp_actions_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_fe006260673f2013100162afceccf965.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fe006260673f2013100162afceccf965"}, "created_at": 1649447655.078959, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INSTRUCTION' as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INSTRUCTION", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INNER_INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION", "alias": "fact_staking_lp_actions_INNER_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9d1268980c9ff7a8215f31e566bac5e8"}, "created_at": 1649447655.080833, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INNER_INSTRUCTION' as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_INSTRUCTION", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES", "alias": "fact_staking_lp_actions_PRE_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a34936725ea506e88570689c13a412b"}, "created_at": 1649447655.0825942, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PRE_BALANCES' as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRE_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES", "alias": "fact_staking_lp_actions_POST_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_07adaeade842737dbec82f85c6daa168"}, "created_at": 1649447655.084676, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'POST_BALANCES' as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POST_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES", "alias": "fact_staking_lp_actions_PRE_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_14b56365fb63f4af489e8f021969a3de"}, "created_at": 1649447655.086688, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PRE_TOKEN_BALANCES' as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRE_TOKEN_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7.sql", "original_file_path": "models/core/core__fact_staking_lp_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES", "alias": "fact_staking_lp_actions_POST_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_staking_lp_actions.yml/dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_688d1eefc5228603c5dc0558f210cff7"}, "created_at": 1649447655.0884879, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'POST_TOKEN_BALANCES' as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POST_TOKEN_BALANCES", "file_key_name": "models.core__fact_staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN", "alias": "dim_nft_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_57bde110489414724b1ae6482943c3da"}, "created_at": 1649447655.092831, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCKCHAIN' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS", "alias": "dim_nft_metadata_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fd2ee804bf1158c8b0665411d73a307e"}, "created_at": 1649447655.094636, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'CONTRACT_ADDRESS' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME", "alias": "dim_nft_metadata_CONTRACT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_feb1c0e68f4ad664c9cedc21fec921f8"}, "created_at": 1649447655.096538, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'CONTRACT_NAME' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATED_AT_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP", "alias": "dim_nft_metadata_CREATED_AT_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1ce8c6232474a30140ef18db14847a8b"}, "created_at": 1649447655.0984151, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'CREATED_AT_TIMESTAMP' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATED_AT_TIMESTAMP", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT", "alias": "dim_nft_metadata_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_49336f1102afe9d120f24145e74bb696"}, "created_at": 1649447655.100328, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS", "alias": "dim_nft_metadata_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cf4b18dca20bbcf0fb5059d52e9e68fd"}, "created_at": 1649447655.1020942, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'CREATOR_ADDRESS' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME", "alias": "dim_nft_metadata_CREATOR_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d5e0fd63ce1069b128066a1bd1497f12"}, "created_at": 1649447655.104183, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'CREATOR_NAME' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "IMAGE_URL", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL", "alias": "dim_nft_metadata_IMAGE_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_262a6e5707bac28ae369ffd03e319eaa"}, "created_at": 1649447655.10606, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'IMAGE_URL' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE_URL", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME", "alias": "dim_nft_metadata_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5c012f2f956bf64d664704e66d9c30aa"}, "created_at": 1649447655.107828, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROJECT_NAME' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID", "alias": "dim_nft_metadata_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e7ba48e73dc955366a57afa1f2ac4f8b"}, "created_at": 1649447655.109699, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TOKEN_ID' as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_ID", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_METADATA", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA", "alias": "dim_nft_metadata_TOKEN_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ef34c8b6e8d29aa7fbebddb412c4fb34"}, "created_at": 1649447655.111592, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TOKEN_METADATA' as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_METADATA", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_METADATA_URI", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI", "alias": "dim_nft_metadata_TOKEN_METADATA_URI", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2910bc04979ecb36f3a4e305a5b748fe"}, "created_at": 1649447655.113364, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TOKEN_METADATA_URI' as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_METADATA_URI", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_NAME", "model": "{{ get_where_subquery(ref('core__dim_nft_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b.sql", "original_file_path": "models/core/core__dim_nft_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME", "alias": "dim_nft_metadata_TOKEN_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_nft_metadata.yml/dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0c1729d182f4346b7fafa8a7d3a55c5b"}, "created_at": 1649447655.115247, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TOKEN_NAME' as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_NAME", "file_key_name": "models.core__dim_nft_metadata"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8"}, "created_at": 1649447655.1194081, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e"}, "created_at": 1649447655.121273, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH", "alias": "fact_transactions_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_149285cfc51400ccbf664b4d571803e4"}, "created_at": 1649447655.1231549, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'RECENT_BLOCK_HASH' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID", "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce"}, "created_at": 1649447655.1249359, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE", "alias": "fact_transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452"}, "created_at": 1649447655.126838, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'FEE' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED", "alias": "fact_transactions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dcf3ab73e1f7d718a72b610c2ad7d9a6"}, "created_at": 1649447655.128714, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNERS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS", "alias": "fact_transactions_SIGNERS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6e5f69db830ada75a25e3e3ee79102d7"}, "created_at": 1649447655.1304681, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SIGNERS' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNERS", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS", "alias": "fact_transactions_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ff772ea71d61c1e6762991b0144214db"}, "created_at": 1649447655.1323578, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'ACCOUNT_KEYS' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_KEYS", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES", "alias": "fact_transactions_PRE_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_57fcbdd147d5a75140137142bc90b689"}, "created_at": 1649447655.134225, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PRE_BALANCES' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRE_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES", "alias": "fact_transactions_POST_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_43a5b66c9ec1da484490f34be53632fa"}, "created_at": 1649447655.1359758, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'POST_BALANCES' as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POST_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PRE_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES", "alias": "fact_transactions_PRE_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4857c1e15ba5cbdd884f3b826211c209"}, "created_at": 1649447655.138092, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PRE_TOKEN_BALANCES' as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRE_TOKEN_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POST_TOKEN_BALANCES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES", "alias": "fact_transactions_POST_TOKEN_BALANCES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b026db26bd21b5e163e40195a8f7bc2d"}, "created_at": 1649447655.1399412, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'POST_TOKEN_BALANCES' as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POST_TOKEN_BALANCES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOG_MESSAGES", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES", "alias": "fact_transactions_LOG_MESSAGES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c6eaf56690c96fd246e60a639308d624"}, "created_at": 1649447655.141681, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'LOG_MESSAGES' as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOG_MESSAGES", "file_key_name": "models.core__fact_transactions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP", "alias": "fact_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f474eab7717de5a4ac729d55a87ab700"}, "created_at": 1649447655.145194, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID", "alias": "fact_events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a5375bfee54e4bc02b56d82f1d3e8dd"}, "created_at": 1649447655.146963, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID", "alias": "fact_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.148837, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_INDEX", "alias": "fact_events_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.15057, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INDEX' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID", "alias": "fact_events_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4c94030e8a34ef9ad0f45e91aefecf6c"}, "created_at": 1649447655.152204, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROGRAM_ID' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION", "alias": "fact_events_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e8b01a99b8cce389862c89b0846a4cfe"}, "created_at": 1649447655.15411, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INSTRUCTION' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INSTRUCTION", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c78d848b64637563248f7a3067541198\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INNER_INSTRUCTION", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c78d848b64637563248f7a3067541198", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_c78d848b64637563248f7a3067541198.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION", "alias": "fact_events_INNER_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_events.yml/dbt_expectations_expect_column_c78d848b64637563248f7a3067541198.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c78d848b64637563248f7a3067541198"}, "created_at": 1649447655.155981, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INNER_INSTRUCTION' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INNER_INSTRUCTION", "file_key_name": "models.core__fact_events"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_PROGRAM", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM", "alias": "fact_swaps_SWAP_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_16385cbe8c844a90b4406952cc66e992"}, "created_at": 1649447655.1597178, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SWAP_PROGRAM' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_PROGRAM", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP", "alias": "fact_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_403ce39b909dc0eb6f4abe35252ea392"}, "created_at": 1649447655.16159, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID", "alias": "fact_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3e810007dd6043936564c7969d5f0ea7"}, "created_at": 1649447655.1634948, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID", "alias": "fact_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.165471, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED", "alias": "fact_swaps_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_70b6ca34ba4a7da2608e3cc5dfed0578"}, "created_at": 1649447655.1673138, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER", "alias": "fact_swaps_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a9a3e09da4f3a00781105e20d0aaa4fc"}, "created_at": 1649447655.1695051, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SWAPPER' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_FROM_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT", "alias": "fact_swaps_SWAP_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_594b6c2fb4177e21d3fe10acd2dfee7f"}, "created_at": 1649447655.1713011, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SWAP_FROM_AMOUNT' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_FROM_AMOUNT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_FROM_MINT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT", "alias": "fact_swaps_SWAP_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_104ae770b72cb1f45988c703d0b67e8d"}, "created_at": 1649447655.173185, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SWAP_FROM_MINT' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_FROM_MINT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_TO_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT", "alias": "fact_swaps_SWAP_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b31d6f2341460039c60a64b104c6661a"}, "created_at": 1649447655.175092, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SWAP_TO_AMOUNT' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_TO_AMOUNT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAP_TO_MINT", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT", "alias": "fact_swaps_SWAP_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_863ace7e43f023225fd8961337c4a268"}, "created_at": 1649447655.1768801, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SWAP_TO_MINT' as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAP_TO_MINT", "file_key_name": "models.core__fact_swaps"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP", "alias": "fact_nft_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a7b1268f162e6fa84c4f2be644e5b687"}, "created_at": 1649447655.180316, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_821d139a358757596874003b544ef9ab\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_821d139a358757596874003b544ef9ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_821d139a358757596874003b544ef9ab.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID", "alias": "fact_nft_sales_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_821d139a358757596874003b544ef9ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_821d139a358757596874003b544ef9ab"}, "created_at": 1649447655.182241, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID", "alias": "fact_nft_sales_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f83e21d22717cabd885cd90e5f3ba2a3"}, "created_at": 1649447655.184155, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED", "alias": "fact_nft_sales_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_58dfcb5ec75c6446dbea1060620912fb"}, "created_at": 1649447655.185945, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID", "alias": "fact_nft_sales_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ef5db23b6f85db1f076cad7731b718db"}, "created_at": 1649447655.187867, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROGRAM_ID' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER", "alias": "fact_nft_sales_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0663a43bf32ea480ee672145ee1090d4"}, "created_at": 1649447655.1897721, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PURCHASER' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT", "alias": "fact_nft_sales_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_03cb5aab87e2f913a198c8d375795d02"}, "created_at": 1649447655.191544, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT", "alias": "fact_nft_sales_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f499c0dccb4187a3512a6bcc26e7e16a"}, "created_at": 1649447655.1934469, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SALES_AMOUNT' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SALES_AMOUNT", "file_key_name": "models.core__fact_nft_sales"}, "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_BLOCKCHAIN"], "unique_id": "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_BLOCKCHAIN", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/not_null_core__dim_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.196578, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_CREATOR"], "unique_id": "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_CREATOR", "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/not_null_core__dim_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.197493, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_LABEL_TYPE"], "unique_id": "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_TYPE", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/not_null_core__dim_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.19826, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc"}, "created_at": 1649447655.1990368, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from SOLANA.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        'flotsam' as value_field\n    union all\n    select\n        'nft' as value_field\n    union all\n    select\n        'defi' as value_field\n    union all\n    select\n        'dex' as value_field\n    union all\n    select\n        'cex' as value_field\n    union all\n    select\n        'dapp' as value_field\n    union all\n    select\n        'token' as value_field\n    union all\n    select\n        'operator' as value_field\n    union all\n    select\n        'layer2' as value_field\n    union all\n    select\n        'chadmin' as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_LABEL_SUBTYPE"], "unique_id": "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/not_null_core__dim_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.203653, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_LABEL"], "unique_id": "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_core__dim_labels_LABEL.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL", "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/not_null_core__dim_labels_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.204842, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.core.dim_labels\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL", "file_key_name": "models.core__dim_labels"}, "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_core", "fqn": ["solana_models", "core", "not_null_core__dim_labels_ADDRESS"], "unique_id": "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_ADDRESS", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__dim_labels.yml/not_null_core__dim_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.2056031, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME", "alias": "fact_gov_actions_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c514e3523d0bc6bf8f47337fb5df0175"}, "created_at": 1649447655.208881, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROGRAM_NAME' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP", "alias": "fact_gov_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9b9e98595486a991f90003898e93674e"}, "created_at": 1649447655.2110488, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID", "alias": "fact_gov_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8e91138cc6792dfec2cc84eead29997b"}, "created_at": 1649447655.21287, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID", "alias": "fact_gov_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d8a3a4ba0ef7fee25c5b0fe1d4f8933f"}, "created_at": 1649447655.214786, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED", "alias": "fact_gov_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_135a74f397d4ab7a980999c2cdcb3bae"}, "created_at": 1649447655.21682, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER", "alias": "fact_gov_actions_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3ceccac86151821cc21cbfa2bc971027"}, "created_at": 1649447655.219139, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SIGNER' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNER", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOCKER_ACCOUNT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT", "alias": "fact_gov_actions_LOCKER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_acf946a4c0fda084c865886b0056cd3c"}, "created_at": 1649447655.221161, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'LOCKER_ACCOUNT' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOCKER_ACCOUNT", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT", "alias": "fact_gov_actions_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d50ecad11408305b59a8eb90059a5488"}, "created_at": 1649447655.223134, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION", "alias": "fact_gov_actions_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d3f1c9af6a5f1bdb6cc5bf5c5cefadb4"}, "created_at": 1649447655.2250319, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'ACTION' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb.sql", "original_file_path": "models/core/core__fact_gov_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT", "alias": "fact_gov_actions_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gov_actions.yml/dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3817b08a818f01290fa537da9e15fceb"}, "created_at": 1649447655.2269928, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'AMOUNT' as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.core__fact_gov_actions"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_NAME", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME", "alias": "fact_gauges_votes_PROGRAM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_eafb75b4131651d009a61c5140ffe0d7"}, "created_at": 1649447655.230678, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'PROGRAM_NAME' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_NAME", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP", "alias": "fact_gauges_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ad3479aa95e7f6e67c74d90a7429943a"}, "created_at": 1649447655.232585, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID", "alias": "fact_gauges_votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_15e3a0aa30829e8b6e9a05b0f01f5d8f"}, "created_at": 1649447655.2345119, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID", "alias": "fact_gauges_votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a42d4f46239e25b741e70693c7c1aa5f"}, "created_at": 1649447655.23629, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED", "alias": "fact_gauges_votes_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cefdfc4cc0a83bb219d7b6db381cfc52"}, "created_at": 1649447655.238185, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER", "alias": "fact_gauges_votes_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d91dfa62cc370a62f97a5150d53bc59c"}, "created_at": 1649447655.240303, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'VOTER' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VOTER", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE", "alias": "fact_gauges_votes_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_48f78175ddc3de2e6195b09aa58ebc56"}, "created_at": 1649447655.242087, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'GAUGE' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAUGE", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATED_SHARES", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES", "alias": "fact_gauges_votes_DELEGATED_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b009d9f056d62b7c09663bdc42189765"}, "created_at": 1649447655.243975, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'DELEGATED_SHARES' as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DELEGATED_SHARES", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "POWER", "model": "{{ get_where_subquery(ref('core__fact_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa.sql", "original_file_path": "models/core/core__fact_gauges_votes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER", "alias": "fact_gauges_votes_POWER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_gauges_votes.yml/dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b36ce5d92d800e83f81fc216cc67d4aa"}, "created_at": 1649447655.245863, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'POWER' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POWER", "file_key_name": "models.core__fact_gauges_votes"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56"}, "created_at": 1649447655.2493298, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_TIMESTAMP' as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06ec7a899413bab6063716744517f718\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID", "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718"}, "created_at": 1649447655.251104, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'BLOCK_ID' as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID", "alias": "fact_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0"}, "created_at": 1649447655.2529979, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_ID' as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX", "alias": "fact_transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ccbccf1d0e05cfa222243c3c12197b26"}, "created_at": 1649447655.254868, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'INDEX' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM", "alias": "fact_transfers_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c99e7cd62a105e541348090ddf567ee2"}, "created_at": 1649447655.2567859, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_FROM' as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FROM", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO", "alias": "fact_transfers_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_278d6d9b38d1714d06d30f4fb33d6273"}, "created_at": 1649447655.258572, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'TX_TO' as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT", "alias": "fact_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5"}, "created_at": 1649447655.260463, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'AMOUNT' as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["solana_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT", "alias": "fact_transfers_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_485c2ce22a0f51937b68ea7bf85e30f8"}, "created_at": 1649447655.262346, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'MINT' as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.core__fact_transfers"}, "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP", "alias": "swaps_saber_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.266015, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_saber_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_a3f393a5e4bcf58b9d59a3cdee66f9ec"}, "created_at": 1649447655.266825, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.swaps_saber_dex\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_BLOCK_ID", "alias": "swaps_saber_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.277311, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_TX_ID.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_TX_ID", "alias": "swaps_saber_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.278083, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_SUCCEEDED.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_SUCCEEDED", "alias": "swaps_saber_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.279234, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_SWAPPER.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_SWAPPER", "alias": "swaps_saber_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.2799969, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_FROM_AMT.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_FROM_AMT", "alias": "swaps_saber_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.28076, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_FROM_MINT.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_FROM_MINT", "alias": "swaps_saber_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.281512, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_TO_AMT.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_TO_AMT", "alias": "swaps_saber_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.282371, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_saber_dex\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_saber_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_saber_dex_TO_MINT.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "not_null_silver__swaps_saber_dex_TO_MINT", "alias": "swaps_saber_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/not_null_silver__swaps_saber_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.283293, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_saber_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_saber_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_saber_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673.sql", "original_file_path": "models/silver/silver__swaps_saber_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID", "alias": "swaps_saber_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_saber_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_saber_dex.yml/dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f348fbb2c44abd4a2d329c66403d3673"}, "created_at": 1649447655.284065, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA.silver.swaps_saber_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_saber_dex"}, "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP", "alias": "nft_sales_solanart_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.290713, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_solanart_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4430229655074b866327c5d0d34da14b"}, "created_at": 1649447655.291517, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.nft_sales_solanart\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_BLOCK_ID", "alias": "nft_sales_solanart_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.2940521, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_TX_ID.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_TX_ID", "alias": "nft_sales_solanart_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.294938, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_SUCCEEDED.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_SUCCEEDED", "alias": "nft_sales_solanart_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.295697, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_PROGRAM_ID", "alias": "nft_sales_solanart_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.296471, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_PURCHASER", "alias": "nft_sales_solanart_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.2972229, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_MINT.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_MINT", "alias": "nft_sales_solanart_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.298269, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.nft_sales_solanart where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_SALES_AMOUNT", "alias": "nft_sales_solanart_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.299045, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solanart_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solanart_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "not_null_silver__nft_sales_solanart_INGESTED_AT", "alias": "nft_sales_solanart_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/not_null_silver__nft_sales_solanart_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.299802, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solanart\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT"], "model": "{{ get_where_subquery(ref('silver__nft_sales_solanart')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solanart"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7.sql", "original_file_path": "models/silver/silver__nft_sales_solanart.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT", "alias": "nft_sales_solanart_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solanart"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solanart.yml/dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ba96253625d8c817856ceeb9f05c81c7"}, "created_at": 1649447655.300687, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT\n    from SOLANA.silver.nft_sales_solanart\n    group by TX_ID, MINT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_solanart"}, "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.46e200119f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.46e200119f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP", "alias": "saber_gauges_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.304538, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2.2d4562d0eb": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_af3c828562ddacc4c61f547e7c15fea9\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_af3c828562ddacc4c61f547e7c15fea9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2.2d4562d0eb", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_af3c828562ddacc4c61f547e7c15fea9.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2", "alias": "saber_gauges_votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/dbt_expectations_expect_row_va_af3c828562ddacc4c61f547e7c15fea9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_af3c828562ddacc4c61f547e7c15fea9"}, "created_at": 1649447655.3053398, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.saber_gauges_votes\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_ID.c375e59690": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_ID.c375e59690", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_BLOCK_ID.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_BLOCK_ID", "alias": "saber_gauges_votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.30786, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_TX_ID.7026cc1de2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_TX_ID"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_TX_ID.7026cc1de2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_TX_ID.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_TX_ID", "alias": "saber_gauges_votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.308753, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_SUCCEEDED.49238ee4a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_SUCCEEDED.49238ee4a9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_SUCCEEDED.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_SUCCEEDED", "alias": "saber_gauges_votes_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.309514, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_VOTER.6a6f58323e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTER", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_VOTER"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_VOTER.6a6f58323e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_VOTER.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_VOTER", "alias": "saber_gauges_votes_VOTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_VOTER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.310268, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere VOTER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VOTER", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_GAUGE.9e4fde5f22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAUGE", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_GAUGE"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_GAUGE.9e4fde5f22", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_GAUGE.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_GAUGE", "alias": "saber_gauges_votes_GAUGE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_GAUGE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.311014, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere GAUGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAUGE", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_DELEGATED_SHARES.3905d6ea47": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATED_SHARES", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_DELEGATED_SHARES"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_DELEGATED_SHARES.3905d6ea47", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_DELEGATED_SHARES.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_DELEGATED_SHARES", "alias": "saber_gauges_votes_DELEGATED_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_DELEGATED_SHARES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.311879, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere DELEGATED_SHARES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DELEGATED_SHARES", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__saber_gauges_votes_POWER.bc80d50587": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POWER", "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gauges_votes_POWER"], "unique_id": "test.solana_models.not_null_silver__saber_gauges_votes_POWER.bc80d50587", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gauges_votes_POWER.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "not_null_silver__saber_gauges_votes_POWER", "alias": "saber_gauges_votes_POWER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/not_null_silver__saber_gauges_votes_POWER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.312626, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gauges_votes\nwhere POWER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POWER", "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE.7e636a1cf7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_90f1973ccfa34cd264375728f92b2200\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "VOTER", "GAUGE"], "model": "{{ get_where_subquery(ref('silver__saber_gauges_votes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gauges_votes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_90f1973ccfa34cd264375728f92b2200", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE.7e636a1cf7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_90f1973ccfa34cd264375728f92b2200.sql", "original_file_path": "models/silver/silver__saber_gauges_votes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE", "alias": "saber_gauges_votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gauges_votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gauges_votes.yml/dbt_utils_unique_combination_o_90f1973ccfa34cd264375728f92b2200.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_90f1973ccfa34cd264375728f92b2200"}, "created_at": 1649447655.3133829, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, VOTER, GAUGE\n    from SOLANA.silver.saber_gauges_votes\n    group by TX_ID, VOTER, GAUGE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__saber_gauges_votes"}, "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3179252, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3187132, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e87fb9c6db0f9b12dfe134535d016e5d"}, "created_at": 1649447655.319485, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.blocks\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_NETWORK"], "unique_id": "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_NETWORK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NETWORK", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.322021, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_CHAIN_ID"], "unique_id": "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_CHAIN_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHAIN_ID", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3229, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3236601, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_HEIGHT"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_BLOCK_HEIGHT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEIGHT", "alias": "blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.324419, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere BLOCK_HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HASH", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.325289, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_PREVIOUS_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_PREVIOUS_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PREVIOUS_BLOCK_ID", "alias": "blocks_PREVIOUS_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_PREVIOUS_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3260438, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere PREVIOUS_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREVIOUS_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_PREVIOUS_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_PREVIOUS_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PREVIOUS_BLOCK_HASH", "alias": "blocks_PREVIOUS_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_PREVIOUS_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.326795, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere PREVIOUS_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PREVIOUS_BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__blocks_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__blocks_INGESTED_AT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_INGESTED_AT", "alias": "blocks_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/not_null_silver__blocks_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3275342, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.blocks\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__blocks"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__blocks.yml/dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.328407, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from SOLANA.silver.blocks\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_BLOCK_TIMESTAMP", "alias": "votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.332428, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2", "alias": "votes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_c1573d9244ff3daae36a2962b8851274"}, "created_at": 1649447655.3332338, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.votes\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_BLOCK_ID.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_BLOCK_ID", "alias": "votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.335895, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_RECENT_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_RECENT_BLOCK_HASH", "alias": "votes_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_RECENT_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.336672, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere RECENT_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_TX_ID.e428472813": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_TX_ID"], "unique_id": "test.solana_models.not_null_silver__votes_TX_ID.e428472813", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_TX_ID.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_TX_ID", "alias": "votes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.337433, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__votes"}, "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5": {"raw_sql": "{{ test_null_threshold(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "null_threshold", "kwargs": {"threshold_percent": 0.99, "column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.solana_models.test_null_threshold", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "null_threshold_silver", "fqn": ["solana_models", "silver", "null_threshold_silver__votes_FEE__0_99"], "unique_id": "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "null_threshold_silver__votes_FEE__0_99.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "null_threshold_silver__votes_FEE__0_99", "alias": "votes_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/null_threshold_silver__votes_FEE__0_99.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.338197, "compiled_sql": "\n    -- threshold_percent: decimal representing percent of values that should NOT be null\n    WITH t AS (\n        SELECT\n            COUNT(*) * 0.99 AS threshold_num\n        FROM\n            SOLANA.silver.votes\n    ),\n    C AS (\n        SELECT\n            COUNT(*) AS cnt\n        FROM\n            SOLANA.silver.votes\n        WHERE\n            FEE IS NOT NULL\n    )\nSELECT\n    *\nFROM\n    C\nWHERE\n    C.cnt <= (\n        SELECT\n            MAX(threshold_num)\n        FROM\n            t\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ingested_at::date >= current_date - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ingested_at::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_FEE"], "unique_id": "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_FEE.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_FEE", "alias": "votes_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ingested_at::date >= current_date - 2"}, "created_at": 1649447655.34068, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.votes where ingested_at::date >= current_date - 2) dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_SUCCEEDED.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_SUCCEEDED", "alias": "votes_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.341465, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_VOTE_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_VOTE_ACCOUNT.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_VOTE_ACCOUNT", "alias": "votes_VOTE_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_VOTE_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3423538, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere VOTE_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VOTE_ACCOUNT", "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_INGESTED_AT.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_INGESTED_AT", "alias": "votes_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/not_null_silver__votes_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.343873, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__votes"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp::date >= current_date - 2\",alias=\"dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID", "alias": "votes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes.yml/dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp::date >= current_date - 2", "alias": "dbt_utils_unique_combination_o_554db225ac2bdf4d18c84d58be862b93"}, "created_at": 1649447655.344821, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from (select * from SOLANA.silver.votes where block_timestamp::date >= current_date - 2) dbt_subquery\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__votes"}, "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP", "alias": "swaps_raydium_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3491058, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_raydium_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_af3e809f57d1d9e572d7bcfb5ed8f5dc"}, "created_at": 1649447655.349903, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.swaps_raydium_dex\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_BLOCK_ID", "alias": "swaps_raydium_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.352413, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_TX_ID.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_TX_ID", "alias": "swaps_raydium_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.353297, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_SUCCEEDED.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_SUCCEEDED", "alias": "swaps_raydium_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.354049, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_SWAPPER.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_SWAPPER", "alias": "swaps_raydium_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.354794, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_FROM_AMT.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_FROM_AMT", "alias": "swaps_raydium_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.355546, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_FROM_MINT.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_FROM_MINT", "alias": "swaps_raydium_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.356412, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_TO_AMT.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_TO_AMT", "alias": "swaps_raydium_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.357162, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_raydium_dex\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_raydium_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_raydium_dex_TO_MINT.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "not_null_silver__swaps_raydium_dex_TO_MINT", "alias": "swaps_raydium_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/not_null_silver__swaps_raydium_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.3580768, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_raydium_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_raydium_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_raydium_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f.sql", "original_file_path": "models/silver/silver__swaps_raydium_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID", "alias": "swaps_raydium_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_raydium_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_raydium_dex.yml/dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b30a66e53be0524890d85f4106d8004f"}, "created_at": 1649447655.358978, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA.silver.swaps_raydium_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_raydium_dex"}, "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___instructions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "not_null_silver___instructions_BLOCK_TIMESTAMP", "alias": "_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/not_null_silver___instructions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3624709, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._instructions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___instructions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1", "alias": "_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_fb4e1ac4dd7eaeeabb491446b2510b42"}, "created_at": 1649447655.363283, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver._instructions\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___instructions_BLOCK_ID.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "not_null_silver___instructions_BLOCK_ID", "alias": "_instructions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/not_null_silver___instructions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.365797, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._instructions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_TX_ID"], "unique_id": "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___instructions_TX_ID.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "not_null_silver___instructions_TX_ID", "alias": "_instructions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/not_null_silver___instructions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.366691, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._instructions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_INDEX"], "unique_id": "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___instructions_INDEX.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "not_null_silver___instructions_INDEX", "alias": "_instructions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/not_null_silver___instructions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.36745, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._instructions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALUE", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_VALUE"], "unique_id": "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___instructions_VALUE.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "not_null_silver___instructions_VALUE", "alias": "_instructions_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/not_null_silver___instructions_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3682098, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._instructions\nwhere VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALUE", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___instructions_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___instructions_INGESTED_AT.sql", "original_file_path": "models/silver/silver___instructions.yml", "name": "not_null_silver___instructions_INGESTED_AT", "alias": "_instructions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___instructions.yml/not_null_silver___instructions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.368951, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._instructions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver___instructions"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "alias": "nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.371555, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_magic_eden_v1_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ec0dfd3d9a8787d4126b96c1871fc0b3"}, "created_at": 1649447655.3724558, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.nft_sales_magic_eden_v1\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID", "alias": "nft_sales_magic_eden_v1_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.374934, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_TX_ID.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_TX_ID", "alias": "nft_sales_magic_eden_v1_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.375699, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED", "alias": "nft_sales_magic_eden_v1_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.3764539, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID", "alias": "nft_sales_magic_eden_v1_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.377333, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_PURCHASER", "alias": "nft_sales_magic_eden_v1_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.378073, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_MINT.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_MINT", "alias": "nft_sales_magic_eden_v1_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.378992, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.nft_sales_magic_eden_v1 where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT", "alias": "nft_sales_magic_eden_v1_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.37976, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT", "alias": "nft_sales_magic_eden_v1_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.380846, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v1\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT.928007f02c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d23e70bf72228b57106fc3800314e045\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT"], "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v1')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v1"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d23e70bf72228b57106fc3800314e045", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT.928007f02c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_d23e70bf72228b57106fc3800314e045.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v1.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT", "alias": "nft_sales_magic_eden_v1_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v1.yml/dbt_utils_unique_combination_o_d23e70bf72228b57106fc3800314e045.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d23e70bf72228b57106fc3800314e045"}, "created_at": 1649447655.3816051, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT\n    from SOLANA.silver.nft_sales_magic_eden_v1\n    group by TX_ID, MINT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_magic_eden_v1"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "alias": "nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.407455, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_magic_eden_v2_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_dfe12bedc35b6116067d9cbc505010a0"}, "created_at": 1649447655.408279, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.nft_sales_magic_eden_v2\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID", "alias": "nft_sales_magic_eden_v2_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.410869, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_TX_ID.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_TX_ID", "alias": "nft_sales_magic_eden_v2_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4117508, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED", "alias": "nft_sales_magic_eden_v2_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4125178, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID", "alias": "nft_sales_magic_eden_v2_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.413267, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_PURCHASER", "alias": "nft_sales_magic_eden_v2_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.414016, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_MINT.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_MINT", "alias": "nft_sales_magic_eden_v2_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.415052, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.nft_sales_magic_eden_v2 where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT", "alias": "nft_sales_magic_eden_v2_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.415822, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT", "alias": "nft_sales_magic_eden_v2_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.416594, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_magic_eden_v2\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__nft_sales_magic_eden_v2')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_magic_eden_v2"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277.sql", "original_file_path": "models/silver/silver__nft_sales_magic_eden_v2.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID", "alias": "nft_sales_magic_eden_v2_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_magic_eden_v2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_magic_eden_v2.yml/dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bbf86587b3933e5bf3bf7d21e5e16277"}, "created_at": 1649447655.417483, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA.silver.nft_sales_magic_eden_v2\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_magic_eden_v2"}, "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP", "alias": "nft_sales_smb_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.421351, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2.53c867d3b4": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6a2726e5a134332eb0fa20d806b401eb\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6a2726e5a134332eb0fa20d806b401eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2.53c867d3b4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_6a2726e5a134332eb0fa20d806b401eb.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_smb_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/dbt_expectations_expect_row_va_6a2726e5a134332eb0fa20d806b401eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_6a2726e5a134332eb0fa20d806b401eb"}, "created_at": 1649447655.4221609, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.nft_sales_smb\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_BLOCK_ID", "alias": "nft_sales_smb_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.424681, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_TX_ID.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_TX_ID", "alias": "nft_sales_smb_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.42558, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_SUCCEEDED.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_SUCCEEDED", "alias": "nft_sales_smb_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4263391, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_PROGRAM_ID", "alias": "nft_sales_smb_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.427103, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_PURCHASER", "alias": "nft_sales_smb_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.42785, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_MINT.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_MINT", "alias": "nft_sales_smb_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.4288902, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.nft_sales_smb where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_SALES_AMOUNT", "alias": "nft_sales_smb_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.429656, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_smb_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_smb_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "not_null_silver__nft_sales_smb_INGESTED_AT", "alias": "nft_sales_smb_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/not_null_silver__nft_sales_smb_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.430399, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_smb\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__nft_sales_smb')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_smb"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af.sql", "original_file_path": "models/silver/silver__nft_sales_smb.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID", "alias": "nft_sales_smb_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_smb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_smb.yml/dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_33627043f8e21d5a486afcb454b316af"}, "created_at": 1649447655.431275, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA.silver.nft_sales_smb\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_smb"}, "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_BLOCK_TIMESTAMP", "alias": "events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/not_null_silver__events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.435053, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__events"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2", "alias": "events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_27e87e5b01dd6108f09cde48c691c773"}, "created_at": 1649447655.4358568, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.events\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__events_BLOCK_ID.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_BLOCK_ID", "alias": "events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/not_null_silver__events_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.438514, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.events\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_TX_ID"], "unique_id": "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__events_TX_ID.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_TX_ID", "alias": "events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/not_null_silver__events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4394062, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_INDEX.9a860b1d59": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_INDEX"], "unique_id": "test.solana_models.not_null_silver__events_INDEX.9a860b1d59", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__events_INDEX.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_INDEX", "alias": "events_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/not_null_silver__events_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.440174, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.events\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_INSTRUCTION"], "unique_id": "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__events_INSTRUCTION.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_INSTRUCTION", "alias": "events_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/not_null_silver__events_INSTRUCTION.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.440925, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.events\nwhere INSTRUCTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INSTRUCTION", "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__events_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__events_INGESTED_AT.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_INGESTED_AT", "alias": "events_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/not_null_silver__events_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.441671, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.events\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__events"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX", "alias": "events_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__events.yml/dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ab59d4744f02893858bc32ac8611caae"}, "created_at": 1649447655.442548, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA.silver.events\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__events"}, "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4472902, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec"}, "created_at": 1649447655.44819, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.transactions\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_ID", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.450708, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECENT_BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_RECENT_BLOCK_HASH"], "unique_id": "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_RECENT_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_RECENT_BLOCK_HASH", "alias": "transactions_RECENT_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_RECENT_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.451479, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere RECENT_BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECENT_BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_TX_ID"], "unique_id": "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_TX_ID.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_ID", "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.452224, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__transactions"}, "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466": {"raw_sql": "{{ test_null_threshold(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "null_threshold", "kwargs": {"threshold_percent": 0.99, "column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.solana_models.test_null_threshold", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "null_threshold_silver", "fqn": ["solana_models", "silver", "null_threshold_silver__transactions_FEE__0_99"], "unique_id": "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "null_threshold_silver__transactions_FEE__0_99.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "null_threshold_silver__transactions_FEE__0_99", "alias": "transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/null_threshold_silver__transactions_FEE__0_99.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.453111, "compiled_sql": "\n    -- threshold_percent: decimal representing percent of values that should NOT be null\n    WITH t AS (\n        SELECT\n            COUNT(*) * 0.99 AS threshold_num\n        FROM\n            SOLANA.silver.transactions\n    ),\n    C AS (\n        SELECT\n            COUNT(*) AS cnt\n        FROM\n            SOLANA.silver.transactions\n        WHERE\n            FEE IS NOT NULL\n    )\nSELECT\n    *\nFROM\n    C\nWHERE\n    C.cnt <= (\n        SELECT\n            MAX(threshold_num)\n        FROM\n            t\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"ingested_at::date >= current_date - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ingested_at::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_FEE"], "unique_id": "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_FEE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_FEE", "alias": "transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ingested_at::date >= current_date - 2"}, "created_at": 1649447655.4549189, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.transactions where ingested_at::date >= current_date - 2) dbt_subquery\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FEE", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_SUCCEEDED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_SUCCEEDED", "alias": "transactions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.455841, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_KEYS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_ACCOUNT_KEYS"], "unique_id": "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_ACCOUNT_KEYS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ACCOUNT_KEYS", "alias": "transactions_ACCOUNT_KEYS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_ACCOUNT_KEYS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4566011, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere ACCOUNT_KEYS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_KEYS", "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transactions_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transactions_INGESTED_AT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INGESTED_AT", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4573529, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transactions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61"}, "created_at": 1649447655.458106, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA.silver.transactions\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transactions"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP", "alias": "swaps_jupiter_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.462157, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_jupiter_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_jupiter_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e331743ab568e61b2293cc8d03367af6"}, "created_at": 1649447655.462955, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.swaps_jupiter_dex\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_BLOCK_ID", "alias": "swaps_jupiter_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.465462, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_jupiter_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_TX_ID.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_TX_ID", "alias": "swaps_jupiter_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4663439, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_jupiter_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_SUCCEEDED.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_SUCCEEDED", "alias": "swaps_jupiter_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4671009, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_jupiter_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_SWAPPER.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_SWAPPER", "alias": "swaps_jupiter_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.467853, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_jupiter_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_FROM_AMT.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_FROM_AMT", "alias": "swaps_jupiter_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.4687738, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_FROM_MINT.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_FROM_MINT", "alias": "swaps_jupiter_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.470043, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_TO_AMT.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_TO_AMT", "alias": "swaps_jupiter_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.4709709, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_jupiter_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_jupiter_dex_TO_MINT.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "not_null_silver__swaps_jupiter_dex_TO_MINT", "alias": "swaps_jupiter_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/not_null_silver__swaps_jupiter_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.471884, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_jupiter_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_jupiter_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_jupiter_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154.sql", "original_file_path": "models/silver/silver__swaps_jupiter_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID", "alias": "swaps_jupiter_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_jupiter_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_jupiter_dex.yml/dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4dc19c58f12de8d8b4c9e1ebf0911154"}, "created_at": 1649447655.472787, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA.silver.swaps_jupiter_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_jupiter_dex"}, "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_BLOCK_TIMESTAMP", "alias": "_post_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.477022, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2", "alias": "_post_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cf6432ab752b865a59b40896790f4734"}, "created_at": 1649447655.4778209, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver._post_token_balances\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_BLOCK_ID.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_BLOCK_ID", "alias": "_post_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4804301, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_TX_ID"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_TX_ID.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_TX_ID", "alias": "_post_token_balances_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.4812002, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_INDEX"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_INDEX.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_INDEX", "alias": "_post_token_balances_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.481955, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_INDEX", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_ACCOUNT_INDEX"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_ACCOUNT_INDEX.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_ACCOUNT_INDEX", "alias": "_post_token_balances_ACCOUNT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_ACCOUNT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.482704, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere ACCOUNT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_INDEX", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_MINT"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_MINT.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_MINT", "alias": "_post_token_balances_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.483565, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_id > 111442741\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OWNER", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_id > 111442741", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_OWNER"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_OWNER.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_OWNER", "alias": "_post_token_balances_OWNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_OWNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_id > 111442741"}, "created_at": 1649447655.484477, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver._post_token_balances where block_id > 111442741) dbt_subquery\nwhere OWNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OWNER", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_DECIMAL"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_DECIMAL.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_DECIMAL", "alias": "_post_token_balances_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_DECIMAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.485234, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere DECIMAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMAL", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNT", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_UIAMOUNT"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_UIAMOUNT.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_UIAMOUNT", "alias": "_post_token_balances_UIAMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_UIAMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.486113, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere UIAMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "UIAMOUNT", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNTSTRING", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_UIAMOUNTSTRING"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_UIAMOUNTSTRING.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_UIAMOUNTSTRING", "alias": "_post_token_balances_UIAMOUNTSTRING", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_UIAMOUNTSTRING.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.486861, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere UIAMOUNTSTRING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "UIAMOUNTSTRING", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___post_token_balances_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___post_token_balances_INGESTED_AT.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "not_null_silver___post_token_balances_INGESTED_AT", "alias": "_post_token_balances_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/not_null_silver___post_token_balances_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.487602, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._post_token_balances\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver___post_token_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___post_token_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8.sql", "original_file_path": "models/silver/silver___post_token_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX", "alias": "_post_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___post_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___post_token_balances.yml/dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8f14399b7b0fefc477442546a3a29fa8"}, "created_at": 1649447655.488344, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA.silver._post_token_balances\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver___post_token_balances"}, "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.49266, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_c4e3e95e491b0653b63027015da58e93"}, "created_at": 1649447655.4935098, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.transfers\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_ID", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.496224, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_TX_ID"], "unique_id": "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_TX_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_ID", "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.497163, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_INDEX.d7de164538": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_INDEX"], "unique_id": "test.solana_models.not_null_silver__transfers_INDEX.d7de164538", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_INDEX.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_INDEX", "alias": "transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.497952, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_TX_FROM"], "unique_id": "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_TX_FROM.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_FROM", "alias": "transfers_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_FROM.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.498734, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere TX_FROM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FROM", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_TX_TO"], "unique_id": "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_TX_TO.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_TO", "alias": "transfers_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.499511, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_AMOUNT", "alias": "transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.500406, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_MINT"], "unique_id": "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_MINT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_MINT", "alias": "transfers_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.501173, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__transfers_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__transfers_INGESTED_AT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_INGESTED_AT", "alias": "transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/not_null_silver__transfers_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.50194, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.transfers\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__transfers"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_add011dc212a08498845047adea306a2"}, "created_at": 1649447655.502717, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA.silver.transfers\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transfers"}, "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_agg_block_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__votes_agg_block.yml", "name": "not_null_silver__votes_agg_block_BLOCK_TIMESTAMP", "alias": "votes_agg_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes_agg_block.yml/not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.506569, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes_agg_block\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c.sql", "original_file_path": "models/silver/silver__votes_agg_block.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2", "alias": "votes_agg_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes_agg_block.yml/dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_68d9c5e0f5bdb55701c9809d4878c90c"}, "created_at": 1649447655.5074198, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.votes_agg_block\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_agg_block_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_agg_block_BLOCK_ID.sql", "original_file_path": "models/silver/silver__votes_agg_block.yml", "name": "not_null_silver__votes_agg_block_BLOCK_ID", "alias": "votes_agg_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes_agg_block.yml/not_null_silver__votes_agg_block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5100749, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes_agg_block\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUM_VOTES", "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_agg_block_NUM_VOTES"], "unique_id": "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_agg_block_NUM_VOTES.sql", "original_file_path": "models/silver/silver__votes_agg_block.yml", "name": "not_null_silver__votes_agg_block_NUM_VOTES", "alias": "votes_agg_block_NUM_VOTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes_agg_block.yml/not_null_silver__votes_agg_block_NUM_VOTES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.510876, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.votes_agg_block\nwhere NUM_VOTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NUM_VOTES", "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp::date >= current_date - 2\",alias=\"dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__votes_agg_block')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__votes_agg_block"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp::date >= current_date - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a.sql", "original_file_path": "models/silver/silver__votes_agg_block.yml", "name": "dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID", "alias": "votes_agg_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes_agg_block"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__votes_agg_block.yml/dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp::date >= current_date - 2", "alias": "dbt_utils_unique_combination_o_81d36c84020a34c90c1eb494ff56283a"}, "created_at": 1649447655.511997, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from (select * from SOLANA.silver.votes_agg_block where block_timestamp::date >= current_date - 2) dbt_subquery\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__votes_agg_block"}, "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_BLOCK_TIMESTAMP", "alias": "_pre_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.516405, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2", "alias": "_pre_token_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_33b0adf262e962860b48700b268de6f3"}, "created_at": 1649447655.517267, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver._pre_token_balances\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_BLOCK_ID.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_BLOCK_ID", "alias": "_pre_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.520083, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_TX_ID"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_TX_ID.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_TX_ID", "alias": "_pre_token_balances_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.520882, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_INDEX"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_INDEX.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_INDEX", "alias": "_pre_token_balances_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.521664, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACCOUNT_INDEX", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_ACCOUNT_INDEX"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_ACCOUNT_INDEX.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_ACCOUNT_INDEX", "alias": "_pre_token_balances_ACCOUNT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_ACCOUNT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.522451, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere ACCOUNT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACCOUNT_INDEX", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_MINT"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_MINT.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_MINT", "alias": "_pre_token_balances_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5233622, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_id > 111442741\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OWNER", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_id > 111442741", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_OWNER"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_OWNER.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_OWNER", "alias": "_pre_token_balances_OWNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_OWNER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_id > 111442741"}, "created_at": 1649447655.5243468, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver._pre_token_balances where block_id > 111442741) dbt_subquery\nwhere OWNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OWNER", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_DECIMAL"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_DECIMAL.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_DECIMAL", "alias": "_pre_token_balances_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_DECIMAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5251431, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere DECIMAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMAL", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNT", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_UIAMOUNT"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_UIAMOUNT.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_UIAMOUNT", "alias": "_pre_token_balances_UIAMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_UIAMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5259159, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere UIAMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "UIAMOUNT", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UIAMOUNTSTRING", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_UIAMOUNTSTRING"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_UIAMOUNTSTRING.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_UIAMOUNTSTRING", "alias": "_pre_token_balances_UIAMOUNTSTRING", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_UIAMOUNTSTRING.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.526819, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere UIAMOUNTSTRING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "UIAMOUNTSTRING", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___pre_token_balances_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___pre_token_balances_INGESTED_AT.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "not_null_silver___pre_token_balances_INGESTED_AT", "alias": "_pre_token_balances_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/not_null_silver___pre_token_balances_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.527597, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._pre_token_balances\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver___pre_token_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___pre_token_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09.sql", "original_file_path": "models/silver/silver___pre_token_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX", "alias": "_pre_token_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___pre_token_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___pre_token_balances.yml/dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b08e1b33b43e37724b32425af6991f09"}, "created_at": 1649447655.5284202, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA.silver._pre_token_balances\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver___pre_token_balances"}, "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_BLOCK_TIMESTAMP", "alias": "_inner_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.533018, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1", "alias": "_inner_instructions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ecde0a58ecc7e41536087cdbf014bea2"}, "created_at": 1649447655.533953, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver._inner_instructions\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_BLOCK_ID.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_BLOCK_ID", "alias": "_inner_instructions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.536844, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_TX_ID"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_TX_ID.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_TX_ID", "alias": "_inner_instructions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.537621, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_INDEX"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_INDEX.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_INDEX", "alias": "_inner_instructions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.538801, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAPPED_INSTRUCTION_INDEX", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX", "alias": "_inner_instructions_MAPPED_INSTRUCTION_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.539579, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere MAPPED_INSTRUCTION_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MAPPED_INSTRUCTION_INDEX", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALUE", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_VALUE"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_VALUE.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_VALUE", "alias": "_inner_instructions_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.540329, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VALUE", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver___inner_instructions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___inner_instructions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___inner_instructions_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___inner_instructions_INGESTED_AT.sql", "original_file_path": "models/silver/silver___inner_instructions.yml", "name": "not_null_silver___inner_instructions_INGESTED_AT", "alias": "_inner_instructions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___inner_instructions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___inner_instructions.yml/not_null_silver___inner_instructions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.541077, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._inner_instructions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver___inner_instructions"}, "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCK_TIMESTAMP", "alias": "nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5438888, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_mints\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3", "alias": "nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_88a53000f318caa54d09222f1bef783b"}, "created_at": 1649447655.544804, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.nft_mints\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -3,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCK_ID", "alias": "nft_mints_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.547324, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_mints\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_TX_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_TX_ID", "alias": "nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.548095, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_mints\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_column_to_exist_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED"], "unique_id": "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED", "alias": "nft_mints_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e218ee046ae2800d7ab965d5041cc005"}, "created_at": 1649447655.548862, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            'SUCCEEDED' as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_PROGRAM_ID", "alias": "nft_mints_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.550789, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_mints\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_CURRENCY", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_MINT_CURRENCY"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_MINT_CURRENCY.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_CURRENCY", "alias": "nft_mints_MINT_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_MINT_CURRENCY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5523689, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_mints\nwhere MINT_CURRENCY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT_CURRENCY", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_INGESTED_AT", "alias": "nft_mints_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.554774, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_mints\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_mints"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY.0dba765d2d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6bc4ab75661f09850cfe942def98ec2a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "INDEX", "MINT", "MINT_CURRENCY"], "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6bc4ab75661f09850cfe942def98ec2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY.0dba765d2d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_6bc4ab75661f09850cfe942def98ec2a.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY", "alias": "nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_mints.yml/dbt_utils_unique_combination_o_6bc4ab75661f09850cfe942def98ec2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6bc4ab75661f09850cfe942def98ec2a"}, "created_at": 1649447655.555659, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, INDEX, MINT, MINT_CURRENCY\n    from SOLANA.silver.nft_mints\n    group by TX_ID, INDEX, MINT, MINT_CURRENCY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_mints"}, "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP", "alias": "swaps_orca_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.559923, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2", "alias": "swaps_orca_dex_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_bb1782aa227215b109c5f4f5c428e628"}, "created_at": 1649447655.560738, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.swaps_orca_dex\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_BLOCK_ID", "alias": "swaps_orca_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.563252, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_TX_ID"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_TX_ID.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_TX_ID", "alias": "swaps_orca_dex_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.564127, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_SUCCEEDED.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_SUCCEEDED", "alias": "swaps_orca_dex_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.564885, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_SWAPPER"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_SWAPPER.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_SWAPPER", "alias": "swaps_orca_dex_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_SWAPPER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.565634, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere SWAPPER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SWAPPER", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_FROM_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_FROM_AMT.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_FROM_AMT", "alias": "swaps_orca_dex_FROM_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_FROM_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.566509, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere FROM_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_AMT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_FROM_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_FROM_MINT.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_FROM_MINT", "alias": "swaps_orca_dex_FROM_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_FROM_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5672698, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere FROM_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_MINT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_TO_AMT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_TO_AMT.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_TO_AMT", "alias": "swaps_orca_dex_TO_AMT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_TO_AMT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.568015, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.swaps_orca_dex\nwhere TO_AMT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_AMT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_MINT", "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__swaps_orca_dex_TO_MINT"], "unique_id": "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__swaps_orca_dex_TO_MINT.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "not_null_silver__swaps_orca_dex_TO_MINT", "alias": "swaps_orca_dex_TO_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/not_null_silver__swaps_orca_dex_TO_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.568932, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.swaps_orca_dex where succeeded = TRUE) dbt_subquery\nwhere TO_MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_MINT", "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__swaps_orca_dex')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__swaps_orca_dex"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417.sql", "original_file_path": "models/silver/silver__swaps_orca_dex.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID", "alias": "swaps_orca_dex_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps_orca_dex"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__swaps_orca_dex.yml/dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_690d6f5ca5f8b9a11a958ce367962417"}, "created_at": 1649447655.569828, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID\n    from SOLANA.silver.swaps_orca_dex\n    group by BLOCK_ID, TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__swaps_orca_dex"}, "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP", "alias": "staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.57475, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2", "alias": "staking_lp_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_2963afcb35f5c1a608b3ba40d3c657a4"}, "created_at": 1649447655.575644, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.staking_lp_actions\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_BLOCK_ID", "alias": "staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.578166, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_TX_ID"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_TX_ID.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_TX_ID", "alias": "staking_lp_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.578943, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_INDEX"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_INDEX.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_INDEX", "alias": "staking_lp_actions_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.579691, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INDEX", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_SUCCEEDED.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_SUCCEEDED", "alias": "staking_lp_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.580584, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_PROGRAM_ID", "alias": "staking_lp_actions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.581337, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_EVENT_TYPE"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_EVENT_TYPE.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_EVENT_TYPE", "alias": "staking_lp_actions_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.582082, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSTRUCTION", "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__staking_lp_actions_INSTRUCTION"], "unique_id": "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__staking_lp_actions_INSTRUCTION.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "not_null_silver__staking_lp_actions_INSTRUCTION", "alias": "staking_lp_actions_INSTRUCTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/not_null_silver__staking_lp_actions_INSTRUCTION.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.582966, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.staking_lp_actions\nwhere INSTRUCTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INSTRUCTION", "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "INDEX"], "model": "{{ get_where_subquery(ref('silver__staking_lp_actions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__staking_lp_actions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015.sql", "original_file_path": "models/silver/silver__staking_lp_actions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX", "alias": "staking_lp_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking_lp_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__staking_lp_actions.yml/dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4e2cb11583158451d7e1fa7286235015"}, "created_at": 1649447655.583761, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, INDEX\n    from SOLANA.silver.staking_lp_actions\n    group by BLOCK_ID, TX_ID, INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__staking_lp_actions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "RECORDED_AT", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1.sql", "original_file_path": "models/silver/silver___prices.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2", "alias": "_prices_RECORDED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___prices.yml/dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b6c631ef0878d6264fc84a65a5495bd1"}, "created_at": 1649447655.587523, "compiled_sql": "\n\n with max_recency as (\n\n    select max(RECORDED_AT ) as max_date\n    from\n        SOLANA.silver._prices\n    where\n        RECORDED_AT <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECORDED_AT", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_SYMBOL"], "unique_id": "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___prices_SYMBOL.sql", "original_file_path": "models/silver/silver___prices.yml", "name": "not_null_silver___prices_SYMBOL", "alias": "_prices_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___prices.yml/not_null_silver___prices_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.590156, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._prices\nwhere SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver___prices_PRICE.538411960a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_PRICE"], "unique_id": "test.solana_models.not_null_silver___prices_PRICE.538411960a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___prices_PRICE.sql", "original_file_path": "models/silver/silver___prices.yml", "name": "not_null_silver___prices_PRICE", "alias": "_prices_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___prices.yml/not_null_silver___prices_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5910861, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._prices\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver___prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_PROVIDER"], "unique_id": "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___prices_PROVIDER.sql", "original_file_path": "models/silver/silver___prices.yml", "name": "not_null_silver___prices_PROVIDER", "alias": "_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver___prices.yml/not_null_silver___prices_PROVIDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.593442, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver._prices\nwhere PROVIDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROVIDER", "file_key_name": "models.silver___prices"}, "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP", "alias": "nft_sales_solport_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.5961652, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2.0c82aab50c": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f12cd85908b953788f56151446c83304\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f12cd85908b953788f56151446c83304", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2.0c82aab50c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_f12cd85908b953788f56151446c83304.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2", "alias": "nft_sales_solport_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/dbt_expectations_expect_row_va_f12cd85908b953788f56151446c83304.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f12cd85908b953788f56151446c83304"}, "created_at": 1649447655.5971332, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.nft_sales_solport\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_BLOCK_ID", "alias": "nft_sales_solport_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.599777, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_TX_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_TX_ID.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_TX_ID", "alias": "nft_sales_solport_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.600579, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_SUCCEEDED.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_SUCCEEDED", "alias": "nft_sales_solport_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.6013608, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_PROGRAM_ID"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_PROGRAM_ID.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_PROGRAM_ID", "alias": "nft_sales_solport_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_PROGRAM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.602269, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere PROGRAM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_PURCHASER", "alias": "nft_sales_solport_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_PURCHASER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.603044, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere PURCHASER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"succeeded = TRUE\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_MINT.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_MINT", "alias": "nft_sales_solport_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "succeeded = TRUE"}, "created_at": 1649447655.604018, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from SOLANA.silver.nft_sales_solport where succeeded = TRUE) dbt_subquery\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SALES_AMOUNT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_SALES_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_SALES_AMOUNT.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_SALES_AMOUNT", "alias": "nft_sales_solport_SALES_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_SALES_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.605254, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere SALES_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SALES_AMOUNT", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_sales_solport_INGESTED_AT"], "unique_id": "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_sales_solport_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "not_null_silver__nft_sales_solport_INGESTED_AT", "alias": "nft_sales_solport_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/not_null_silver__nft_sales_solport_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.606072, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_sales_solport\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MINT"], "model": "{{ get_where_subquery(ref('silver__nft_sales_solport')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_sales_solport"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43.sql", "original_file_path": "models/silver/silver__nft_sales_solport.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT", "alias": "nft_sales_solport_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales_solport"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_sales_solport.yml/dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e2b0abb039fca5cdb0a9d10a3679ec43"}, "created_at": 1649447655.606911, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MINT\n    from SOLANA.silver.nft_sales_solport\n    group by TX_ID, MINT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_sales_solport"}, "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.d5c9da72fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.d5c9da72fb", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP", "alias": "saber_gov_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.611391, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2.b909618d47": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f6ce745029169f262d3e09d49a2e9929\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f6ce745029169f262d3e09d49a2e9929", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["solana_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2"], "unique_id": "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2.b909618d47", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_expectations_expect_row_va_f6ce745029169f262d3e09d49a2e9929.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2", "alias": "saber_gov_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/dbt_expectations_expect_row_va_f6ce745029169f262d3e09d49a2e9929.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f6ce745029169f262d3e09d49a2e9929"}, "created_at": 1649447655.612252, "compiled_sql": "\n\n with max_recency as (\n\n    select max(BLOCK_TIMESTAMP ) as max_date\n    from\n        SOLANA.silver.saber_gov_actions\n    where\n        BLOCK_TIMESTAMP <= cast(cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n) as date)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '1970-01-01')\n        < \n\n    dateadd(\n        day,\n        -2,\n        cast(convert_timezone('UTC', 'America/Los_Angeles', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_ID.ddd15f000c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_BLOCK_ID"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_ID.ddd15f000c", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_BLOCK_ID", "alias": "saber_gov_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.615148, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_ID", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_TX_ID.940cbef646": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_TX_ID"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_TX_ID.940cbef646", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_TX_ID.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_TX_ID", "alias": "saber_gov_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.615957, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_ID", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_SUCCEEDED.da5558dfd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_SUCCEEDED"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_SUCCEEDED.da5558dfd3", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_SUCCEEDED.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_SUCCEEDED", "alias": "saber_gov_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.616749, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SUCCEEDED", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_SIGNER.2b8ab022fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIGNER", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_SIGNER"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_SIGNER.2b8ab022fc", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_SIGNER.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_SIGNER", "alias": "saber_gov_actions_SIGNER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_SIGNER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.617701, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere SIGNER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIGNER", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.cfa4617140": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOCKER_ACCOUNT", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_LOCKER_ACCOUNT"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.cfa4617140", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_LOCKER_ACCOUNT", "alias": "saber_gov_actions_LOCKER_ACCOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.618491, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere LOCKER_ACCOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOCKER_ACCOUNT", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_MINT.967987399d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_MINT"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_MINT.967987399d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_MINT.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_MINT", "alias": "saber_gov_actions_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_MINT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.6192799, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere MINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINT", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_ACTION.bc7052f39d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_ACTION"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_ACTION.bc7052f39d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_ACTION.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_ACTION", "alias": "saber_gov_actions_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.620249, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ACTION", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__saber_gov_actions_AMOUNT.246e41b482": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__saber_gov_actions_AMOUNT"], "unique_id": "test.solana_models.not_null_silver__saber_gov_actions_AMOUNT.246e41b482", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__saber_gov_actions_AMOUNT.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "not_null_silver__saber_gov_actions_AMOUNT", "alias": "saber_gov_actions_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/not_null_silver__saber_gov_actions_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.621042, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.saber_gov_actions\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID.5c6344ea78": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7cb80a6b2f7a29fe9e8a1abba2fb226b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__saber_gov_actions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__saber_gov_actions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7cb80a6b2f7a29fe9e8a1abba2fb226b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID.5c6344ea78", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_7cb80a6b2f7a29fe9e8a1abba2fb226b.sql", "original_file_path": "models/silver/silver__saber_gov_actions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID", "alias": "saber_gov_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__saber_gov_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__saber_gov_actions.yml/dbt_utils_unique_combination_o_7cb80a6b2f7a29fe9e8a1abba2fb226b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7cb80a6b2f7a29fe9e8a1abba2fb226b"}, "created_at": 1649447655.621829, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from SOLANA.silver.saber_gov_actions\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__saber_gov_actions"}, "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_BLOCKCHAIN"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_BLOCKCHAIN", "alias": "nft_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.626648, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_CONTRACT_ADDRESS"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CONTRACT_ADDRESS", "alias": "nft_metadata_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.627459, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_CONTRACT_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_CONTRACT_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CONTRACT_NAME", "alias": "nft_metadata_CONTRACT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_CONTRACT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.628226, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere CONTRACT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP", "alias": "nft_metadata_CREATED_AT_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.62931, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere CREATED_AT_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATED_AT_TIMESTAMP", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_CREATOR_ADDRESS"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_CREATOR_ADDRESS.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CREATOR_ADDRESS", "alias": "nft_metadata_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_CREATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.631118, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere CREATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_CREATOR_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_CREATOR_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_CREATOR_NAME", "alias": "nft_metadata_CREATOR_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_CREATOR_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.6319208, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere CREATOR_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMAGE_URL", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_IMAGE_URL"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_IMAGE_URL.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_IMAGE_URL", "alias": "nft_metadata_IMAGE_URL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_IMAGE_URL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.632843, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere IMAGE_URL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "IMAGE_URL", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_PROJECT_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_PROJECT_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_PROJECT_NAME", "alias": "nft_metadata_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.633607, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_TOKEN_ID"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_TOKEN_ID.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_ID", "alias": "nft_metadata_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_TOKEN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.634363, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere TOKEN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_ID", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_METADATA", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_TOKEN_METADATA"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_TOKEN_METADATA.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_METADATA", "alias": "nft_metadata_TOKEN_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_TOKEN_METADATA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.635102, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere TOKEN_METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_METADATA", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_METADATA_URI", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_TOKEN_METADATA_URI"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_TOKEN_METADATA_URI.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_METADATA_URI", "alias": "nft_metadata_TOKEN_METADATA_URI", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_TOKEN_METADATA_URI.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.635963, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere TOKEN_METADATA_URI is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_METADATA_URI", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_NAME", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_TOKEN_NAME"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_TOKEN_NAME.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_TOKEN_NAME", "alias": "nft_metadata_TOKEN_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/not_null_silver__nft_metadata_TOKEN_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649447655.6367118, "compiled_sql": "\n    \n    \n\nselect *\nfrom SOLANA.silver.nft_metadata\nwhere TOKEN_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_NAME", "file_key_name": "models.silver__nft_metadata"}, "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS", "TOKEN_ID"], "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.solana_models.silver__nft_metadata"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["solana_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID"], "unique_id": "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID", "alias": "nft_metadata_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/solana_models/models/silver/silver__nft_metadata.yml/dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_614bcf117d350dedeec0b3736bc9f24d"}, "created_at": 1649447655.6374688, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS, TOKEN_ID\n    from SOLANA.silver.nft_metadata\n    group by CONTRACT_ADDRESS, TOKEN_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_metadata"}}, "sources": {"source.solana_models.prod.solana_blocks": {"fqn": ["solana_models", "prod", "solana_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.solana_models.prod.solana_blocks", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "solana_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "solana_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.solana_blocks", "created_at": 1649447655.640054}, "source.solana_models.prod.solana_txs": {"fqn": ["solana_models", "prod", "solana_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.solana_models.prod.solana_txs", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "solana_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "solana_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.solana_txs", "created_at": 1649447655.640138}, "source.solana_models.crosschain.address_labels": {"fqn": ["solana_models", "crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.solana_models.crosschain.address_labels", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1649447655.640193}, "source.solana_models.shared.prices_v2": {"fqn": ["solana_models", "shared", "prices_v2"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.solana_models.shared.prices_v2", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices_v2", "source_name": "shared", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices_v2", "created_at": 1649447655.640249}, "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827": {"fqn": ["solana_models", "legacy_bronze", "prod_nft_metadata_uploads_1828572827"], "database": "flipside_prod_db", "schema": "bronze", "unique_id": "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prod_nft_metadata_uploads_1828572827", "source_name": "legacy_bronze", "source_description": "", "loader": "", "identifier": "prod_nft_metadata_uploads_1828572827", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.bronze.prod_nft_metadata_uploads_1828572827", "created_at": 1649447655.640301}}, "macros": {"macro.solana_models.create_tasks": {"unique_id": "macro.solana_models.create_tasks", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/create_tasks.sql", "original_file_path": "macros/create_tasks.sql", "name": "create_tasks", "macro_sql": "{% macro create_tasks() %}\n    {% if target.database == 'SOLANA' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ task_run_sp_create_prod_clone('_internal') }};\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.solana_models.task_run_sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.23591}, "macro.solana_models.create_sps": {"unique_id": "macro.solana_models.create_sps", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'SOLANA' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.solana_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.236285}, "macro.solana_models.generate_schema_name": {"unique_id": "macro.solana_models.generate_schema_name", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2368488}, "macro.solana_models.generate_alias_name": {"unique_id": "macro.solana_models.generate_alias_name", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.237164}, "macro.solana_models.task_run_sp_create_prod_clone": {"unique_id": "macro.solana_models.task_run_sp_create_prod_clone", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/task_run_sp_create_prod_clone.sql", "original_file_path": "macros/task_run_sp_create_prod_clone.sql", "name": "task_run_sp_create_prod_clone", "macro_sql": "{% macro task_run_sp_create_prod_clone(target_schema) -%}\n    create or replace task {{target_schema}}.run_sp_create_prod_clone\n        warehouse = dbt_cloud\n        schedule = 'USING CRON 15 10 * * * UTC'\n    as\n        call {{ target_schema }}.create_prod_clone('solana', 'solana_dev', 'internal_dev');\n\n    alter task {{ target_schema }}.run_sp_create_prod_clone resume\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.237477}, "macro.solana_models.sp_create_prod_clone": {"unique_id": "macro.solana_models.sp_create_prod_clone", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2381382}, "macro.solana_models.test_null_threshold": {"unique_id": "macro.solana_models.test_null_threshold", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "macros/tests/null_threshold.sql", "original_file_path": "macros/tests/null_threshold.sql", "name": "test_null_threshold", "macro_sql": "{% test null_threshold(\n        model,\n        column_name,\n        threshold_percent\n    ) %}\n    -- threshold_percent: decimal representing percent of values that should NOT be null\n    WITH t AS (\n        SELECT\n            COUNT(*) * {{ threshold_percent }} AS threshold_num\n        FROM\n            {{ model }}\n    ),\n    C AS (\n        SELECT\n            COUNT(*) AS cnt\n        FROM\n            {{ model }}\n        WHERE\n            {{ column_name }} IS NOT NULL\n    )\nSELECT\n    *\nFROM\n    C\nWHERE\n    C.cnt <= (\n        SELECT\n            MAX(threshold_num)\n        FROM\n            t\n    )\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.238636}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.239626}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2520902}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2524521}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.252936}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.253835}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.254679}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.255266}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.255789}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.256125}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2562041}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.256385}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.256491}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.256686}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.256945}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2571552}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.257697}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2578912}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.258385}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.258959}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.25975}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2599711}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.260245}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.261664}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.261961}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.26223}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.264483}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.264789}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.26542}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.266904}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2683678}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.268945}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2711291}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.271575}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.272789}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.272992}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2731469}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2732952}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.273441}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.273887}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.274199}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.274514}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2750158}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.275296}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.278892}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.27908}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.279309}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.279459}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.279559}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2803771}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.28055}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.280729}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.281761}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.283703}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.287068}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.287372}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2875478}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.287636}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.287852}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.288765}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.288964}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.289227}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2896798}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2961202}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.298323}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.298851}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.29917}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.2996118}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.300052}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.300999}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3016279}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.302279}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3052511}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.306465}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.306716}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.307155}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.307429}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3081448}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.308901}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3140218}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3191}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.320386}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.321644}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3224058}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.326336}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.326845}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.32704}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.327252}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3276858}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.331445}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.331831}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.332063}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.333367}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.333812}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.333986}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.334174}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3344488}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.337439}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.341702}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.342645}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.342891}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.343387}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3435361}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.343658}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.343821}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.343939}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.344436}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.344691}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.345959}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.34642}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.346656}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.347291}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.347573}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.347871}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.348335}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.348607}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.349022}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3492649}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3495731}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.350209}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.351403}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.352012}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.352319}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.354162}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.355525}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.356317}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3565729}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.357026}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.357213}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.357383}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.35757}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.358092}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.35823}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.358392}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.358811}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.36053}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.360848}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3610392}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.361256}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.361442}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3616068}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.361821}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.362109}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.36237}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3630579}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3633}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.363515}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.36404}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.364192}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.364435}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.364886}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.365632}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.365807}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3660219}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.366197}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.366478}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3669848}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3685188}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.368787}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.368984}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.36914}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.369328}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3695831}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3697972}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3701718}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3703659}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3705301}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.372364}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.372534}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.372853}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.373041}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.373394}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.373635}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.37426}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3745248}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.375343}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.375921}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.376162}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.376462}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.376749}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.377067}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.37714}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.377214}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.377612}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.37778}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3780942}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.37829}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379041}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379114}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379189}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379261}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3793302}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379495}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379568}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379638}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3798}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3798761}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.379945}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380117}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380193}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380266}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3804271}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380498}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3805661}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380727}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380801}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.380927}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.381451}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3818219}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.381927}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.382029}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3826392}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.382807}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.382974}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.383142}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.383342}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3836591}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.383734}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.383805}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3844118}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.384555}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.384713}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3848681}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.387605}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.387771}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.387933}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.389805}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.390021}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.390453}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3905978}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3907259}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3908522}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.391212}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3913522}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3914828}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.391855}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.391996}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.392119}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.392652}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3927538}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.392857}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.39328}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.393419}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3935528}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.393868}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.393974}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.394629}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.394808}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3948958}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.394969}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3951318}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.395245}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.395394}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3955069}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.395645}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.397111}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.3975968}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.398081}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.398278}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.398902}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.39918}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.399334}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.399743}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.399925}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.400408}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.400574}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4007528}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.40115}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4013498}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4014819}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.402405}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.408361}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4089038}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.40924}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.409757}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.415254}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.415712}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.416213}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.416758}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4174469}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4178329}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4181912}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4185479}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4187331}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.419081}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.419285}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.41961}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.419796}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.420338}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.420923}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.421154}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.421613}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4219189}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4226172}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.42303}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.423498}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.423838}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4242182}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4243991}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.425067}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.425558}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.426186}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.426603}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.427084}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4272552}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.427648}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.427841}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.428513}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.429186}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4297879}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.430138}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.430673}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.431042}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4315362}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.43209}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.43278}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.433352}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.43384}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4340322}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.434839}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.435775}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.438897}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4404879}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4415329}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.442195}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4424498}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.44282}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.443207}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.443586}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.444326}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.44522}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.446102}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4465332}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.446729}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.447264}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.448001}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4488971}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4493718}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.449666}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4503481}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.451415}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.453233}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.455341}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4569678}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.459481}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4598489}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4601119}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.460757}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.461733}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.462185}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4624808}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.462882}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4632268}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.464833}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4650922}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.465854}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.466443}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4674602}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.468797}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.469902}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.470756}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4712288}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.471853}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4729779}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.473272}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4739132}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.474754}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4831}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.485558}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4880168}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.489103}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.489942}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.490665}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.492325}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number-{{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number-{{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4929228}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.493865}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.494155}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4944031}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.494724}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.494972}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4956439}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.495849}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.496057}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.496264}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.496476}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4968472}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.497008}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.497159}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4972649}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.49764}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4982579}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.4984121}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\ncase\n    when {{ dbt_date.day_of_week(dbt_utils.date_trunc('week', date), isoweek=False) }} = 1\n    then {{ dbt_date.n_days_ago(\n            dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\",\n            date\n            ) }}\nend\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.date_trunc", "macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.498743}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.499022}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.499584}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.499744}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.499885}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.500024}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.500163}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.500654}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.500903}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.50117}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.today(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.501502}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.501743}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5019882}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.502372}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.502513}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.502653}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5028422}, "macro.dbt_date.last_month_start_date": {"unique_id": "macro.dbt_date.last_month_start_date", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_start_date.sql", "original_file_path": "macros/calendar_date/last_month_start_date.sql", "name": "last_month_start_date", "macro_sql": "{%- macro last_month_start_date(tz=None) -%}\n{{ dbt_date.last_month(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5030909}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5043998}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.504672}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5049448}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.505471}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.505894}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5063481}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.506714}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.506847}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.506978}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.507401}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5076869}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.507874}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.50816}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5099368}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.510239}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5106611}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.510956}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5113971}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.511841}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5123699}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5125928}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.512733}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.512872}, "macro.dbt_date.next_month_start_date": {"unique_id": "macro.dbt_date.next_month_start_date", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_start_date.sql", "original_file_path": "macros/calendar_date/next_month_start_date.sql", "name": "next_month_start_date", "macro_sql": "{%- macro next_month_start_date(tz=None) -%}\n{{ dbt_date.next_month(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.513139}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5135942}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5141351}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5143418}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.514551}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.514753}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5149639}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.lastnext_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.515295}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.515779}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.515969}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.516117}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5172322}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5176399}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.517799}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5179641}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5182972}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.51872}, "macro.dbt_date.next_week_start_date": {"unique_id": "macro.dbt_date.next_week_start_date", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week_start_date.sql", "original_file_path": "macros/calendar_date/next_week_start_date.sql", "name": "next_week_start_date", "macro_sql": "{%- macro next_week_start_date(tz=None) -%}\n{{ dbt_date.next_week(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.518975}, "macro.dbt_date.this_week": {"unique_id": "macro.dbt_date.this_week", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/this_week.sql", "original_file_path": "macros/calendar_date/this_week.sql", "name": "this_week", "macro_sql": "{%- macro this_week(date=None, tz=None) -%}\n{{ dbt_utils.this_week_start(date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5192451}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.519851}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.520052}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5201972}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5203378}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5205069}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5210721}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.521219}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.521431}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5216398}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.521944}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.522251}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.52251}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "\n\n\n\n{%- macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5226822}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.522756}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.522829}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5229702}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.523624}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.523819}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.524013}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5241668}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.524321}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.524676}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.52478}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.524884}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5249841}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5253508}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.525426}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5254982}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.525577}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.525646}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5257149}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5259662}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.526454}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.526664}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.52706}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.528265}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.529082}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.530066}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5303721}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.531011}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.536181}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.536778}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None,\n                                return_difference=False\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.537314}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5386639}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.538988}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5390909}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.539685}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.54076}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.541417}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.541996}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.542845}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5435}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.544653}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.545722}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.546797}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5471208}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.547717}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.548751}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max({{ column_name }} ) as max_date\n    from\n        {{ model }}\n    where\n        {{ column_name }} <= {{ dbt_date.today() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_date, '{{ default_start_date }}')\n        < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.549238}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select '{{ col_name }}' as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select '{{ col_name }}' as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5503511}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    return_difference=True\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5508428}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.552616}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.553171}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            '{{ column_name }}' as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5543602}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.555365}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5556622}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.556423}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.556812}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select '{{ col_name }}' as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select '{{ col_name }}' as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5579572}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.55841}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5599601}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.560479}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.561027}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.561453}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.562498}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.563377}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5642729}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.565071}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5655801}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.565901}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5667121}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5675058}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            '{{ column.name | upper }}' as relation_column,\n            '{{ column.dtype | upper }}' as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5685031}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.568801}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5693069}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.570144}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.570993}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.571904}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.572831}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5737422}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5746791}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5763562}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5771468}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.578104}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5788019}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.579656}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.581044}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.581443}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.582284}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.583117}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.583819}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.584759}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    return_difference=True\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.585618}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                                    date_col,\n                                                                    date_part=\"day\",\n                                                                    interval=None,\n                                                                    row_condition=None,\n                                                                    test_start_date=None,\n                                                                    test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n\n)\nselect\n    *\nfrom final\nwhere\n    row_cnt = 0\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.589599}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.593025}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.593581}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.594746}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.595728}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5962749}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.598131}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.5995011}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set row_condition_ext %}\n\n{% if row_condition  %}\n    {{ row_condition }} and\n{% endif %}\n\n{% if ignore_row_if == \"all_values_are_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} and {% endif %}\n        {%- endfor %}\n    )\n{% elif ignore_row_if == \"any_value_is_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} or {% endif %}\n        {%- endfor %}\n    )\n{% endif %}\n{% endset %}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.602008}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set operator = \"=\" %}\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.603035}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.6037009}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.6044421}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/dhui/GIT/solana-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~\"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649447654.6058712}}, "docs": {"solana_models.mint": {"unique_id": "solana_models.mint", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/mint.md", "original_file_path": "models/descriptions/mint.md", "name": "mint", "block_contents": "Unique address representing a specific token"}, "solana_models.token_metadata_uri": {"unique_id": "solana_models.token_metadata_uri", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/token_metadata_uri.md", "original_file_path": "models/descriptions/token_metadata_uri.md", "name": "token_metadata_uri", "block_contents": "URL that links to the token metadata on the ipfs service"}, "solana_models.blockchain": {"unique_id": "solana_models.blockchain", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/blockchain.md", "original_file_path": "models/descriptions/blockchain.md", "name": "blockchain", "block_contents": "In this table, always Solana. Used to join to cross-chain tables."}, "solana_models.contract_address": {"unique_id": "solana_models.contract_address", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/contract_address.md", "original_file_path": "models/descriptions/contract_address.md", "name": "contract_address", "block_contents": "Address unique to an NFT series"}, "solana_models.tx_id": {"unique_id": "solana_models.tx_id", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "A unique key that identifies a transaction"}, "solana_models.tx_from": {"unique_id": "solana_models.tx_from", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/tx_from.md", "original_file_path": "models/descriptions/tx_from.md", "name": "tx_from", "block_contents": "The wallet address that initiated an event"}, "solana_models.program_id": {"unique_id": "solana_models.program_id", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/program_id.md", "original_file_path": "models/descriptions/program_id.md", "name": "program_id", "block_contents": "An address that identifies the program that is being interacted with. I.E. which DEX for a swap or marketplace for an NFT sale."}, "solana_models.tx_succeeded": {"unique_id": "solana_models.tx_succeeded", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/tx_succeeded.md", "original_file_path": "models/descriptions/tx_succeeded.md", "name": "tx_succeeded", "block_contents": "True when a transaction is successful, otherwise false."}, "solana_models.token_id": {"unique_id": "solana_models.token_id", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/token_id.md", "original_file_path": "models/descriptions/token_id.md", "name": "token_id", "block_contents": "Numeric value that identifies the NFT within it's series"}, "solana_models.image_url": {"unique_id": "solana_models.image_url", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/image_url.md", "original_file_path": "models/descriptions/image_url.md", "name": "image_url", "block_contents": "URL that links to the image on the ipfs service"}, "solana_models.ingested_at": {"unique_id": "solana_models.ingested_at", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/ingested_at.md", "original_file_path": "models/descriptions/ingested_at.md", "name": "ingested_at", "block_contents": "Time the record was ingested by the source"}, "solana_models.sales_amount": {"unique_id": "solana_models.sales_amount", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/sales_amount.md", "original_file_path": "models/descriptions/sales_amount.md", "name": "sales_amount", "block_contents": "The amount of Solana the NFT was purchased for"}, "solana_models.instruction": {"unique_id": "solana_models.instruction", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/instruction.md", "original_file_path": "models/descriptions/instruction.md", "name": "instruction", "block_contents": "Specifies which program it is calling, which accounts it wants to read or modify, and additional data that serves as auxiliary input to the program"}, "solana_models.amount": {"unique_id": "solana_models.amount", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/amount.md", "original_file_path": "models/descriptions/amount.md", "name": "amount", "block_contents": "The number of tokens sent during an event"}, "solana_models.contract_name": {"unique_id": "solana_models.contract_name", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/contract_name.md", "original_file_path": "models/descriptions/contract_name.md", "name": "contract_name", "block_contents": "Name of the contract that identifies an NFT series. Example - tcgdragons"}, "solana_models.index": {"unique_id": "solana_models.index", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/index.md", "original_file_path": "models/descriptions/index.md", "name": "index", "block_contents": "A unique key that identifies the event's position within a transaction"}, "solana_models.token_name": {"unique_id": "solana_models.token_name", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/token_name.md", "original_file_path": "models/descriptions/token_name.md", "name": "token_name", "block_contents": "Name of the NFT token - this is unique to token. Example SMB #284"}, "solana_models.inner_instruction": {"unique_id": "solana_models.inner_instruction", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/inner_instruction.md", "original_file_path": "models/descriptions/inner_instruction.md", "name": "inner_instruction", "block_contents": "A call from one smart contract program to another"}, "solana_models.created_at_timestamp": {"unique_id": "solana_models.created_at_timestamp", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/created_at_timestamp.md", "original_file_path": "models/descriptions/created_at_timestamp.md", "name": "created_at_timestamp", "block_contents": "timestamp in UTC that the NFT was minted at"}, "solana_models.tx_to": {"unique_id": "solana_models.tx_to", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/tx_to.md", "original_file_path": "models/descriptions/tx_to.md", "name": "tx_to", "block_contents": "The wallet address that receives tokens in an event"}, "solana_models.creator_address": {"unique_id": "solana_models.creator_address", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/creator_address.md", "original_file_path": "models/descriptions/creator_address.md", "name": "creator_address", "block_contents": "address provided by the creator of the project where mint payments and secondary market royalties are sent"}, "solana_models.token_metadata": {"unique_id": "solana_models.token_metadata", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/token_metadata.md", "original_file_path": "models/descriptions/token_metadata.md", "name": "token_metadata", "block_contents": "a block of json that describes the traits of an NFT"}, "solana_models.creator_name": {"unique_id": "solana_models.creator_name", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/creator_name.md", "original_file_path": "models/descriptions/creator_name.md", "name": "creator_name", "block_contents": "name of the project creator - this can be an individual or a company name"}, "solana_models.project_name": {"unique_id": "solana_models.project_name", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/project_name.md", "original_file_path": "models/descriptions/project_name.md", "name": "project_name", "block_contents": "Name of the project the NFT token belongs to"}, "solana_models.block_id": {"unique_id": "solana_models.block_id", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "name": "block_id", "block_contents": "Slot for which a block can be created."}, "solana_models.mint_price": {"unique_id": "solana_models.mint_price", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/mint_price.md", "original_file_path": "models/descriptions/mint_price.md", "name": "mint_price", "block_contents": "Price that it cost to mint the NFT in SOL or other currency."}, "solana_models.event_type": {"unique_id": "solana_models.event_type", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/event_type.md", "original_file_path": "models/descriptions/event_type.md", "name": "event_type", "block_contents": "The type of event (i.e. \"delegate\", \"withdraw\") that is occurring"}, "solana_models.mint_currency": {"unique_id": "solana_models.mint_currency", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/mint_currency.md", "original_file_path": "models/descriptions/mint_currency.md", "name": "mint_currency", "block_contents": "Currency used to pay for the NFT mint."}, "solana_models.block_timestamp": {"unique_id": "solana_models.block_timestamp", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time at which the block began."}, "solana_models.purchaser": {"unique_id": "solana_models.purchaser", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "descriptions/purchaser.md", "original_file_path": "models/descriptions/purchaser.md", "name": "purchaser", "block_contents": "The wallet address that purchased the NFT"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.0.0_1/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"test.solana_models.not_null_silver__votes_VOTE_AUTHORITY.7098d587fc": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOTE_AUTHORITY", "model": "{{ get_where_subquery(ref('silver__votes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__votes_VOTE_AUTHORITY"], "unique_id": "test.solana_models.not_null_silver__votes_VOTE_AUTHORITY.7098d587fc", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__votes_VOTE_AUTHORITY.sql", "original_file_path": "models/silver/silver__votes.yml", "name": "not_null_silver__votes_VOTE_AUTHORITY", "alias": "votes_VOTE_AUTHORITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__votes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.343114, "column_name": "VOTE_AUTHORITY", "file_key_name": "models.silver__votes"}], "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PURCHASER", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_PURCHASER"], "unique_id": "test.solana_models.not_null_silver__nft_mints_PURCHASER.cd5469d8a0", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_PURCHASER.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_PURCHASER", "alias": "nft_mints_PURCHASER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.551601, "column_name": "PURCHASER", "file_key_name": "models.silver__nft_mints"}], "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT.a35f1c5695", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_MINT.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT", "alias": "nft_mints_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.55328, "column_name": "MINT", "file_key_name": "models.silver__nft_mints"}], "test.solana_models.not_null_silver__nft_mints_MINT_PRICE.20bf796410": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_mints_MINT_PRICE"], "unique_id": "test.solana_models.not_null_silver__nft_mints_MINT_PRICE.20bf796410", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_mints_MINT_PRICE.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_PRICE", "alias": "nft_mints_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.554029, "column_name": "MINT_PRICE", "file_key_name": "models.silver__nft_mints"}], "test.solana_models.not_null_silver___prices_TOTAL_SUPPLY.9ae9b61c8e": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SUPPLY", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_TOTAL_SUPPLY"], "unique_id": "test.solana_models.not_null_silver___prices_TOTAL_SUPPLY.9ae9b61c8e", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___prices_TOTAL_SUPPLY.sql", "original_file_path": "models/silver/silver___prices.yml", "name": "not_null_silver___prices_TOTAL_SUPPLY", "alias": "_prices_TOTAL_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.59187, "column_name": "TOTAL_SUPPLY", "file_key_name": "models.silver___prices"}], "test.solana_models.not_null_silver___prices_VOLUME_24H.4ad6d23f34": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VOLUME_24H", "model": "{{ get_where_subquery(ref('silver___prices')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver___prices_VOLUME_24H"], "unique_id": "test.solana_models.not_null_silver___prices_VOLUME_24H.4ad6d23f34", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver___prices_VOLUME_24H.sql", "original_file_path": "models/silver/silver___prices.yml", "name": "not_null_silver___prices_VOLUME_24H", "alias": "_prices_VOLUME_24H", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver___prices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.592664, "column_name": "VOLUME_24H", "file_key_name": "models.silver___prices"}], "test.solana_models.not_null_silver__nft_metadata_MINT.41b4833385": [{"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT", "model": "{{ get_where_subquery(ref('silver__nft_metadata')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SOLANA", "schema": "not_null_silver", "fqn": ["solana_models", "silver", "not_null_silver__nft_metadata_MINT"], "unique_id": "test.solana_models.not_null_silver__nft_metadata_MINT.41b4833385", "package_name": "solana_models", "root_path": "/Users/dhui/GIT/solana-models", "path": "not_null_silver__nft_metadata_MINT.sql", "original_file_path": "models/silver/silver__nft_metadata.yml", "name": "not_null_silver__nft_metadata_MINT", "alias": "nft_metadata_MINT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_metadata"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false}, "created_at": 1649447655.630309, "column_name": "MINT", "file_key_name": "models.silver__nft_metadata"}]}, "parent_map": {"model.solana_models.core__fact_events": ["model.solana_models.silver__events"], "model.solana_models.core__fact_transactions": ["model.solana_models.silver__transactions"], "model.solana_models.core__dim_nft_metadata": ["model.solana_models.silver__nft_metadata"], "model.solana_models.core__fact_staking_lp_actions": ["model.solana_models.silver__staking_lp_actions"], "model.solana_models.core__fact_swaps": ["model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex"], "model.solana_models.core__fact_votes_agg_block": ["model.solana_models.silver__votes_agg_block"], "model.solana_models.core__fact_nft_mints": ["model.solana_models.silver__nft_mints"], "model.solana_models.core__fact_blocks": ["model.solana_models.silver__blocks"], "model.solana_models.core__fact_gov_actions": ["model.solana_models.silver__saber_gov_actions"], "model.solana_models.core__fact_transfers": ["model.solana_models.silver__transfers"], "model.solana_models.core__fact_gauges_votes": ["model.solana_models.silver__saber_gauges_votes"], "model.solana_models.core__fact_nft_sales": ["model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport"], "model.solana_models.core__dim_labels": ["source.solana_models.crosschain.address_labels"], "model.solana_models.bronze__blocks": ["source.solana_models.prod.solana_blocks"], "model.solana_models.bronze__transactions": ["source.solana_models.prod.solana_txs"], "model.solana_models.silver___instructions": ["model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_magic_eden_v1": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__events": ["model.solana_models.silver___inner_instructions", "model.solana_models.silver___instructions"], "model.solana_models.silver__nft_sales_smb": ["model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_magic_eden_v2": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver___post_token_balances": ["model.solana_models.silver__transactions"], "model.solana_models.silver__swaps_jupiter_dex": ["model.solana_models.silver___instructions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__transactions": ["model.solana_models.bronze__transactions"], "model.solana_models.silver__transfers": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__swaps_saber_dex": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_sales_solanart": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__saber_gauges_votes": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__swaps_raydium_dex": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__votes": ["model.solana_models.bronze__transactions"], "model.solana_models.silver__blocks": ["model.solana_models.bronze__blocks"], "model.solana_models.silver__nft_sales_solport": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__saber_gov_actions": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__nft_metadata": ["source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827"], "model.solana_models.silver___inner_instructions": ["model.solana_models.silver__transactions"], "model.solana_models.silver___pre_token_balances": ["model.solana_models.silver__transactions"], "model.solana_models.silver__votes_agg_block": ["model.solana_models.silver__transactions", "model.solana_models.silver__votes"], "model.solana_models.silver__nft_mints": ["model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__swaps_orca_dex": ["model.solana_models.silver___instructions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver__staking_lp_actions": ["model.solana_models.silver__events", "model.solana_models.silver__transactions"], "model.solana_models.silver___prices": ["source.solana_models.shared.prices_v2"], "operation.solana_models.solana_models-on-run-start-0": [], "operation.solana_models.solana_models-on-run-start-1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf": ["model.solana_models.core__fact_votes_agg_block"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01": ["model.solana_models.core__fact_votes_agg_block"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22": ["model.solana_models.core__fact_votes_agg_block"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db": ["model.solana_models.core__fact_nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60": ["model.solana_models.core__fact_blocks"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013": ["model.solana_models.core__fact_staking_lp_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231": ["model.solana_models.core__dim_nft_metadata"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276": ["model.solana_models.core__fact_transactions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663": ["model.solana_models.core__fact_events"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f": ["model.solana_models.core__fact_swaps"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9": ["model.solana_models.core__fact_nft_sales"], "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.solana_models.core__dim_labels"], "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d": ["model.solana_models.core__dim_labels"], "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.solana_models.core__dim_labels"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f": ["model.solana_models.core__fact_gov_actions"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577": ["model.solana_models.core__fact_gauges_votes"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": ["model.solana_models.core__fact_transfers"], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63": ["model.solana_models.core__fact_transfers"], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1": ["model.solana_models.silver__swaps_saber_dex"], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba": ["model.solana_models.silver__nft_sales_solanart"], "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.46e200119f": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2.2d4562d0eb": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_ID.c375e59690": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_TX_ID.7026cc1de2": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_SUCCEEDED.49238ee4a9": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_VOTER.6a6f58323e": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_GAUGE.9e4fde5f22": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_DELEGATED_SHARES.3905d6ea47": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__saber_gauges_votes_POWER.bc80d50587": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE.7e636a1cf7": ["model.solana_models.silver__saber_gauges_votes"], "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.solana_models.silver__blocks"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6": ["model.solana_models.silver__blocks"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e": ["model.solana_models.silver__blocks"], "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936": ["model.solana_models.silver__votes"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_TX_ID.e428472813": ["model.solana_models.silver__votes"], "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be": ["model.solana_models.silver__votes"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994": ["model.solana_models.silver__votes"], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde": ["model.solana_models.silver__swaps_raydium_dex"], "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d": ["model.solana_models.silver___instructions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7": ["model.solana_models.silver___instructions"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT.928007f02c": ["model.solana_models.silver__nft_sales_magic_eden_v1"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79": ["model.solana_models.silver__nft_sales_magic_eden_v2"], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2.53c867d3b4": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19": ["model.solana_models.silver__nft_sales_smb"], "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75": ["model.solana_models.silver__events"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_INDEX.9a860b1d59": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872": ["model.solana_models.silver__events"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3": ["model.solana_models.silver__events"], "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.solana_models.silver__transactions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339": ["model.solana_models.silver__transactions"], "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": ["model.solana_models.silver__transactions"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": ["model.solana_models.silver__transactions"], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515": ["model.solana_models.silver__swaps_jupiter_dex"], "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d": ["model.solana_models.silver___post_token_balances"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778": ["model.solana_models.silver___post_token_balances"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231": ["model.solana_models.silver___post_token_balances"], "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.solana_models.silver__transfers"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_INDEX.d7de164538": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4": ["model.solana_models.silver__transfers"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02": ["model.solana_models.silver__transfers"], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56": ["model.solana_models.silver__votes_agg_block"], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693": ["model.solana_models.silver___pre_token_balances"], "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e": ["model.solana_models.silver___inner_instructions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429": ["model.solana_models.silver___inner_instructions"], "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": ["model.solana_models.silver__nft_mints"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884": ["model.solana_models.silver__nft_mints"], "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e": ["model.solana_models.silver__nft_mints"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY.0dba765d2d": ["model.solana_models.silver__nft_mints"], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e": ["model.solana_models.silver__swaps_orca_dex"], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa": ["model.solana_models.silver__staking_lp_actions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver___prices_PRICE.538411960a": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3": ["model.solana_models.silver___prices"], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2.0c82aab50c": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8": ["model.solana_models.silver__nft_sales_solport"], "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.d5c9da72fb": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2.b909618d47": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_ID.ddd15f000c": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_TX_ID.940cbef646": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_SUCCEEDED.da5558dfd3": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_SIGNER.2b8ab022fc": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.cfa4617140": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_MINT.967987399d": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_ACTION.bc7052f39d": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__saber_gov_actions_AMOUNT.246e41b482": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID.5c6344ea78": ["model.solana_models.silver__saber_gov_actions"], "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a": ["model.solana_models.silver__nft_metadata"], "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32": ["model.solana_models.silver__nft_metadata"], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849": ["model.solana_models.silver__nft_metadata"], "source.solana_models.prod.solana_blocks": [], "source.solana_models.prod.solana_txs": [], "source.solana_models.crosschain.address_labels": [], "source.solana_models.shared.prices_v2": [], "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827": []}, "child_map": {"model.solana_models.core__fact_events": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3"], "model.solana_models.core__fact_transactions": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6"], "model.solana_models.core__dim_nft_metadata": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537", "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231"], "model.solana_models.core__fact_staking_lp_actions": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7"], "model.solana_models.core__fact_swaps": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4"], "model.solana_models.core__fact_votes_agg_block": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22"], "model.solana_models.core__fact_nft_mints": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1"], "model.solana_models.core__fact_blocks": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da"], "model.solana_models.core__fact_gov_actions": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870"], "model.solana_models.core__fact_transfers": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb"], "model.solana_models.core__fact_gauges_votes": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847"], "model.solana_models.core__fact_nft_sales": ["test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5", "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16"], "model.solana_models.core__dim_labels": ["test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8", "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d", "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed"], "model.solana_models.bronze__blocks": ["model.solana_models.silver__blocks"], "model.solana_models.bronze__transactions": ["model.solana_models.silver__transactions", "model.solana_models.silver__votes"], "model.solana_models.silver___instructions": ["model.solana_models.silver__events", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8", "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c", "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d", "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f", "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7", "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847", "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea"], "model.solana_models.silver__nft_sales_magic_eden_v1": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT.928007f02c", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1", "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072"], "model.solana_models.silver__events": ["model.solana_models.core__fact_events", "model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__saber_gauges_votes", "model.solana_models.silver__saber_gov_actions", "model.solana_models.silver__staking_lp_actions", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3", "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd", "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75", "test.solana_models.not_null_silver__events_INDEX.9a860b1d59", "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872", "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7", "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636"], "model.solana_models.silver__nft_sales_smb": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2.53c867d3b4", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19", "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70", "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c", "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3", "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4", "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b", "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c", "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00", "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d", "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843"], "model.solana_models.silver__nft_sales_magic_eden_v2": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b", "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08"], "model.solana_models.silver___post_token_balances": ["model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__saber_gov_actions", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a", "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231", "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4", "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff", "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d", "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432", "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0", "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778", "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f", "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d", "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1", "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a", "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c"], "model.solana_models.silver__swaps_jupiter_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515", "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6", "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca", "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff", "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31", "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f", "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86", "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117", "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af", "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1"], "model.solana_models.silver__transactions": ["model.solana_models.core__fact_transactions", "model.solana_models.silver___inner_instructions", "model.solana_models.silver___instructions", "model.solana_models.silver___post_token_balances", "model.solana_models.silver___pre_token_balances", "model.solana_models.silver__nft_mints", "model.solana_models.silver__nft_sales_magic_eden_v1", "model.solana_models.silver__nft_sales_magic_eden_v2", "model.solana_models.silver__nft_sales_smb", "model.solana_models.silver__nft_sales_solanart", "model.solana_models.silver__nft_sales_solport", "model.solana_models.silver__saber_gauges_votes", "model.solana_models.silver__saber_gov_actions", "model.solana_models.silver__staking_lp_actions", "model.solana_models.silver__swaps_jupiter_dex", "model.solana_models.silver__swaps_orca_dex", "model.solana_models.silver__swaps_raydium_dex", "model.solana_models.silver__swaps_saber_dex", "model.solana_models.silver__transfers", "model.solana_models.silver__votes_agg_block", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6", "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1", "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d", "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c", "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f", "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539", "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339", "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466"], "model.solana_models.silver__transfers": ["model.solana_models.core__fact_transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02", "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b", "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.solana_models.not_null_silver__transfers_INDEX.d7de164538", "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4", "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b", "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe", "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2", "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7"], "model.solana_models.silver__swaps_saber_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1", "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db", "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9", "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e", "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218", "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff", "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e", "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5", "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d", "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd"], "model.solana_models.silver__nft_sales_solanart": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba", "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa", "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f", "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca", "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a", "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e", "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508", "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6", "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2", "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229"], "model.solana_models.silver__saber_gauges_votes": ["model.solana_models.core__fact_gauges_votes", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2.2d4562d0eb", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE.7e636a1cf7", "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_ID.c375e59690", "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.46e200119f", "test.solana_models.not_null_silver__saber_gauges_votes_DELEGATED_SHARES.3905d6ea47", "test.solana_models.not_null_silver__saber_gauges_votes_GAUGE.9e4fde5f22", "test.solana_models.not_null_silver__saber_gauges_votes_POWER.bc80d50587", "test.solana_models.not_null_silver__saber_gauges_votes_SUCCEEDED.49238ee4a9", "test.solana_models.not_null_silver__saber_gauges_votes_TX_ID.7026cc1de2", "test.solana_models.not_null_silver__saber_gauges_votes_VOTER.6a6f58323e"], "model.solana_models.silver__swaps_raydium_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde", "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2", "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a", "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a", "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe", "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079", "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3", "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69", "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282", "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81"], "model.solana_models.silver__votes": ["model.solana_models.silver__votes_agg_block", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994", "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d", "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936", "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6", "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be", "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1", "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c", "test.solana_models.not_null_silver__votes_TX_ID.e428472813", "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9", "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5"], "model.solana_models.silver__blocks": ["model.solana_models.core__fact_blocks", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e", "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35", "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6", "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444", "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5", "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6"], "model.solana_models.silver__nft_sales_solport": ["model.solana_models.core__fact_nft_sales", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2.0c82aab50c", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8", "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e", "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf", "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86", "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba", "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44", "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459", "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37", "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae", "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d"], "model.solana_models.silver__saber_gov_actions": ["model.solana_models.core__fact_gov_actions", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2.b909618d47", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID.5c6344ea78", "test.solana_models.not_null_silver__saber_gov_actions_ACTION.bc7052f39d", "test.solana_models.not_null_silver__saber_gov_actions_AMOUNT.246e41b482", "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_ID.ddd15f000c", "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.d5c9da72fb", "test.solana_models.not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.cfa4617140", "test.solana_models.not_null_silver__saber_gov_actions_MINT.967987399d", "test.solana_models.not_null_silver__saber_gov_actions_SIGNER.2b8ab022fc", "test.solana_models.not_null_silver__saber_gov_actions_SUCCEEDED.da5558dfd3", "test.solana_models.not_null_silver__saber_gov_actions_TX_ID.940cbef646"], "model.solana_models.silver__nft_metadata": ["model.solana_models.core__dim_nft_metadata", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849", "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60", "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff", "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189", "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f", "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4", "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475", "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722", "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e", "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082", "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d", "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a", "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32"], "model.solana_models.silver___inner_instructions": ["model.solana_models.silver__events", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd", "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601", "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e", "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa", "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429", "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef", "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e", "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0"], "model.solana_models.silver___pre_token_balances": ["model.solana_models.silver__transfers", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246", "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693", "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e", "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436", "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0", "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6", "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4", "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd", "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044", "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903", "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d", "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d", "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed"], "model.solana_models.silver__votes_agg_block": ["model.solana_models.core__fact_votes_agg_block", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56", "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466", "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c", "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a"], "model.solana_models.silver__nft_mints": ["model.solana_models.core__fact_nft_mints", "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY.0dba765d2d", "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211", "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d", "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e", "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4", "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413", "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884"], "model.solana_models.silver__swaps_orca_dex": ["model.solana_models.core__fact_swaps", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e", "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a", "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1", "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1", "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa", "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253", "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8", "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e", "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c", "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d"], "model.solana_models.silver__staking_lp_actions": ["model.solana_models.core__fact_staking_lp_actions", "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd", "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa", "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000", "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8", "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f", "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face", "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77", "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0", "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52", "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f"], "model.solana_models.silver___prices": ["test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42", "test.solana_models.not_null_silver___prices_PRICE.538411960a", "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3", "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5"], "operation.solana_models.solana_models-on-run-start-0": [], "operation.solana_models.solana_models-on-run-start-1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_TIMESTAMP.93dd6baaaf": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_BLOCK_ID.b9de8feb01": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_votes_agg_block_NUM_VOTES.ec575d2c22": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_TIMESTAMP.599ca69ba4": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_BLOCK_ID.de330b6779": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_TX_ID.e6b03355d1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_SUCCEEDED.17101b07fc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PROGRAM_ID.e2e3783502": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_PURCHASER.0648531d86": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_PRICE.ac9726d15f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT_CURRENCY.3fbdfbf562": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_mints_MINT.35879991db": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HEIGHT.f326decda1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_ID.c278e9de4b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_BLOCK_HASH.abb17cbc60": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_TIMESTAMP.02bdfb06e3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_BLOCK_ID.7337ee389a": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_TX_ID.d7fdf9b4d7": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INDEX.95cb3060d6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SUCCEEDED.d43437cd71": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PROGRAM_ID.7cad2495c0": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_EVENT_TYPE.144c187198": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_SIGNERS.b36d51b836": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_ACCOUNT_KEYS.f516d68fde": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INSTRUCTION.3b19c154d8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_INNER_INSTRUCTION.a7a19158b5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_BALANCES.c9cb286a13": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_BALANCES.38d519c2dc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_PRE_TOKEN_BALANCES.eacbf927de": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_staking_lp_actions_POST_TOKEN_BALANCES.2d68ed7013": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_BLOCKCHAIN.772a138c47": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_ADDRESS.193911dc47": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CONTRACT_NAME.9b19f556e5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATED_AT_TIMESTAMP.d4dde94d25": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_MINT.9dfe370eea": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_ADDRESS.99a5a2aaef": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_CREATOR_NAME.93feee6530": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_IMAGE_URL.c2102aae5b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_PROJECT_NAME.fcb8cfbbe5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_ID.24cf025b4c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA.0a88360f1b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_METADATA_URI.4be3eb9537": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__dim_nft_metadata_TOKEN_NAME.8063629231": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_RECENT_BLOCK_HASH.c7b49099c5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SUCCEEDED.46b2d0f903": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_SIGNERS.ba4259d0f4": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_ACCOUNT_KEYS.16e2c256e8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_BALANCES.2c66ae46e8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_BALANCES.7f25049e12": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_PRE_TOKEN_BALANCES.ffbb6b199b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_POST_TOKEN_BALANCES.1d099e55ec": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_LOG_MESSAGES.0d8ef92276": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_TIMESTAMP.7f286a1ec1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_BLOCK_ID.12922079fb": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_TX_ID.7ddc45b4f3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INDEX.ea7567b344": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_PROGRAM_ID.dd70b5bbcf": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INSTRUCTION.aea8645339": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_events_INNER_INSTRUCTION.3227a6d663": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_PROGRAM.96cb1d26b9": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_TIMESTAMP.1e17d9cc4c": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_BLOCK_ID.39064d929a": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_TX_ID.b8a105d7d4": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SUCCEEDED.38ce2ea183": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAPPER.ad455552b6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_AMOUNT.c3ea8020d7": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_FROM_MINT.2df3eab2ab": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_AMOUNT.e170787c2a": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_SWAP_TO_MINT.651ac0017f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_TIMESTAMP.c47ee8f192": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_BLOCK_ID.15e9191c58": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_TX_ID.c0dca32e16": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SUCCEEDED.6d8864ffe5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PROGRAM_ID.8cacaaae26": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_PURCHASER.a94609f942": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_MINT.376b57dca9": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_nft_sales_SALES_AMOUNT.2151294cc9": [], "test.solana_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.solana_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.solana_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.solana_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": [], "test.solana_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.solana_models.not_null_core__dim_labels_LABEL.05696d692d": [], "test.solana_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_PROGRAM_NAME.dc15da8ce6": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_TIMESTAMP.14d6f7095e": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_BLOCK_ID.7a3bf828c1": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_TX_ID.aee488f870": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SUCCEEDED.556854ae69": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_SIGNER.de8c1e90ef": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_LOCKER_ACCOUNT.06a1439af3": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_MINT.2cfa2c59ee": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_ACTION.ad4f543ebd": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gov_actions_AMOUNT.8a83bb4d8f": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_PROGRAM_NAME.d9c5ebc39b": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_TIMESTAMP.7427f5bf9d": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_BLOCK_ID.2d192556a2": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_TX_ID.8af5556373": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_SUCCEEDED.6789b70eef": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_VOTER.2657add847": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_GAUGE.35236e0999": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_DELEGATED_SHARES.35e140f844": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_gauges_votes_POWER.ed5a0d0577": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_INDEX.8fe58757f5": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_FROM.2edb64a914": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_TO.e0c81229cb": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": [], "test.solana_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_MINT.4cc7e87b63": [], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_TIMESTAMP.211c0c9cc9": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_saber_dex_BLOCK_TIMESTAMP__day__2.89946432ca": [], "test.solana_models.not_null_silver__swaps_saber_dex_BLOCK_ID.74496652db": [], "test.solana_models.not_null_silver__swaps_saber_dex_TX_ID.5383c161bd": [], "test.solana_models.not_null_silver__swaps_saber_dex_SUCCEEDED.820611ccff": [], "test.solana_models.not_null_silver__swaps_saber_dex_SWAPPER.b11b66cc4e": [], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_AMT.34fcf10f0e": [], "test.solana_models.not_null_silver__swaps_saber_dex_FROM_MINT.64fd18a218": [], "test.solana_models.not_null_silver__swaps_saber_dex_TO_AMT.de3eb755c5": [], "test.solana_models.not_null_silver__swaps_saber_dex_TO_MINT.051fbd2d9d": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_saber_dex_BLOCK_ID__TX_ID.16fd4761b1": [], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_TIMESTAMP.f28ba5799f": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solanart_BLOCK_TIMESTAMP__day__2.a2e0842380": [], "test.solana_models.not_null_silver__nft_sales_solanart_BLOCK_ID.fe01e7a8aa": [], "test.solana_models.not_null_silver__nft_sales_solanart_TX_ID.d616109229": [], "test.solana_models.not_null_silver__nft_sales_solanart_SUCCEEDED.d994ffdee2": [], "test.solana_models.not_null_silver__nft_sales_solanart_PROGRAM_ID.f60dd0554e": [], "test.solana_models.not_null_silver__nft_sales_solanart_PURCHASER.f8e701a508": [], "test.solana_models.not_null_silver__nft_sales_solanart_MINT.a5063b254a": [], "test.solana_models.not_null_silver__nft_sales_solanart_SALES_AMOUNT.b72edf55a6": [], "test.solana_models.not_null_silver__nft_sales_solanart_INGESTED_AT.d2119ba5ca": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solanart_TX_ID__MINT.7ffaca37ba": [], "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_TIMESTAMP.46e200119f": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gauges_votes_BLOCK_TIMESTAMP__day__2.2d4562d0eb": [], "test.solana_models.not_null_silver__saber_gauges_votes_BLOCK_ID.c375e59690": [], "test.solana_models.not_null_silver__saber_gauges_votes_TX_ID.7026cc1de2": [], "test.solana_models.not_null_silver__saber_gauges_votes_SUCCEEDED.49238ee4a9": [], "test.solana_models.not_null_silver__saber_gauges_votes_VOTER.6a6f58323e": [], "test.solana_models.not_null_silver__saber_gauges_votes_GAUGE.9e4fde5f22": [], "test.solana_models.not_null_silver__saber_gauges_votes_DELEGATED_SHARES.3905d6ea47": [], "test.solana_models.not_null_silver__saber_gauges_votes_POWER.bc80d50587": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gauges_votes_TX_ID__VOTER__GAUGE.7e636a1cf7": [], "test.solana_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.solana_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__2.8187f059ba": [], "test.solana_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": [], "test.solana_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": [], "test.solana_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.solana_models.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": [], "test.solana_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": [], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_ID.8860de37f5": [], "test.solana_models.not_null_silver__blocks_PREVIOUS_BLOCK_HASH.65de203444": [], "test.solana_models.not_null_silver__blocks_INGESTED_AT.6e480e3fc6": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_ID.dcaee2418e": [], "test.solana_models.not_null_silver__votes_BLOCK_TIMESTAMP.367a6aa936": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_BLOCK_TIMESTAMP__day__2.c7a587d375": [], "test.solana_models.not_null_silver__votes_BLOCK_ID.b93c06181d": [], "test.solana_models.not_null_silver__votes_RECENT_BLOCK_HASH.68b660dea1": [], "test.solana_models.not_null_silver__votes_TX_ID.e428472813": [], "test.solana_models.null_threshold_silver__votes_FEE__0_99.cd9fe8fbe5": [], "test.solana_models.not_null_silver__votes_FEE.2ca36e4da6": [], "test.solana_models.not_null_silver__votes_SUCCEEDED.fc3c69269c": [], "test.solana_models.not_null_silver__votes_VOTE_ACCOUNT.4bbe6131e9": [], "test.solana_models.not_null_silver__votes_INGESTED_AT.0d5a8cc6be": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_BLOCK_ID__TX_ID.243dc93994": [], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_TIMESTAMP.5581788f1a": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_raydium_dex_BLOCK_TIMESTAMP__day__2.1b636f9ca2": [], "test.solana_models.not_null_silver__swaps_raydium_dex_BLOCK_ID.a2da9afce2": [], "test.solana_models.not_null_silver__swaps_raydium_dex_TX_ID.fe1a2e9c81": [], "test.solana_models.not_null_silver__swaps_raydium_dex_SUCCEEDED.b3327a3079": [], "test.solana_models.not_null_silver__swaps_raydium_dex_SWAPPER.1372b23ab3": [], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_AMT.105a96372a": [], "test.solana_models.not_null_silver__swaps_raydium_dex_FROM_MINT.555eea44fe": [], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_AMT.91a3a7ea69": [], "test.solana_models.not_null_silver__swaps_raydium_dex_TO_MINT.dd4514d282": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_raydium_dex_BLOCK_ID__TX_ID.7fbf8d1fde": [], "test.solana_models.not_null_silver___instructions_BLOCK_TIMESTAMP.f9b5fd299d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___instructions_BLOCK_TIMESTAMP__day__1.10c7ee41c8": [], "test.solana_models.not_null_silver___instructions_BLOCK_ID.60d559026c": [], "test.solana_models.not_null_silver___instructions_TX_ID.b60a3ca847": [], "test.solana_models.not_null_silver___instructions_INDEX.8a1b1b281f": [], "test.solana_models.not_null_silver___instructions_VALUE.8d419792ea": [], "test.solana_models.not_null_silver___instructions_INGESTED_AT.fa05f2c6f7": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP.9ee059e717": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v1_BLOCK_TIMESTAMP__day__2.b19522e013": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_BLOCK_ID.20c5ac155b": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_TX_ID.67a4ae5072": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SUCCEEDED.2b06cd05a1": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PROGRAM_ID.13a8be322e": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_PURCHASER.0d37f0616a": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_MINT.7bbe45f3ff": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_SALES_AMOUNT.0260289946": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v1_INGESTED_AT.7bf0451e85": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v1_TX_ID__MINT.928007f02c": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP.90344f3ff4": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_magic_eden_v2_BLOCK_TIMESTAMP__day__2.0e02acfb84": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_BLOCK_ID.79871ac713": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_TX_ID.6eff1f4e08": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SUCCEEDED.4612bd188b": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PROGRAM_ID.132370c767": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_PURCHASER.ff401eb37e": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_MINT.da9a679966": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_SALES_AMOUNT.1f0ce66936": [], "test.solana_models.not_null_silver__nft_sales_magic_eden_v2_INGESTED_AT.ed1d32ec24": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_magic_eden_v2_TX_ID.1cd68c1e79": [], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_TIMESTAMP.f8f2931e8c": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_smb_BLOCK_TIMESTAMP__day__2.53c867d3b4": [], "test.solana_models.not_null_silver__nft_sales_smb_BLOCK_ID.0b2701de70": [], "test.solana_models.not_null_silver__nft_sales_smb_TX_ID.616c707843": [], "test.solana_models.not_null_silver__nft_sales_smb_SUCCEEDED.a1f4a9db9d": [], "test.solana_models.not_null_silver__nft_sales_smb_PROGRAM_ID.73617d185b": [], "test.solana_models.not_null_silver__nft_sales_smb_PURCHASER.4aa1838d6c": [], "test.solana_models.not_null_silver__nft_sales_smb_MINT.4539dcb4e4": [], "test.solana_models.not_null_silver__nft_sales_smb_SALES_AMOUNT.c161abcd00": [], "test.solana_models.not_null_silver__nft_sales_smb_INGESTED_AT.5c03ec5fa3": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_smb_TX_ID.ec7ec8ba19": [], "test.solana_models.not_null_silver__events_BLOCK_TIMESTAMP.3dcb219e75": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_BLOCK_TIMESTAMP__day__2.ff2b1e5ef3": [], "test.solana_models.not_null_silver__events_BLOCK_ID.2198b1bddd": [], "test.solana_models.not_null_silver__events_TX_ID.a48ecbc636": [], "test.solana_models.not_null_silver__events_INDEX.9a860b1d59": [], "test.solana_models.not_null_silver__events_INSTRUCTION.ca668c03e7": [], "test.solana_models.not_null_silver__events_INGESTED_AT.bbb0fff872": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__events_BLOCK_ID__TX_ID__INDEX.13e94b10c3": [], "test.solana_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": [], "test.solana_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": [], "test.solana_models.not_null_silver__transactions_RECENT_BLOCK_HASH.0eeb187a7f": [], "test.solana_models.not_null_silver__transactions_TX_ID.5bc0e20339": [], "test.solana_models.null_threshold_silver__transactions_FEE__0_99.7d465cd466": [], "test.solana_models.not_null_silver__transactions_FEE.2f5d13d04c": [], "test.solana_models.not_null_silver__transactions_SUCCEEDED.3c1fafb539": [], "test.solana_models.not_null_silver__transactions_ACCOUNT_KEYS.aa63d9cba1": [], "test.solana_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP.012e5c59ca": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_jupiter_dex_BLOCK_TIMESTAMP__day__2.128ccceda8": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_BLOCK_ID.bc0cfabbd6": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_TX_ID.9d1efdbfb1": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_SUCCEEDED.52308c2a3f": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_SWAPPER.0d5b438e86": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_AMT.79390d9dff": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_FROM_MINT.7fbef40e31": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_AMT.e906bea117": [], "test.solana_models.not_null_silver__swaps_jupiter_dex_TO_MINT.caabe208af": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_jupiter_dex_BLOCK_ID__TX_ID.222e499515": [], "test.solana_models.not_null_silver___post_token_balances_BLOCK_TIMESTAMP.131824c09d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___post_token_balances_BLOCK_TIMESTAMP__day__2.9b5661972a": [], "test.solana_models.not_null_silver___post_token_balances_BLOCK_ID.7eaff384ff": [], "test.solana_models.not_null_silver___post_token_balances_TX_ID.00a508ebe1": [], "test.solana_models.not_null_silver___post_token_balances_INDEX.c235ab53a0": [], "test.solana_models.not_null_silver___post_token_balances_ACCOUNT_INDEX.cc4842bdf4": [], "test.solana_models.not_null_silver___post_token_balances_MINT.4fa2a8e01f": [], "test.solana_models.not_null_silver___post_token_balances_OWNER.b1557c6d6d": [], "test.solana_models.not_null_silver___post_token_balances_DECIMAL.95647da432": [], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNT.b9d65d8e2a": [], "test.solana_models.not_null_silver___post_token_balances_UIAMOUNTSTRING.01d993d07c": [], "test.solana_models.not_null_silver___post_token_balances_INGESTED_AT.6a4aaec778": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___post_token_balances_BLOCK_ID__TX_ID__INDEX.55ef8ff231": [], "test.solana_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__2.ed6e43fe3e": [], "test.solana_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.solana_models.not_null_silver__transfers_TX_ID.1be05d8ee2": [], "test.solana_models.not_null_silver__transfers_INDEX.d7de164538": [], "test.solana_models.not_null_silver__transfers_TX_FROM.c32ddfd1fe": [], "test.solana_models.not_null_silver__transfers_TX_TO.ee7411ddf7": [], "test.solana_models.not_null_silver__transfers_AMOUNT.ba102cb51b": [], "test.solana_models.not_null_silver__transfers_MINT.749f9aa39b": [], "test.solana_models.not_null_silver__transfers_INGESTED_AT.9ea3cc9dd4": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__transfers_BLOCK_ID__TX_ID__INDEX.db817fcf02": [], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_TIMESTAMP.b66afaa29c": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__votes_agg_block_BLOCK_TIMESTAMP__day__2.cc261edc92": [], "test.solana_models.not_null_silver__votes_agg_block_BLOCK_ID.1df9404466": [], "test.solana_models.not_null_silver__votes_agg_block_NUM_VOTES.c22c63820a": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__votes_agg_block_BLOCK_ID.61fe795c56": [], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_TIMESTAMP.52693344c0": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___pre_token_balances_BLOCK_TIMESTAMP__day__2.64e7c3a246": [], "test.solana_models.not_null_silver___pre_token_balances_BLOCK_ID.c224a76436": [], "test.solana_models.not_null_silver___pre_token_balances_TX_ID.50d4b09b8d": [], "test.solana_models.not_null_silver___pre_token_balances_INDEX.48a96e7ba4": [], "test.solana_models.not_null_silver___pre_token_balances_ACCOUNT_INDEX.1cff442c8e": [], "test.solana_models.not_null_silver___pre_token_balances_MINT.e05b5d4044": [], "test.solana_models.not_null_silver___pre_token_balances_OWNER.a5d1655903": [], "test.solana_models.not_null_silver___pre_token_balances_DECIMAL.09897fadb6": [], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNT.6cede4716d": [], "test.solana_models.not_null_silver___pre_token_balances_UIAMOUNTSTRING.d132c9d1ed": [], "test.solana_models.not_null_silver___pre_token_balances_INGESTED_AT.4fee86c7dd": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver___pre_token_balances_BLOCK_ID__TX_ID__INDEX.070a1d0693": [], "test.solana_models.not_null_silver___inner_instructions_BLOCK_TIMESTAMP.6275f6279e": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___inner_instructions_BLOCK_TIMESTAMP__day__1.205b12f1cd": [], "test.solana_models.not_null_silver___inner_instructions_BLOCK_ID.56640a8601": [], "test.solana_models.not_null_silver___inner_instructions_TX_ID.b7a59cda7e": [], "test.solana_models.not_null_silver___inner_instructions_INDEX.2c17f77daa": [], "test.solana_models.not_null_silver___inner_instructions_MAPPED_INSTRUCTION_INDEX.29e91263ef": [], "test.solana_models.not_null_silver___inner_instructions_VALUE.a2085a1bb0": [], "test.solana_models.not_null_silver___inner_instructions_INGESTED_AT.1266a72429": [], "test.solana_models.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_mints_BLOCK_TIMESTAMP__day__3.54d54b659a": [], "test.solana_models.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": [], "test.solana_models.not_null_silver__nft_mints_TX_ID.44c0221884": [], "test.solana_models.dbt_expectations_expect_column_to_exist_silver__nft_mints_SUCCEEDED.0e2f6c86c9": [], "test.solana_models.not_null_silver__nft_mints_PROGRAM_ID.1fc5cc1413": [], "test.solana_models.not_null_silver__nft_mints_MINT_CURRENCY.e0ee9560c4": [], "test.solana_models.not_null_silver__nft_mints_INGESTED_AT.1a89c6d16e": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_mints_TX_ID__INDEX__MINT__MINT_CURRENCY.0dba765d2d": [], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_TIMESTAMP.3e1edc8fa1": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_orca_dex_BLOCK_TIMESTAMP__day__2.2503b2f80c": [], "test.solana_models.not_null_silver__swaps_orca_dex_BLOCK_ID.a4cc54617a": [], "test.solana_models.not_null_silver__swaps_orca_dex_TX_ID.9cebcc023d": [], "test.solana_models.not_null_silver__swaps_orca_dex_SUCCEEDED.23b746a253": [], "test.solana_models.not_null_silver__swaps_orca_dex_SWAPPER.889e0c84f8": [], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_AMT.a3ef1055a1": [], "test.solana_models.not_null_silver__swaps_orca_dex_FROM_MINT.0e331c5efa": [], "test.solana_models.not_null_silver__swaps_orca_dex_TO_AMT.befb1c0b9e": [], "test.solana_models.not_null_silver__swaps_orca_dex_TO_MINT.9b3812179c": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__swaps_orca_dex_BLOCK_ID__TX_ID.48979bd85e": [], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_TIMESTAMP.13037271d8": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_lp_actions_BLOCK_TIMESTAMP__day__2.90bf8a19dd": [], "test.solana_models.not_null_silver__staking_lp_actions_BLOCK_ID.2741e69000": [], "test.solana_models.not_null_silver__staking_lp_actions_TX_ID.c56857b19f": [], "test.solana_models.not_null_silver__staking_lp_actions_INDEX.c1c849face": [], "test.solana_models.not_null_silver__staking_lp_actions_SUCCEEDED.61479a6e52": [], "test.solana_models.not_null_silver__staking_lp_actions_PROGRAM_ID.969d778cd0": [], "test.solana_models.not_null_silver__staking_lp_actions_EVENT_TYPE.e180c4961f": [], "test.solana_models.not_null_silver__staking_lp_actions_INSTRUCTION.75afcc5d77": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__staking_lp_actions_BLOCK_ID__TX_ID__INDEX.481403f0fa": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver___prices_RECORDED_AT__day__2.b5e04cdc42": [], "test.solana_models.not_null_silver___prices_SYMBOL.1cb592f6b5": [], "test.solana_models.not_null_silver___prices_PRICE.538411960a": [], "test.solana_models.not_null_silver___prices_PROVIDER.b4113c2df3": [], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_TIMESTAMP.e854ae8adf": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_sales_solport_BLOCK_TIMESTAMP__day__2.0c82aab50c": [], "test.solana_models.not_null_silver__nft_sales_solport_BLOCK_ID.eb9e21857e": [], "test.solana_models.not_null_silver__nft_sales_solport_TX_ID.0ae50fbb8d": [], "test.solana_models.not_null_silver__nft_sales_solport_SUCCEEDED.f6f26f67ae": [], "test.solana_models.not_null_silver__nft_sales_solport_PROGRAM_ID.81f1050c44": [], "test.solana_models.not_null_silver__nft_sales_solport_PURCHASER.9599941459": [], "test.solana_models.not_null_silver__nft_sales_solport_MINT.1987fba1ba": [], "test.solana_models.not_null_silver__nft_sales_solport_SALES_AMOUNT.4c46d51c37": [], "test.solana_models.not_null_silver__nft_sales_solport_INGESTED_AT.e2594c1e86": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_sales_solport_TX_ID__MINT.3fd99f75c8": [], "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_TIMESTAMP.d5c9da72fb": [], "test.solana_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__saber_gov_actions_BLOCK_TIMESTAMP__day__2.b909618d47": [], "test.solana_models.not_null_silver__saber_gov_actions_BLOCK_ID.ddd15f000c": [], "test.solana_models.not_null_silver__saber_gov_actions_TX_ID.940cbef646": [], "test.solana_models.not_null_silver__saber_gov_actions_SUCCEEDED.da5558dfd3": [], "test.solana_models.not_null_silver__saber_gov_actions_SIGNER.2b8ab022fc": [], "test.solana_models.not_null_silver__saber_gov_actions_LOCKER_ACCOUNT.cfa4617140": [], "test.solana_models.not_null_silver__saber_gov_actions_MINT.967987399d": [], "test.solana_models.not_null_silver__saber_gov_actions_ACTION.bc7052f39d": [], "test.solana_models.not_null_silver__saber_gov_actions_AMOUNT.246e41b482": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__saber_gov_actions_TX_ID.5c6344ea78": [], "test.solana_models.not_null_silver__nft_metadata_BLOCKCHAIN.2870373a60": [], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_ADDRESS.78ef3546ff": [], "test.solana_models.not_null_silver__nft_metadata_CONTRACT_NAME.125d348189": [], "test.solana_models.not_null_silver__nft_metadata_CREATED_AT_TIMESTAMP.aab146871f": [], "test.solana_models.not_null_silver__nft_metadata_CREATOR_ADDRESS.464995b4c4": [], "test.solana_models.not_null_silver__nft_metadata_CREATOR_NAME.20730ac475": [], "test.solana_models.not_null_silver__nft_metadata_IMAGE_URL.2762cb0722": [], "test.solana_models.not_null_silver__nft_metadata_PROJECT_NAME.ea0ca3f53e": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_ID.4aaca5f082": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA.285a46d20d": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_METADATA_URI.a4af01af1a": [], "test.solana_models.not_null_silver__nft_metadata_TOKEN_NAME.1fbcc05a32": [], "test.solana_models.dbt_utils_unique_combination_of_columns_silver__nft_metadata_CONTRACT_ADDRESS__TOKEN_ID.7f5990e849": [], "source.solana_models.prod.solana_blocks": ["model.solana_models.bronze__blocks"], "source.solana_models.prod.solana_txs": ["model.solana_models.bronze__transactions"], "source.solana_models.crosschain.address_labels": ["model.solana_models.core__dim_labels"], "source.solana_models.shared.prices_v2": ["model.solana_models.silver___prices"], "source.solana_models.legacy_bronze.prod_nft_metadata_uploads_1828572827": ["model.solana_models.silver__nft_metadata"]}}