name: dbt_run_decode_instructions_orchestrator
run-name: dbt_run_decode_instructions_orchestrator

on:
  workflow_dispatch:
    branches:
      - "main"
    
env:
  DBT_PROFILES_DIR: "${{ vars.DBT_PROFILES_DIR }}"

  ACCOUNT: "${{ vars.ACCOUNT }}"
  ROLE: "${{ vars.ROLE }}"
  USER: "${{ vars.USER }}"
  PASSWORD: "${{ secrets.PASSWORD }}"
  REGION: "${{ vars.REGION }}"
  DATABASE: "${{ vars.DATABASE }}"
  WAREHOUSE: "${{ vars.WAREHOUSE }}"
  SCHEMA: "${{ vars.SCHEMA }}"

concurrency:
  group: ${{ github.workflow }}

jobs:
  run_dbt_jobs:
    runs-on: ubuntu-latest
    environment: 
      name: workflow_prod

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "${{ vars.PYTHON_VERSION }}"
          cache: "pip"
      
      - name: Capture Formatted Minute
        id: capture_minute
        run: |
          formatted_minute=$(date '+%M')
          echo "Formatted Minute: $formatted_minute"
          echo "::set-output name=formatted_minute::$formatted_minute"

      - name: install dependencies
        run: |
          pip3 install dbt-snowflake==${{ vars.DBT_VERSION }} cli_passthrough requests click
          dbt deps

      - name: Run DBT Jobs
        run: |
          dbt run-operation run_query --args "{'sql': 'select 1'}"
      
      - name: Run Real Time Pyth Every 15 minutes
        run: |
          dbt run-operation dispatch_decode_instructions --args "{'workflow_name': 'test1'}"
        if: ${{ github.event_name == 'workflow_dispatch' && contains(fromJSON('["00", "15", "30", "45"]'),format('%M', steps.capture_minute.outputs.formatted_minute)) }}
      
      - name: Run Real Time Core on minutes 0 and 30 every hour
        run: |
          dbt run-operation dispatch_decode_instructions --args "{'workflow_name': 'test2'}"
        if: ${{ github.event_name == 'workflow_dispatch' && contains(fromJSON('["00", "30"]'),format('%M', steps.capture_minute.outputs.formatted_minute)) }}

      - name: Run Backfill on minutes 20 and 50 every hour
        run: |
          dbt run-operation dispatch_decode_instructions --args "{'workflow_name': 'test3'}"
        if: ${{ github.event_name == 'workflow_dispatch' && contains(fromJSON('["20", "50"]'),format('%M', steps.capture_minute.outputs.formatted_minute)) }}
