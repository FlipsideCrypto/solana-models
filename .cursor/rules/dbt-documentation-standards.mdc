---
description: 
globs: models/descriptions/*,*.yml,models/gold/**/*.sql
alwaysApply: false
---
# dbt Documentation Standards
When working with dbt projects, ensure comprehensive documentation that supports LLM-driven analytics workflows. This includes rich table and column descriptions that provide complete context for understanding blockchain data, specifically for the Solana blockchain.
## Table Documentation Standards
Every dbt Model must have an accompanying yml file that provides model documentation.
### Basic YML File Format
Every dbt model yml file must follow this basic structure:
```yaml
version: 2
models:
  - name: [model_name]
    description: |-
      [Clear description of what the model contains and its purpose]
    tests:
      - [appropriate_tests_for_the_model]
    columns:
      - name: [COLUMN_NAME]
        description: "{{ doc('column_name')}}"
        tests:
          - [appropriate_tests_for_the_column]
```
#### Required Elements:
- **version: 2** - Must be the first line
- **models:** - Top-level key containing the model definitions
- **name:** - The exact name of the dbt model (without .sql extension)
- **description:** - Clear explanation of the model's purpose and contents
- **columns:** - List of all columns in the model with their documentation
#### Column Documentation Format:
```yaml
- name: [COLUMN_NAME_IN_UPPERCASE]
  description: "{{ doc('column_name')}}"
  tests:
    - [test_name]:
        [test_parameters]
```
### Table Descriptions
Must clearly explain:
- What the model is mapping from the Solana blockchain
- What data it contains and its scope
- How it relates to other models in the lineage
- Any important transformations or business logic applied
### Lineage Analysis
Before writing table descriptions:
- Read the dbt model SQL to understand the logic
- Follow upstream dependencies to understand data flow
- Review source models and transformations
- Understand the business context and use cases
## Column Documentation Standards
### Rich Descriptions
Each column description must include:
- Clear definition of what the field represents
- Data type and format expectations
- Business context and use cases
- Examples where helpful (especially for Solana-specific concepts)
- Relationships to other fields when relevant
- Any important caveats or limitations
### Blockchain-Specific Context
For Solana data:
- Reference official Solana protocol documentation for technical accuracy
- Explain Solana-specific concepts (lamports, rent, program accounts, etc.)
- Provide examples using Solana's conventions (e.g., base58 addresses, slot numbers)
- Clarify differences from other blockchains when relevant
### YAML Requirements
- Column names MUST BE CAPITALIZED in YAML files
- Use `{{ doc('column_name') }}` references for consistent desciption across models. The doc block must refer to a valid description in `models/descriptions`
- Include appropriate tests for data quality
## Documentation Review Process
### Research Phase
- Search official protocol documentation for technical concepts
- Review developer guides and API documentation
- Understand the blockchain's data structures and conventions
- Research common use cases and analytics patterns
### Analysis Phase
- Read the dbt model SQL to understand transformations
- Follow model lineage to understand data dependencies
- Identify business logic and data quality considerations
- Map columns to their blockchain equivalents
### Writing Phase
- Write clear, complete descriptions that stand alone
- Use consistent terminology and formatting
- Include examples for complex concepts
- Ensure descriptions support LLM understanding
### Quality Check
- Verify technical accuracy against protocol documentation
- Ensure descriptions are complete and self-contained
- Check for consistency across related models
- Validate that descriptions support common analytics use cases
## File Organization
- Store all documentation in `models/descriptions/` directory
- Use consistent naming: `column_name.md` for individual columns with descriptions wrapped in the appropriate tags: `{% docs column_name %} DESCRIPTION {% enddocs %}`
- Create table-level documentation in `table_name.md` files
- Maintain `__overview__.md` for project-level context
## Examples of Good Documentation
```markdown
{% docs amount_raw %}
Unadjusted amount of tokens as it appears on-chain (not decimal adjusted). This is the raw token amount before any decimal precision adjustments are applied. For example, if transferring 1 SOL, the amount_raw would be 1000000000 (1e9) since SOL has 9 decimal places. This field preserves the exact on-chain representation of the token amount for precise calculations and verification.
{% enddocs %}
```
## Common Patterns to Follow
- Start with a clear definition
- Provide context about why the field exists
- Include examples for complex concepts
- Explain relationships to other fields
- Mention any important limitations or considerations
- Use consistent terminology throughout the project